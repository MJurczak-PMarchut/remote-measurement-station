
STSW-STLKT01-BLE_SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009790  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f0  20000000  08009f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000026d8  200000f0  0800a048  000200f0  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
  8 .bss2         00000000  200000f0  200000f0  000200f0  2**0
                  CONTENTS
  9 ._user_heap_stack 00008800  200027c8  200027c8  000227c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 11 .debug_line   0001808b  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0004b5c7  00000000  00000000  000381ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000070af  00000000  00000000  00083772  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002820  00000000  00000000  0008a828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000e041  00000000  00000000  0008d048  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002658  00000000  00000000  0009b090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00024229  00000000  00000000  0009d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c1911  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007cf0  00000000  00000000  000c198c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009908 	.word	0x08009908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08009908 	.word	0x08009908

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000276:	e003      	b.n	8000280 <LoopCopyDataInit>

08000278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800027a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800027c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800027e:	3104      	adds	r1, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000288:	d3f6      	bcc.n	8000278 <CopyDataInit>
	ldr	r2, =_sbss
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800028c:	e002      	b.n	8000294 <LoopFillZerobss>

0800028e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800028e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000290:	f842 3b04 	str.w	r3, [r2], #4

08000294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <LoopForever+0x16>)
	cmp	r2, r3
 8000296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000298:	d3f9      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800029a:	f003 fbd1 	bl	8003a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029e:	f008 feff 	bl	80090a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002a2:	f000 fe29 	bl	8000ef8 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80002ac:	08009f58 	.word	0x08009f58
	ldr	r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002b4:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 80002b8:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 80002bc:	200027c8 	.word	0x200027c8

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <_sbrk>:




caddr_t _sbrk(int incr)
{
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4603      	mov	r3, r0
	extern char end /*asm("end")*/;
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <_sbrk+0x3c>)
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	b162      	cbz	r2, 80002e8 <_sbrk+0x24>
		heap_end = &end;

	prev_heap_end = heap_end;
 80002ce:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <_sbrk+0x3c>)
 80002d0:	6810      	ldr	r0, [r2, #0]

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80002d2:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <_sbrk+0x40>)
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	6812      	ldr	r2, [r2, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 80002d8:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200

	if (heap_end + incr > min_stack_ptr)
 80002dc:	4403      	add	r3, r0
 80002de:	4293      	cmp	r3, r2
 80002e0:	d806      	bhi.n	80002f0 <_sbrk+0x2c>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <_sbrk+0x3c>)
 80002e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80002e6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <_sbrk+0x3c>)
 80002ea:	4907      	ldr	r1, [pc, #28]	; (8000308 <_sbrk+0x44>)
 80002ec:	6011      	str	r1, [r2, #0]
 80002ee:	e7ee      	b.n	80002ce <_sbrk+0xa>
		errno = ENOMEM;
 80002f0:	f008 fed0 	bl	8009094 <__errno>
 80002f4:	230c      	movs	r3, #12
 80002f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295
 80002fc:	e7f3      	b.n	80002e6 <_sbrk+0x22>
 80002fe:	bf00      	nop
 8000300:	2000010c 	.word	0x2000010c
 8000304:	e000ed08 	.word	0xe000ed08
 8000308:	200027c8 	.word	0x200027c8

0800030c <Init_MEM1_Sensors>:
/** @brief Initialize all the MEMS1 sensors
 * @param None
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	b0c1      	sub	sp, #260	; 0x104
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 8000310:	2105      	movs	r1, #5
 8000312:	2000      	movs	r0, #0
 8000314:	f003 faaa 	bl	800386c <BSP_ENV_SENSOR_Init>
 8000318:	b1b8      	cbz	r0, 800034a <Init_MEM1_Sensors+0x3e>
    TargetBoardFeatures.NumTempSensors++;
    TargetBoardFeatures.HandleTempSensors[0]=1;
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 800031a:	2103      	movs	r1, #3
 800031c:	2001      	movs	r0, #1
 800031e:	f003 faa5 	bl	800386c <BSP_ENV_SENSOR_Init>
 8000322:	2800      	cmp	r0, #0
 8000324:	d032      	beq.n	800038c <Init_MEM1_Sensors+0x80>

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
     TargetBoardFeatures.HandlePressSensor=1;
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 8000326:	4b50      	ldr	r3, [pc, #320]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14f      	bne.n	80003ce <Init_MEM1_Sensors+0xc2>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 800032e:	4b4e      	ldr	r3, [pc, #312]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d15e      	bne.n	80003f4 <Init_MEM1_Sensors+0xe8>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 8000336:	4b4c      	ldr	r3, [pc, #304]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d16d      	bne.n	800041a <Init_MEM1_Sensors+0x10e>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 800033e:	4b4a      	ldr	r3, [pc, #296]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d17c      	bne.n	8000440 <Init_MEM1_Sensors+0x134>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
    }
  }
}
 8000346:	b041      	add	sp, #260	; 0x104
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 800034a:	466c      	mov	r4, sp
 800034c:	4d47      	ldr	r5, [pc, #284]	; (800046c <Init_MEM1_Sensors+0x160>)
 800034e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000356:	f844 0b04 	str.w	r0, [r4], #4
 800035a:	7021      	strb	r1, [r4, #0]
 800035c:	2114      	movs	r1, #20
 800035e:	4668      	mov	r0, sp
 8000360:	f001 fd9c 	bl	8001e9c <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 8000364:	4e40      	ldr	r6, [pc, #256]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 8000366:	2701      	movs	r7, #1
 8000368:	61b7      	str	r7, [r6, #24]
    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 800036a:	466c      	mov	r4, sp
 800036c:	4d40      	ldr	r5, [pc, #256]	; (8000470 <Init_MEM1_Sensors+0x164>)
 800036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000376:	c403      	stmia	r4!, {r0, r1}
 8000378:	7022      	strb	r2, [r4, #0]
 800037a:	2118      	movs	r1, #24
 800037c:	4668      	mov	r0, sp
 800037e:	f001 fd8d 	bl	8001e9c <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 8000382:	68b3      	ldr	r3, [r6, #8]
 8000384:	443b      	add	r3, r7
 8000386:	60b3      	str	r3, [r6, #8]
    TargetBoardFeatures.HandleTempSensors[0]=1;
 8000388:	60f7      	str	r7, [r6, #12]
 800038a:	e7c6      	b.n	800031a <Init_MEM1_Sensors+0xe>
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 800038c:	466c      	mov	r4, sp
 800038e:	4d39      	ldr	r5, [pc, #228]	; (8000474 <Init_MEM1_Sensors+0x168>)
 8000390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000398:	c403      	stmia	r4!, {r0, r1}
 800039a:	7022      	strb	r2, [r4, #0]
 800039c:	2118      	movs	r1, #24
 800039e:	4668      	mov	r0, sp
 80003a0:	f001 fd7c 	bl	8001e9c <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 80003a4:	4e30      	ldr	r6, [pc, #192]	; (8000468 <Init_MEM1_Sensors+0x15c>)
 80003a6:	68b3      	ldr	r3, [r6, #8]
 80003a8:	3301      	adds	r3, #1
 80003aa:	60b3      	str	r3, [r6, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 80003ac:	2701      	movs	r7, #1
 80003ae:	6137      	str	r7, [r6, #16]
     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 80003b0:	466c      	mov	r4, sp
 80003b2:	4d31      	ldr	r5, [pc, #196]	; (8000478 <Init_MEM1_Sensors+0x16c>)
 80003b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003bc:	f844 0b04 	str.w	r0, [r4], #4
 80003c0:	7021      	strb	r1, [r4, #0]
 80003c2:	2114      	movs	r1, #20
 80003c4:	4668      	mov	r0, sp
 80003c6:	f001 fd69 	bl	8001e9c <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 80003ca:	6177      	str	r7, [r6, #20]
 80003cc:	e7ab      	b.n	8000326 <Init_MEM1_Sensors+0x1a>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 80003ce:	2104      	movs	r1, #4
 80003d0:	2000      	movs	r0, #0
 80003d2:	f003 fadb 	bl	800398c <BSP_ENV_SENSOR_Enable>
 80003d6:	2800      	cmp	r0, #0
 80003d8:	d1a9      	bne.n	800032e <Init_MEM1_Sensors+0x22>
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 80003da:	466c      	mov	r4, sp
 80003dc:	4d27      	ldr	r5, [pc, #156]	; (800047c <Init_MEM1_Sensors+0x170>)
 80003de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e6:	c403      	stmia	r4!, {r0, r1}
 80003e8:	8022      	strh	r2, [r4, #0]
 80003ea:	2119      	movs	r1, #25
 80003ec:	4668      	mov	r0, sp
 80003ee:	f001 fd55 	bl	8001e9c <CDC_Fill_Buffer>
 80003f2:	e79c      	b.n	800032e <Init_MEM1_Sensors+0x22>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80003f4:	2101      	movs	r1, #1
 80003f6:	2000      	movs	r0, #0
 80003f8:	f003 fac8 	bl	800398c <BSP_ENV_SENSOR_Enable>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d19a      	bne.n	8000336 <Init_MEM1_Sensors+0x2a>
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 8000400:	466c      	mov	r4, sp
 8000402:	4d1f      	ldr	r5, [pc, #124]	; (8000480 <Init_MEM1_Sensors+0x174>)
 8000404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000408:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800040c:	c407      	stmia	r4!, {r0, r1, r2}
 800040e:	8023      	strh	r3, [r4, #0]
 8000410:	211d      	movs	r1, #29
 8000412:	4668      	mov	r0, sp
 8000414:	f001 fd42 	bl	8001e9c <CDC_Fill_Buffer>
 8000418:	e78d      	b.n	8000336 <Init_MEM1_Sensors+0x2a>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 800041a:	2101      	movs	r1, #1
 800041c:	4608      	mov	r0, r1
 800041e:	f003 fab5 	bl	800398c <BSP_ENV_SENSOR_Enable>
 8000422:	2800      	cmp	r0, #0
 8000424:	d18b      	bne.n	800033e <Init_MEM1_Sensors+0x32>
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 8000426:	466c      	mov	r4, sp
 8000428:	4d16      	ldr	r5, [pc, #88]	; (8000484 <Init_MEM1_Sensors+0x178>)
 800042a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000432:	c407      	stmia	r4!, {r0, r1, r2}
 8000434:	8023      	strh	r3, [r4, #0]
 8000436:	211d      	movs	r1, #29
 8000438:	4668      	mov	r0, sp
 800043a:	f001 fd2f 	bl	8001e9c <CDC_Fill_Buffer>
 800043e:	e77e      	b.n	800033e <Init_MEM1_Sensors+0x32>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000440:	2102      	movs	r1, #2
 8000442:	2001      	movs	r0, #1
 8000444:	f003 faa2 	bl	800398c <BSP_ENV_SENSOR_Enable>
 8000448:	2800      	cmp	r0, #0
 800044a:	f47f af7c 	bne.w	8000346 <Init_MEM1_Sensors+0x3a>
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 800044e:	466c      	mov	r4, sp
 8000450:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <Init_MEM1_Sensors+0x17c>)
 8000452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800045a:	c403      	stmia	r4!, {r0, r1}
 800045c:	8022      	strh	r2, [r4, #0]
 800045e:	2119      	movs	r1, #25
 8000460:	4668      	mov	r0, sp
 8000462:	f001 fd1b 	bl	8001e9c <CDC_Fill_Buffer>
}
 8000466:	e76e      	b.n	8000346 <Init_MEM1_Sensors+0x3a>
 8000468:	200005d4 	.word	0x200005d4
 800046c:	080099b0 	.word	0x080099b0
 8000470:	080099c8 	.word	0x080099c8
 8000474:	080099e4 	.word	0x080099e4
 8000478:	08009a00 	.word	0x08009a00
 800047c:	08009a18 	.word	0x08009a18
 8000480:	08009a34 	.word	0x08009a34
 8000484:	08009a54 	.word	0x08009a54
 8000488:	08009a74 	.word	0x08009a74

0800048c <InitTargetPlatform>:
{
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	b0c3      	sub	sp, #268	; 0x10c
  TargetBoardFeatures.BoardType = BoardType;
 8000490:	4c10      	ldr	r4, [pc, #64]	; (80004d4 <InitTargetPlatform+0x48>)
 8000492:	7020      	strb	r0, [r4, #0]
  BSP_LED_Init( LED1 );
 8000494:	2000      	movs	r0, #0
 8000496:	f002 fcd5 	bl	8002e44 <BSP_LED_Init>
  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 800049a:	2330      	movs	r3, #48	; 0x30
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2534      	movs	r5, #52	; 0x34
 80004a0:	9500      	str	r5, [sp, #0]
 80004a2:	2332      	movs	r3, #50	; 0x32
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <InitTargetPlatform+0x4c>)
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <InitTargetPlatform+0x50>)
 80004a8:	a802      	add	r0, sp, #8
 80004aa:	f008 fee9 	bl	8009280 <siprintf>
 80004ae:	213c      	movs	r1, #60	; 0x3c
 80004b0:	a802      	add	r0, sp, #8
 80004b2:	f001 fcf3 	bl	8001e9c <CDC_Fill_Buffer>
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80004b6:	462a      	mov	r2, r5
 80004b8:	2100      	movs	r1, #0
 80004ba:	4620      	mov	r0, r4
 80004bc:	f008 fe1f 	bl	80090fe <memset>
  Sensor_IO_SPI_CS_Init_All();
 80004c0:	f002 fd40 	bl	8002f44 <Sensor_IO_SPI_CS_Init_All>
  Init_MEM1_Sensors();
 80004c4:	f7ff ff22 	bl	800030c <Init_MEM1_Sensors>
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 80004c8:	2300      	movs	r3, #0
 80004ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80004ce:	b043      	add	sp, #268	; 0x10c
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop
 80004d4:	200005d4 	.word	0x200005d4
 80004d8:	08009a90 	.word	0x08009a90
 80004dc:	08009a98 	.word	0x08009a98

080004e0 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 80004e0:	b508      	push	{r3, lr}
  BSP_LED_On( LED1 );
 80004e2:	2000      	movs	r0, #0
 80004e4:	f002 fcee 	bl	8002ec4 <BSP_LED_On>
}
 80004e8:	bd08      	pop	{r3, pc}

080004ea <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 80004ea:	b508      	push	{r3, lr}
  BSP_LED_Off( LED1 );
 80004ec:	2000      	movs	r0, #0
 80004ee:	f002 fd09 	bl	8002f04 <BSP_LED_Off>
}
 80004f2:	bd08      	pop	{r3, pc}

080004f4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80004f8:	f005 f85c 	bl	80055b4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <HCI_TL_SPI_Init+0x98>)
 80004fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000504:	64da      	str	r2, [r3, #76]	; 0x4c
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000512:	f042 0204 	orr.w	r2, r2, #4
 8000516:	64da      	str	r2, [r3, #76]	; 0x4c
 8000518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051a:	f002 0204 	and.w	r2, r2, #4
 800051e:	9201      	str	r2, [sp, #4]
 8000520:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000524:	f042 0202 	orr.w	r2, r2, #2
 8000528:	64da      	str	r2, [r3, #76]	; 0x4c
 800052a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000534:	4e16      	ldr	r6, [pc, #88]	; (8000590 <HCI_TL_SPI_Init+0x9c>)
 8000536:	2201      	movs	r2, #1
 8000538:	2104      	movs	r1, #4
 800053a:	4630      	mov	r0, r6
 800053c:	f003 fd3b 	bl	8003fb6 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000540:	2320      	movs	r3, #32
 8000542:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <HCI_TL_SPI_Init+0xa0>)
 8000546:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2400      	movs	r4, #0
 800054a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800054c:	a903      	add	r1, sp, #12
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <HCI_TL_SPI_Init+0xa4>)
 8000550:	f003 fbb6 	bl	8003cc0 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000554:	2501      	movs	r5, #1
 8000556:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800055e:	a903      	add	r1, sp, #12
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <HCI_TL_SPI_Init+0xa8>)
 8000562:	f003 fbad 	bl	8003cc0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000566:	2704      	movs	r7, #4
 8000568:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8000570:	a903      	add	r1, sp, #12
 8000572:	4630      	mov	r0, r6
 8000574:	f003 fba4 	bl	8003cc0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000578:	462a      	mov	r2, r5
 800057a:	4639      	mov	r1, r7
 800057c:	4630      	mov	r0, r6
 800057e:	f003 fd1a 	bl	8003fb6 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 8000582:	f002 ff47 	bl	8003414 <BSP_SPI1_Init>
}
 8000586:	b009      	add	sp, #36	; 0x24
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	48000400 	.word	0x48000400
 8000594:	10110000 	.word	0x10110000
 8000598:	48000800 	.word	0x48000800
 800059c:	48001c00 	.word	0x48001c00

080005a0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80005a0:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 80005a2:	2120      	movs	r1, #32
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <HCI_TL_SPI_DeInit+0x20>)
 80005a6:	f003 fc6f 	bl	8003e88 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80005aa:	2104      	movs	r1, #4
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HCI_TL_SPI_DeInit+0x24>)
 80005ae:	f003 fc6b 	bl	8003e88 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80005b2:	2101      	movs	r1, #1
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <HCI_TL_SPI_DeInit+0x28>)
 80005b6:	f003 fc67 	bl	8003e88 <HAL_GPIO_DeInit>
  return 0;
}
 80005ba:	2000      	movs	r0, #0
 80005bc:	bd08      	pop	{r3, pc}
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800
 80005c4:	48000400 	.word	0x48000400
 80005c8:	48001c00 	.word	0x48001c00

080005cc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005cc:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ce:	4c09      	ldr	r4, [pc, #36]	; (80005f4 <HCI_TL_SPI_Reset+0x28>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4620      	mov	r0, r4
 80005d6:	f003 fcee 	bl	8003fb6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005da:	2005      	movs	r0, #5
 80005dc:	f000 fb5c 	bl	8000c98 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4620      	mov	r0, r4
 80005e6:	f003 fce6 	bl	8003fb6 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80005ea:	2005      	movs	r0, #5
 80005ec:	f000 fb54 	bl	8000c98 <HAL_Delay>
  return 0;
}  
 80005f0:	2000      	movs	r0, #0
 80005f2:	bd10      	pop	{r4, pc}
 80005f4:	48001c00 	.word	0x48001c00

080005f8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	4606      	mov	r6, r0
 80005fe:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000606:	230b      	movs	r3, #11
 8000608:	f88d 3008 	strb.w	r3, [sp, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	f88d 2009 	strb.w	r2, [sp, #9]
 8000612:	f88d 200a 	strb.w	r2, [sp, #10]
 8000616:	f88d 200b 	strb.w	r2, [sp, #11]
 800061a:	f88d 200c 	strb.w	r2, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800061e:	2104      	movs	r1, #4
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <HCI_TL_SPI_Receive+0x90>)
 8000622:	f003 fcc8 	bl	8003fb6 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000626:	2205      	movs	r2, #5
 8000628:	4669      	mov	r1, sp
 800062a:	a802      	add	r0, sp, #8
 800062c:	f002 fe34 	bl	8003298 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000630:	f89d 3000 	ldrb.w	r3, [sp]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d008      	beq.n	800064a <HCI_TL_SPI_Receive+0x52>
  uint8_t len = 0;
 8000638:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2104      	movs	r1, #4
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <HCI_TL_SPI_Receive+0x90>)
 8000640:	f003 fcb9 	bl	8003fb6 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8000644:	4620      	mov	r0, r4
 8000646:	b004      	add	sp, #16
 8000648:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800064a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800064e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8000652:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8000656:	d014      	beq.n	8000682 <HCI_TL_SPI_Receive+0x8a>
      if (byte_count > size){
 8000658:	42ab      	cmp	r3, r5
 800065a:	d800      	bhi.n	800065e <HCI_TL_SPI_Receive+0x66>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800065c:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 800065e:	2400      	movs	r4, #0
 8000660:	e00b      	b.n	800067a <HCI_TL_SPI_Receive+0x82>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8000662:	2201      	movs	r2, #1
 8000664:	f10d 010e 	add.w	r1, sp, #14
 8000668:	f10d 000f 	add.w	r0, sp, #15
 800066c:	f002 fe14 	bl	8003298 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000670:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000674:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8000676:	3401      	adds	r4, #1
 8000678:	b2e4      	uxtb	r4, r4
 800067a:	b2a3      	uxth	r3, r4
 800067c:	42ab      	cmp	r3, r5
 800067e:	d3f0      	bcc.n	8000662 <HCI_TL_SPI_Receive+0x6a>
 8000680:	e7db      	b.n	800063a <HCI_TL_SPI_Receive+0x42>
  uint8_t len = 0;
 8000682:	2400      	movs	r4, #0
 8000684:	e7d9      	b.n	800063a <HCI_TL_SPI_Receive+0x42>
 8000686:	bf00      	nop
 8000688:	48000400 	.word	0x48000400

0800068c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	b085      	sub	sp, #20
 8000690:	4607      	mov	r7, r0
 8000692:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000694:	230a      	movs	r3, #10
 8000696:	f88d 3008 	strb.w	r3, [sp, #8]
 800069a:	2300      	movs	r3, #0
 800069c:	f88d 3009 	strb.w	r3, [sp, #9]
 80006a0:	f88d 300a 	strb.w	r3, [sp, #10]
 80006a4:	f88d 300b 	strb.w	r3, [sp, #11]
 80006a8:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f003 fa30 	bl	8003b10 <HAL_GetTick>
 80006b0:	4605      	mov	r5, r0
 80006b2:	e011      	b.n	80006d8 <HCI_TL_SPI_Send+0x4c>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80006b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80006b8:	42b3      	cmp	r3, r6
 80006ba:	d21e      	bcs.n	80006fa <HCI_TL_SPI_Send+0x6e>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80006bc:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <HCI_TL_SPI_Send+0x88>)
 80006c6:	f003 fc76 	bl	8003fb6 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80006ca:	f003 fa21 	bl	8003b10 <HAL_GetTick>
 80006ce:	1b40      	subs	r0, r0, r5
 80006d0:	280f      	cmp	r0, #15
 80006d2:	d819      	bhi.n	8000708 <HCI_TL_SPI_Send+0x7c>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	da19      	bge.n	800070c <HCI_TL_SPI_Send+0x80>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2104      	movs	r1, #4
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <HCI_TL_SPI_Send+0x88>)
 80006de:	f003 fc6a 	bl	8003fb6 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006e2:	2205      	movs	r2, #5
 80006e4:	4669      	mov	r1, sp
 80006e6:	a802      	add	r0, sp, #8
 80006e8:	f002 fdd6 	bl	8003298 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80006ec:	f89d 3000 	ldrb.w	r3, [sp]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d0df      	beq.n	80006b4 <HCI_TL_SPI_Send+0x28>
      result = -1;
 80006f4:	f04f 34ff 	mov.w	r4, #4294967295
 80006f8:	e7e2      	b.n	80006c0 <HCI_TL_SPI_Send+0x34>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80006fa:	4632      	mov	r2, r6
 80006fc:	4906      	ldr	r1, [pc, #24]	; (8000718 <HCI_TL_SPI_Send+0x8c>)
 80006fe:	4638      	mov	r0, r7
 8000700:	f002 fdca 	bl	8003298 <BSP_SPI1_SendRecv>
    result = 0;
 8000704:	2400      	movs	r4, #0
 8000706:	e7db      	b.n	80006c0 <HCI_TL_SPI_Send+0x34>
      result = -3;
 8000708:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 800070c:	4620      	mov	r0, r4
 800070e:	b005      	add	sp, #20
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	bf00      	nop
 8000714:	48000400 	.word	0x48000400
 8000718:	20000110 	.word	0x20000110

0800071c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800071c:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800071e:	2120      	movs	r1, #32
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <IsDataAvailable+0x14>)
 8000722:	f003 fc41 	bl	8003fa8 <HAL_GPIO_ReadPin>
} 
 8000726:	2801      	cmp	r0, #1
 8000728:	bf14      	ite	ne
 800072a:	2000      	movne	r0, #0
 800072c:	2001      	moveq	r0, #1
 800072e:	bd08      	pop	{r3, pc}
 8000730:	48000800 	.word	0x48000800

08000734 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000734:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8000736:	f7ff fff1 	bl	800071c <IsDataAvailable>
 800073a:	b138      	cbz	r0, 800074c <hci_tl_lowlevel_isr+0x18>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 800073c:	2000      	movs	r0, #0
 800073e:	f008 fc09 	bl	8008f54 <hci_notify_asynch_evt>
 8000742:	b918      	cbnz	r0, 800074c <hci_tl_lowlevel_isr+0x18>
      return;
	}
    HCI_ProcessEvent=1;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <hci_tl_lowlevel_isr+0x1c>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e7f4      	b.n	8000736 <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 800074c:	bd08      	pop	{r3, pc}
 800074e:	bf00      	nop
 8000750:	200008e0 	.word	0x200008e0

08000754 <hci_tl_lowlevel_init>:
{
 8000754:	b510      	push	{r4, lr}
 8000756:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <hci_tl_lowlevel_init+0x4c>)
 800075a:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <hci_tl_lowlevel_init+0x50>)
 800075e:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <hci_tl_lowlevel_init+0x54>)
 8000762:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <hci_tl_lowlevel_init+0x58>)
 8000766:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <hci_tl_lowlevel_init+0x5c>)
 800076a:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <hci_tl_lowlevel_init+0x60>)
 800076e:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8000770:	a801      	add	r0, sp, #4
 8000772:	f008 fb19 	bl	8008da8 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000776:	4c10      	ldr	r4, [pc, #64]	; (80007b8 <hci_tl_lowlevel_init+0x64>)
 8000778:	4910      	ldr	r1, [pc, #64]	; (80007bc <hci_tl_lowlevel_init+0x68>)
 800077a:	4620      	mov	r0, r4
 800077c:	f003 fa84 	bl	8003c88 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <hci_tl_lowlevel_init+0x6c>)
 8000782:	2100      	movs	r1, #0
 8000784:	4620      	mov	r0, r4
 8000786:	f003 fa79 	bl	8003c7c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2103      	movs	r1, #3
 800078e:	2017      	movs	r0, #23
 8000790:	f003 f9da 	bl	8003b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000794:	2017      	movs	r0, #23
 8000796:	f003 fa0b 	bl	8003bb0 <HAL_NVIC_EnableIRQ>
}
 800079a:	b008      	add	sp, #32
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	080004f5 	.word	0x080004f5
 80007a4:	080005a1 	.word	0x080005a1
 80007a8:	0800068d 	.word	0x0800068d
 80007ac:	080005f9 	.word	0x080005f9
 80007b0:	080005cd 	.word	0x080005cd
 80007b4:	080032c5 	.word	0x080032c5
 80007b8:	200008d8 	.word	0x200008d8
 80007bc:	16000005 	.word	0x16000005
 80007c0:	08000735 	.word	0x08000735

080007c4 <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 80007c4:	b510      	push	{r4, lr}
 80007c6:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	2400      	movs	r4, #0
 80007ca:	9435      	str	r4, [sp, #212]	; 0xd4
 80007cc:	9436      	str	r4, [sp, #216]	; 0xd8
 80007ce:	9437      	str	r4, [sp, #220]	; 0xdc
 80007d0:	9438      	str	r4, [sp, #224]	; 0xe0
 80007d2:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d4:	2244      	movs	r2, #68	; 0x44
 80007d6:	4621      	mov	r1, r4
 80007d8:	a824      	add	r0, sp, #144	; 0x90
 80007da:	f008 fc90 	bl	80090fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007de:	2288      	movs	r2, #136	; 0x88
 80007e0:	4621      	mov	r1, r4
 80007e2:	a802      	add	r0, sp, #8
 80007e4:	f008 fc8b 	bl	80090fe <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xbc>)
 80007ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007f0:	659a      	str	r2, [r3, #88]	; 0x58
 80007f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 80007fc:	f004 feca 	bl	8005594 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000800:	2304      	movs	r3, #4
 8000802:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	a824      	add	r0, sp, #144	; 0x90
 800080a:	f004 ff7d 	bl	8005708 <HAL_RCC_OscConfig>
 800080e:	b100      	cbz	r0, 8000812 <SystemClock_Config+0x4e>
 8000810:	e7fe      	b.n	8000810 <SystemClock_Config+0x4c>
  {
    while(1);
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8000812:	f005 fecd 	bl	80065b0 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8000816:	2310      	movs	r3, #16
 8000818:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800081e:	2200      	movs	r2, #0
 8000820:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000822:	22b0      	movs	r2, #176	; 0xb0
 8000824:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000826:	2202      	movs	r2, #2
 8000828:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800082a:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 800082c:	2306      	movs	r3, #6
 800082e:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000830:	2328      	movs	r3, #40	; 0x28
 8000832:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8000834:	2307      	movs	r3, #7
 8000836:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 800083c:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	a824      	add	r0, sp, #144	; 0x90
 8000840:	f004 ff62 	bl	8005708 <HAL_RCC_OscConfig>
 8000844:	b100      	cbz	r0, 8000848 <SystemClock_Config+0x84>
 8000846:	e7fe      	b.n	8000846 <SystemClock_Config+0x82>
  {
    while(1);
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8000848:	f005 fec0 	bl	80065cc <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000852:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000856:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000858:	a802      	add	r0, sp, #8
 800085a:	f005 fc81 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800085e:	230f      	movs	r3, #15
 8000860:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	2104      	movs	r1, #4
 8000870:	a835      	add	r0, sp, #212	; 0xd4
 8000872:	f005 fa65 	bl	8005d40 <HAL_RCC_ClockConfig>
 8000876:	b100      	cbz	r0, 800087a <SystemClock_Config+0xb6>
 8000878:	e7fe      	b.n	8000878 <SystemClock_Config+0xb4>
  {
    while(1);
  }
}
 800087a:	b03a      	add	sp, #232	; 0xe8
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <Init_BlueNRG_Custom_Services>:
{
 8000884:	b530      	push	{r4, r5, lr}
 8000886:	b0c1      	sub	sp, #260	; 0x104
  ret = Add_HWServW2ST_Service();
 8000888:	f000 fdd8 	bl	800143c <Add_HWServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) 
 800088c:	bb18      	cbnz	r0, 80008d6 <Init_BlueNRG_Custom_Services+0x52>
    STLBLE_PRINTF("HW      Service W2ST added successfully\r\n");
 800088e:	466c      	mov	r4, sp
 8000890:	4d22      	ldr	r5, [pc, #136]	; (800091c <Init_BlueNRG_Custom_Services+0x98>)
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089e:	c403      	stmia	r4!, {r0, r1}
 80008a0:	8022      	strh	r2, [r4, #0]
 80008a2:	2129      	movs	r1, #41	; 0x29
 80008a4:	4668      	mov	r0, sp
 80008a6:	f001 faf9 	bl	8001e9c <CDC_Fill_Buffer>
  ret = Add_ConfigW2ST_Service();
 80008aa:	f000 fc35 	bl	8001118 <Add_ConfigW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) 
 80008ae:	b328      	cbz	r0, 80008fc <Init_BlueNRG_Custom_Services+0x78>
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
 80008b0:	466c      	mov	r4, sp
 80008b2:	4d1b      	ldr	r5, [pc, #108]	; (8000920 <Init_BlueNRG_Custom_Services+0x9c>)
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c0:	c403      	stmia	r4!, {r0, r1}
 80008c2:	f824 2b02 	strh.w	r2, [r4], #2
 80008c6:	0c12      	lsrs	r2, r2, #16
 80008c8:	7022      	strb	r2, [r4, #0]
 80008ca:	212a      	movs	r1, #42	; 0x2a
 80008cc:	4668      	mov	r0, sp
 80008ce:	f001 fae5 	bl	8001e9c <CDC_Fill_Buffer>
}
 80008d2:	b041      	add	sp, #260	; 0x104
 80008d4:	bd30      	pop	{r4, r5, pc}
    STLBLE_PRINTF("\r\nError while adding HW Service W2ST\r\n");
 80008d6:	466c      	mov	r4, sp
 80008d8:	4d12      	ldr	r5, [pc, #72]	; (8000924 <Init_BlueNRG_Custom_Services+0xa0>)
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e6:	f844 0b04 	str.w	r0, [r4], #4
 80008ea:	f824 1b02 	strh.w	r1, [r4], #2
 80008ee:	0c09      	lsrs	r1, r1, #16
 80008f0:	7021      	strb	r1, [r4, #0]
 80008f2:	2126      	movs	r1, #38	; 0x26
 80008f4:	4668      	mov	r0, sp
 80008f6:	f001 fad1 	bl	8001e9c <CDC_Fill_Buffer>
 80008fa:	e7d6      	b.n	80008aa <Init_BlueNRG_Custom_Services+0x26>
    STLBLE_PRINTF("Config  Service W2ST added successfully\r\n");
 80008fc:	466c      	mov	r4, sp
 80008fe:	4d0a      	ldr	r5, [pc, #40]	; (8000928 <Init_BlueNRG_Custom_Services+0xa4>)
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090c:	c403      	stmia	r4!, {r0, r1}
 800090e:	8022      	strh	r2, [r4, #0]
 8000910:	2129      	movs	r1, #41	; 0x29
 8000912:	4668      	mov	r0, sp
 8000914:	f001 fac2 	bl	8001e9c <CDC_Fill_Buffer>
 8000918:	e7db      	b.n	80008d2 <Init_BlueNRG_Custom_Services+0x4e>
 800091a:	bf00      	nop
 800091c:	08009ad4 	.word	0x08009ad4
 8000920:	08009b54 	.word	0x08009b54
 8000924:	08009b00 	.word	0x08009b00
 8000928:	08009b28 	.word	0x08009b28

0800092c <SendEnvironmentalData>:
{  
 800092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000930:	b0c2      	sub	sp, #264	; 0x108
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000932:	4bbd      	ldr	r3, [pc, #756]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f413 7f80 	tst.w	r3, #256	; 0x100
 800093a:	d03e      	beq.n	80009ba <SendEnvironmentalData+0x8e>
    BytesToWrite = sprintf((char *)BufferToWrite,"Sending: ");
 800093c:	4abb      	ldr	r2, [pc, #748]	; (8000c2c <SendEnvironmentalData+0x300>)
 800093e:	4bbc      	ldr	r3, [pc, #752]	; (8000c30 <SendEnvironmentalData+0x304>)
 8000940:	cb03      	ldmia	r3!, {r0, r1}
 8000942:	6010      	str	r0, [r2, #0]
 8000944:	6051      	str	r1, [r2, #4]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	8113      	strh	r3, [r2, #8]
 800094a:	2109      	movs	r1, #9
 800094c:	4bb9      	ldr	r3, [pc, #740]	; (8000c34 <SendEnvironmentalData+0x308>)
 800094e:	6019      	str	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000950:	4610      	mov	r0, r2
 8000952:	f000 fcd1 	bl	80012f8 <Term_Update>
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV)) 
 8000956:	4bb4      	ldr	r3, [pc, #720]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f013 0f01 	tst.w	r3, #1
 800095e:	d018      	beq.n	8000992 <SendEnvironmentalData+0x66>
    if(TargetBoardFeatures.HandlePressSensor) 
 8000960:	4bb5      	ldr	r3, [pc, #724]	; (8000c38 <SendEnvironmentalData+0x30c>)
 8000962:	695e      	ldr	r6, [r3, #20]
 8000964:	2e00      	cmp	r6, #0
 8000966:	d132      	bne.n	80009ce <SendEnvironmentalData+0xa2>
    if(TargetBoardFeatures.HandleHumSensor)
 8000968:	4bb3      	ldr	r3, [pc, #716]	; (8000c38 <SendEnvironmentalData+0x30c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d164      	bne.n	8000a3a <SendEnvironmentalData+0x10e>
    uint16_t HumToSend=0;
 8000970:	2400      	movs	r4, #0
    if(TargetBoardFeatures.NumTempSensors==2) 
 8000972:	4bb1      	ldr	r3, [pc, #708]	; (8000c38 <SendEnvironmentalData+0x30c>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b02      	cmp	r3, #2
 8000978:	f000 8099 	beq.w	8000aae <SendEnvironmentalData+0x182>
    else if(TargetBoardFeatures.NumTempSensors==1)
 800097c:	2b01      	cmp	r3, #1
 800097e:	f000 8106 	beq.w	8000b8e <SendEnvironmentalData+0x262>
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000982:	2500      	movs	r5, #0
 8000984:	462f      	mov	r7, r5
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 8000986:	462b      	mov	r3, r5
 8000988:	463a      	mov	r2, r7
 800098a:	4621      	mov	r1, r4
 800098c:	4630      	mov	r0, r6
 800098e:	f000 fe4d 	bl	800162c <Environmental_Update>
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000992:	4ba5      	ldr	r3, [pc, #660]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f413 7f80 	tst.w	r3, #256	; 0x100
 800099a:	f040 8139 	bne.w	8000c10 <SendEnvironmentalData+0x2e4>
    STLBLE_PRINTF("\r\n");
 800099e:	4ba7      	ldr	r3, [pc, #668]	; (8000c3c <SendEnvironmentalData+0x310>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80009a6:	0c1b      	lsrs	r3, r3, #16
 80009a8:	f88d 300a 	strb.w	r3, [sp, #10]
 80009ac:	2102      	movs	r1, #2
 80009ae:	a802      	add	r0, sp, #8
 80009b0:	f001 fa74 	bl	8001e9c <CDC_Fill_Buffer>
}
 80009b4:	b042      	add	sp, #264	; 0x108
 80009b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STLBLE_PRINTF("Sending: ");
 80009ba:	4a9d      	ldr	r2, [pc, #628]	; (8000c30 <SendEnvironmentalData+0x304>)
 80009bc:	ab02      	add	r3, sp, #8
 80009be:	ca07      	ldmia	r2, {r0, r1, r2}
 80009c0:	c303      	stmia	r3!, {r0, r1}
 80009c2:	801a      	strh	r2, [r3, #0]
 80009c4:	2109      	movs	r1, #9
 80009c6:	a802      	add	r0, sp, #8
 80009c8:	f001 fa68 	bl	8001e9c <CDC_Fill_Buffer>
 80009cc:	e7c3      	b.n	8000956 <SendEnvironmentalData+0x2a>
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 80009ce:	aa01      	add	r2, sp, #4
 80009d0:	2102      	movs	r1, #2
 80009d2:	2001      	movs	r0, #1
 80009d4:	f003 f806 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80009d8:	eddd 7a01 	vldr	s15, [sp, #4]
 80009dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80009e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80009e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80009e8:	eddf 6a95 	vldr	s13, [pc, #596]	; 8000c40 <SendEnvironmentalData+0x314>
 80009ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      PressToSend=intPart*100+decPart;
 80009f4:	2664      	movs	r6, #100	; 0x64
 80009f6:	ee17 3a10 	vmov	r3, s14
 80009fa:	ee17 2a90 	vmov	r2, s15
 80009fe:	fb06 2603 	mla	r6, r6, r3, r2
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000a02:	4b89      	ldr	r3, [pc, #548]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a0a:	d00c      	beq.n	8000a26 <SendEnvironmentalData+0xfa>
        BytesToWrite = sprintf((char *)BufferToWrite,"Press=%ld ",PressToSend);
 8000a0c:	4c87      	ldr	r4, [pc, #540]	; (8000c2c <SendEnvironmentalData+0x300>)
 8000a0e:	4632      	mov	r2, r6
 8000a10:	498c      	ldr	r1, [pc, #560]	; (8000c44 <SendEnvironmentalData+0x318>)
 8000a12:	4620      	mov	r0, r4
 8000a14:	f008 fc34 	bl	8009280 <siprintf>
 8000a18:	4b86      	ldr	r3, [pc, #536]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000a1a:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000a1c:	b2c1      	uxtb	r1, r0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f000 fc6a 	bl	80012f8 <Term_Update>
 8000a24:	e7a0      	b.n	8000968 <SendEnvironmentalData+0x3c>
        STLBLE_PRINTF("Press=%ld ",PressToSend);
 8000a26:	4632      	mov	r2, r6
 8000a28:	4986      	ldr	r1, [pc, #536]	; (8000c44 <SendEnvironmentalData+0x318>)
 8000a2a:	a802      	add	r0, sp, #8
 8000a2c:	f008 fc28 	bl	8009280 <siprintf>
 8000a30:	4601      	mov	r1, r0
 8000a32:	a802      	add	r0, sp, #8
 8000a34:	f001 fa32 	bl	8001e9c <CDC_Fill_Buffer>
 8000a38:	e796      	b.n	8000968 <SendEnvironmentalData+0x3c>
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8000a3a:	aa01      	add	r2, sp, #4
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f002 ffd0 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000a44:	eddd 7a01 	vldr	s15, [sp, #4]
 8000a48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000a4c:	ee17 3a10 	vmov	r3, s14
 8000a50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a64:	ee17 4a90 	vmov	r4, s15
      HumToSend = intPart*10+decPart;
 8000a68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a6c:	005a      	lsls	r2, r3, #1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fa12 f484 	uxtah	r4, r2, r4
 8000a74:	b2a4      	uxth	r4, r4
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000a76:	4b6c      	ldr	r3, [pc, #432]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a7e:	d00c      	beq.n	8000a9a <SendEnvironmentalData+0x16e>
        BytesToWrite = sprintf((char *)BufferToWrite,"Hum=%d ",HumToSend);
 8000a80:	4d6a      	ldr	r5, [pc, #424]	; (8000c2c <SendEnvironmentalData+0x300>)
 8000a82:	4622      	mov	r2, r4
 8000a84:	4970      	ldr	r1, [pc, #448]	; (8000c48 <SendEnvironmentalData+0x31c>)
 8000a86:	4628      	mov	r0, r5
 8000a88:	f008 fbfa 	bl	8009280 <siprintf>
 8000a8c:	4b69      	ldr	r3, [pc, #420]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000a8e:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000a90:	b2c1      	uxtb	r1, r0
 8000a92:	4628      	mov	r0, r5
 8000a94:	f000 fc30 	bl	80012f8 <Term_Update>
 8000a98:	e76b      	b.n	8000972 <SendEnvironmentalData+0x46>
        STLBLE_PRINTF("Hum=%d ",HumToSend);
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	496a      	ldr	r1, [pc, #424]	; (8000c48 <SendEnvironmentalData+0x31c>)
 8000a9e:	a802      	add	r0, sp, #8
 8000aa0:	f008 fbee 	bl	8009280 <siprintf>
 8000aa4:	4601      	mov	r1, r0
 8000aa6:	a802      	add	r0, sp, #8
 8000aa8:	f001 f9f8 	bl	8001e9c <CDC_Fill_Buffer>
 8000aac:	e761      	b.n	8000972 <SendEnvironmentalData+0x46>
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000aae:	aa01      	add	r2, sp, #4
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f002 ff96 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000ab8:	eddd 7a01 	vldr	s15, [sp, #4]
 8000abc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000ac0:	ee17 3a10 	vmov	r3, s14
 8000ac4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000acc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      Temp1ToSend = intPart*10+decPart;
 8000ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000adc:	005d      	lsls	r5, r3, #1
 8000ade:	ee17 3a90 	vmov	r3, s15
 8000ae2:	441d      	add	r5, r3
 8000ae4:	b22d      	sxth	r5, r5
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aee:	d03a      	beq.n	8000b66 <SendEnvironmentalData+0x23a>
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp=%d ",Temp1ToSend);
 8000af0:	4f4e      	ldr	r7, [pc, #312]	; (8000c2c <SendEnvironmentalData+0x300>)
 8000af2:	462a      	mov	r2, r5
 8000af4:	4955      	ldr	r1, [pc, #340]	; (8000c4c <SendEnvironmentalData+0x320>)
 8000af6:	4638      	mov	r0, r7
 8000af8:	f008 fbc2 	bl	8009280 <siprintf>
 8000afc:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000afe:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000b00:	b2c1      	uxtb	r1, r0
 8000b02:	4638      	mov	r0, r7
 8000b04:	f000 fbf8 	bl	80012f8 <Term_Update>
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000b08:	aa01      	add	r2, sp, #4
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	f002 ff69 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000b12:	eddd 7a01 	vldr	s15, [sp, #4]
 8000b16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000b1a:	ee17 3a10 	vmov	r3, s14
 8000b1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      Temp2ToSend = intPart*10+decPart;
 8000b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b36:	005f      	lsls	r7, r3, #1
 8000b38:	ee17 3a90 	vmov	r3, s15
 8000b3c:	441f      	add	r7, r3
 8000b3e:	b23f      	sxth	r7, r7
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000b40:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b48:	d017      	beq.n	8000b7a <SendEnvironmentalData+0x24e>
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp2=%d ",Temp2ToSend);
 8000b4a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000c2c <SendEnvironmentalData+0x300>
 8000b4e:	463a      	mov	r2, r7
 8000b50:	493f      	ldr	r1, [pc, #252]	; (8000c50 <SendEnvironmentalData+0x324>)
 8000b52:	4640      	mov	r0, r8
 8000b54:	f008 fb94 	bl	8009280 <siprintf>
 8000b58:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000b5a:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000b5c:	b2c1      	uxtb	r1, r0
 8000b5e:	4640      	mov	r0, r8
 8000b60:	f000 fbca 	bl	80012f8 <Term_Update>
 8000b64:	e70f      	b.n	8000986 <SendEnvironmentalData+0x5a>
        STLBLE_PRINTF("Temp=%d ",Temp1ToSend);
 8000b66:	462a      	mov	r2, r5
 8000b68:	4938      	ldr	r1, [pc, #224]	; (8000c4c <SendEnvironmentalData+0x320>)
 8000b6a:	a802      	add	r0, sp, #8
 8000b6c:	f008 fb88 	bl	8009280 <siprintf>
 8000b70:	4601      	mov	r1, r0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f001 f992 	bl	8001e9c <CDC_Fill_Buffer>
 8000b78:	e7c6      	b.n	8000b08 <SendEnvironmentalData+0x1dc>
        STLBLE_PRINTF("Temp2=%d ",Temp2ToSend);
 8000b7a:	463a      	mov	r2, r7
 8000b7c:	4934      	ldr	r1, [pc, #208]	; (8000c50 <SendEnvironmentalData+0x324>)
 8000b7e:	a802      	add	r0, sp, #8
 8000b80:	f008 fb7e 	bl	8009280 <siprintf>
 8000b84:	4601      	mov	r1, r0
 8000b86:	a802      	add	r0, sp, #8
 8000b88:	f001 f988 	bl	8001e9c <CDC_Fill_Buffer>
 8000b8c:	e6fb      	b.n	8000986 <SendEnvironmentalData+0x5a>
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 8000b8e:	aa01      	add	r2, sp, #4
 8000b90:	2101      	movs	r1, #1
 8000b92:	2000      	movs	r0, #0
 8000b94:	f002 ff26 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
 8000b98:	bb48      	cbnz	r0, 8000bee <SendEnvironmentalData+0x2c2>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000b9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8000b9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000ba2:	ee17 3a10 	vmov	r3, s14
 8000ba6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      Temp1ToSend = intPart*10+decPart;
 8000bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bbe:	005d      	lsls	r5, r3, #1
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	441d      	add	r5, r3
 8000bc6:	b22d      	sxth	r5, r5
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <SendEnvironmentalData+0x2fc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000bd0:	d013      	beq.n	8000bfa <SendEnvironmentalData+0x2ce>
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp1=%d ",Temp1ToSend);
 8000bd2:	4f16      	ldr	r7, [pc, #88]	; (8000c2c <SendEnvironmentalData+0x300>)
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	491f      	ldr	r1, [pc, #124]	; (8000c54 <SendEnvironmentalData+0x328>)
 8000bd8:	4638      	mov	r0, r7
 8000bda:	f008 fb51 	bl	8009280 <siprintf>
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000be0:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000be2:	b2c1      	uxtb	r1, r0
 8000be4:	4638      	mov	r0, r7
 8000be6:	f000 fb87 	bl	80012f8 <Term_Update>
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000bea:	2700      	movs	r7, #0
 8000bec:	e6cb      	b.n	8000986 <SendEnvironmentalData+0x5a>
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000bee:	aa01      	add	r2, sp, #4
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	f002 fef6 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
 8000bf8:	e7cf      	b.n	8000b9a <SendEnvironmentalData+0x26e>
        STLBLE_PRINTF("Temp1=%d ",Temp1ToSend);
 8000bfa:	462a      	mov	r2, r5
 8000bfc:	4915      	ldr	r1, [pc, #84]	; (8000c54 <SendEnvironmentalData+0x328>)
 8000bfe:	a802      	add	r0, sp, #8
 8000c00:	f008 fb3e 	bl	8009280 <siprintf>
 8000c04:	4601      	mov	r1, r0
 8000c06:	a802      	add	r0, sp, #8
 8000c08:	f001 f948 	bl	8001e9c <CDC_Fill_Buffer>
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e6ba      	b.n	8000986 <SendEnvironmentalData+0x5a>
    BytesToWrite = sprintf((char *)BufferToWrite,"\r\n");
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <SendEnvironmentalData+0x300>)
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <SendEnvironmentalData+0x310>)
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	8002      	strh	r2, [r0, #0]
 8000c1a:	7083      	strb	r3, [r0, #2]
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SendEnvironmentalData+0x308>)
 8000c20:	6019      	str	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000c22:	f000 fb69 	bl	80012f8 <Term_Update>
 8000c26:	e6c5      	b.n	80009b4 <SendEnvironmentalData+0x88>
 8000c28:	20000210 	.word	0x20000210
 8000c2c:	20000938 	.word	0x20000938
 8000c30:	08009b80 	.word	0x08009b80
 8000c34:	20000a38 	.word	0x20000a38
 8000c38:	200005d4 	.word	0x200005d4
 8000c3c:	08009b24 	.word	0x08009b24
 8000c40:	42c80000 	.word	0x42c80000
 8000c44:	08009b8c 	.word	0x08009b8c
 8000c48:	08009b98 	.word	0x08009b98
 8000c4c:	08009ba0 	.word	0x08009ba0
 8000c50:	08009bac 	.word	0x08009bac
 8000c54:	08009bb8 	.word	0x08009bb8

08000c58 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8000c58:	b508      	push	{r3, lr}
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c5a:	7f03      	ldrb	r3, [r0, #28]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d000      	beq.n	8000c62 <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8000c60:	bd08      	pop	{r3, pc}
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c62:	2100      	movs	r1, #0
 8000c64:	f006 f9dc 	bl	8007020 <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8000c70:	3008      	adds	r0, #8
 8000c72:	6358      	str	r0, [r3, #52]	; 0x34
    SendEnv=1;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	605a      	str	r2, [r3, #4]
}
 8000c7a:	e7f1      	b.n	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8000c7c:	200008ec 	.word	0x200008ec
 8000c80:	20000210 	.word	0x20000210

08000c84 <HAL_TIM_PeriodElapsedCallback>:
{
 8000c84:	b508      	push	{r3, lr}
  if(htim == (&TimHandle)) 
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	d000      	beq.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000c8c:	bd08      	pop	{r3, pc}
    CDC_TIM_PeriodElapsedCallback(htim);
 8000c8e:	f001 f91f 	bl	8001ed0 <CDC_TIM_PeriodElapsedCallback>
}
 8000c92:	e7fb      	b.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c94:	20002240 	.word	0x20002240

08000c98 <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000c9e:	f002 ff37 	bl	8003b10 <HAL_GetTick>
 8000ca2:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ca4:	e000      	b.n	8000ca8 <HAL_Delay+0x10>
  {
    __WFI();
 8000ca6:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay)
 8000ca8:	f002 ff32 	bl	8003b10 <HAL_GetTick>
 8000cac:	1b00      	subs	r0, r0, r4
 8000cae:	9b01      	ldr	r3, [sp, #4]
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d3f8      	bcc.n	8000ca6 <HAL_Delay+0xe>
  }
}
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd10      	pop	{r4, pc}

08000cb8 <Init_BlueNRG_Stack>:
{
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	b0d1      	sub	sp, #324	; 0x144
  const char BoardName[8] = {NAME_STLBLE,0};
 8000cbc:	4b66      	ldr	r3, [pc, #408]	; (8000e58 <Init_BlueNRG_Stack+0x1a0>)
 8000cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cc2:	ab50      	add	r3, sp, #320	; 0x140
 8000cc4:	e903 0003 	stmdb	r3, {r0, r1}
  hci_init(HCI_Event_CB, NULL);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4864      	ldr	r0, [pc, #400]	; (8000e5c <Init_BlueNRG_Stack+0x1a4>)
 8000ccc:	f008 f840 	bl	8008d50 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000cd0:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 8000cd4:	f20d 1031 	addw	r0, sp, #305	; 0x131
 8000cd8:	f007 ff13 	bl	8008b02 <getBlueNRGVersion>
  hci_reset();
 8000cdc:	f007 ff38 	bl	8008b50 <hci_reset>
  HAL_Delay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f7ff ffd9 	bl	8000c98 <HAL_Delay>
    bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
 8000ce6:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <Init_BlueNRG_Stack+0x1a8>)
 8000ce8:	78da      	ldrb	r2, [r3, #3]
 8000cea:	4b5e      	ldr	r3, [pc, #376]	; (8000e64 <Init_BlueNRG_Stack+0x1ac>)
 8000cec:	701a      	strb	r2, [r3, #0]
    bdaddr[1] = (STM32_UUID[0]    )&0xFF;
 8000cee:	495e      	ldr	r1, [pc, #376]	; (8000e68 <Init_BlueNRG_Stack+0x1b0>)
 8000cf0:	680a      	ldr	r2, [r1, #0]
 8000cf2:	705a      	strb	r2, [r3, #1]
    bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
 8000cf4:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <Init_BlueNRG_Stack+0x1b4>)
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	0a12      	lsrs	r2, r2, #8
 8000cfa:	709a      	strb	r2, [r3, #2]
    bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;
 8000cfc:	884a      	ldrh	r2, [r1, #2]
 8000cfe:	70da      	strb	r2, [r3, #3]
    bdaddr[4] = (((STLBLE_VERSION_MAJOR-48)*10) + (STLBLE_VERSION_MINOR-48)+100)&0xFF;
 8000d00:	227c      	movs	r2, #124	; 0x7c
 8000d02:	711a      	strb	r2, [r3, #4]
    bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
 8000d04:	22c0      	movs	r2, #192	; 0xc0
 8000d06:	715a      	strb	r2, [r3, #5]
  ret = aci_gatt_init();    
 8000d08:	f007 fdc6 	bl	8008898 <aci_gatt_init>
  if(ret)
 8000d0c:	bb00      	cbnz	r0, 8000d50 <Init_BlueNRG_Stack+0x98>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000d0e:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	ab4d      	add	r3, sp, #308	; 0x134
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2001      	movs	r0, #1
 8000d22:	f007 fcc2 	bl	80086aa <aci_gap_init_IDB05A1>
  if(ret != BLE_STATUS_SUCCESS)
 8000d26:	bb10      	cbnz	r0, 8000d6e <Init_BlueNRG_Stack+0xb6>
  ret = hci_le_set_random_address(bdaddr);
 8000d28:	484e      	ldr	r0, [pc, #312]	; (8000e64 <Init_BlueNRG_Stack+0x1ac>)
 8000d2a:	f007 ff91 	bl	8008c50 <hci_le_set_random_address>
  if(ret)
 8000d2e:	b348      	cbz	r0, 8000d84 <Init_BlueNRG_Stack+0xcc>
    STLBLE_PRINTF("\r\nSetting the Static Random BD_ADDR failed\r\n");
 8000d30:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d32:	4d4f      	ldr	r5, [pc, #316]	; (8000e70 <Init_BlueNRG_Stack+0x1b8>)
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d40:	c407      	stmia	r4!, {r0, r1, r2}
 8000d42:	7023      	strb	r3, [r4, #0]
 8000d44:	212c      	movs	r1, #44	; 0x2c
 8000d46:	eb0d 0001 	add.w	r0, sp, r1
 8000d4a:	f001 f8a7 	bl	8001e9c <CDC_Fill_Buffer>
    goto fail;
 8000d4e:	e00c      	b.n	8000d6a <Init_BlueNRG_Stack+0xb2>
    STLBLE_PRINTF("\r\nGATT_Init failed\r\n");
 8000d50:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d52:	4d48      	ldr	r5, [pc, #288]	; (8000e74 <Init_BlueNRG_Stack+0x1bc>)
 8000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d5c:	f844 0b04 	str.w	r0, [r4], #4
 8000d60:	7021      	strb	r1, [r4, #0]
 8000d62:	2114      	movs	r1, #20
 8000d64:	a80b      	add	r0, sp, #44	; 0x2c
 8000d66:	f001 f899 	bl	8001e9c <CDC_Fill_Buffer>
}
 8000d6a:	b051      	add	sp, #324	; 0x144
 8000d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STLBLE_PRINTF("\r\nGAP_Init failed\r\n");
 8000d6e:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d70:	4d41      	ldr	r5, [pc, #260]	; (8000e78 <Init_BlueNRG_Stack+0x1c0>)
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	682b      	ldr	r3, [r5, #0]
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	2113      	movs	r1, #19
 8000d7c:	a80b      	add	r0, sp, #44	; 0x2c
 8000d7e:	f001 f88d 	bl	8001e9c <CDC_Fill_Buffer>
    goto fail;
 8000d82:	e7f2      	b.n	8000d6a <Init_BlueNRG_Stack+0xb2>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000d84:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 8000d88:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 8000d8c:	ab4e      	add	r3, sp, #312	; 0x138
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2307      	movs	r3, #7
 8000d92:	2200      	movs	r2, #0
 8000d94:	f007 fe3c 	bl	8008a10 <aci_gatt_update_char_value>
  if(ret)
 8000d98:	b178      	cbz	r0, 8000dba <Init_BlueNRG_Stack+0x102>
    STLBLE_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8000d9a:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d9c:	4d37      	ldr	r5, [pc, #220]	; (8000e7c <Init_BlueNRG_Stack+0x1c4>)
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000daa:	f844 0b04 	str.w	r0, [r4], #4
 8000dae:	8021      	strh	r1, [r4, #0]
 8000db0:	2125      	movs	r1, #37	; 0x25
 8000db2:	a80b      	add	r0, sp, #44	; 0x2c
 8000db4:	f001 f872 	bl	8001e9c <CDC_Fill_Buffer>
 8000db8:	e7fe      	b.n	8000db8 <Init_BlueNRG_Stack+0x100>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000dba:	2001      	movs	r0, #1
 8000dbc:	9003      	str	r0, [sp, #12]
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <Init_BlueNRG_Stack+0x1c8>)
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	9101      	str	r1, [sp, #4]
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2307      	movs	r3, #7
 8000dcc:	460a      	mov	r2, r1
 8000dce:	f007 fcf9 	bl	80087c4 <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) 
 8000dd2:	b960      	cbnz	r0, 8000dee <Init_BlueNRG_Stack+0x136>
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 8000dd4:	f89d 3131 	ldrb.w	r3, [sp, #305]	; 0x131
 8000dd8:	f8bd 212e 	ldrh.w	r2, [sp, #302]	; 0x12e
 8000ddc:	0a10      	lsrs	r0, r2, #8
 8000dde:	f3c2 1403 	ubfx	r4, r2, #4, #4
 8000de2:	2b30      	cmp	r3, #48	; 0x30
 8000de4:	d913      	bls.n	8000e0e <Init_BlueNRG_Stack+0x156>
 8000de6:	f002 020f 	and.w	r2, r2, #15
 8000dea:	3260      	adds	r2, #96	; 0x60
 8000dec:	e010      	b.n	8000e10 <Init_BlueNRG_Stack+0x158>
    STLBLE_PRINTF("\r\nGAP setting Authentication failed\r\n");
 8000dee:	ac0b      	add	r4, sp, #44	; 0x2c
 8000df0:	4d24      	ldr	r5, [pc, #144]	; (8000e84 <Init_BlueNRG_Stack+0x1cc>)
 8000df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dfe:	f844 0b04 	str.w	r0, [r4], #4
 8000e02:	8021      	strh	r1, [r4, #0]
 8000e04:	2125      	movs	r1, #37	; 0x25
 8000e06:	a80b      	add	r0, sp, #44	; 0x2c
 8000e08:	f001 f848 	bl	8001e9c <CDC_Fill_Buffer>
    goto fail;
 8000e0c:	e7ad      	b.n	8000d6a <Init_BlueNRG_Stack+0xb2>
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 8000e0e:	2261      	movs	r2, #97	; 0x61
 8000e10:	4914      	ldr	r1, [pc, #80]	; (8000e64 <Init_BlueNRG_Stack+0x1ac>)
 8000e12:	794d      	ldrb	r5, [r1, #5]
 8000e14:	790e      	ldrb	r6, [r1, #4]
 8000e16:	78cf      	ldrb	r7, [r1, #3]
 8000e18:	f891 c002 	ldrb.w	ip, [r1, #2]
 8000e1c:	f891 e001 	ldrb.w	lr, [r1, #1]
 8000e20:	7809      	ldrb	r1, [r1, #0]
 8000e22:	9109      	str	r1, [sp, #36]	; 0x24
 8000e24:	f8cd e020 	str.w	lr, [sp, #32]
 8000e28:	f8cd c01c 	str.w	ip, [sp, #28]
 8000e2c:	9706      	str	r7, [sp, #24]
 8000e2e:	9605      	str	r6, [sp, #20]
 8000e30:	9504      	str	r5, [sp, #16]
 8000e32:	a94e      	add	r1, sp, #312	; 0x138
 8000e34:	9103      	str	r1, [sp, #12]
 8000e36:	9202      	str	r2, [sp, #8]
 8000e38:	9401      	str	r4, [sp, #4]
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <Init_BlueNRG_Stack+0x1d0>)
 8000e3e:	4913      	ldr	r1, [pc, #76]	; (8000e8c <Init_BlueNRG_Stack+0x1d4>)
 8000e40:	a80b      	add	r0, sp, #44	; 0x2c
 8000e42:	f008 fa1d 	bl	8009280 <siprintf>
 8000e46:	4601      	mov	r1, r0
 8000e48:	a80b      	add	r0, sp, #44	; 0x2c
 8000e4a:	f001 f827 	bl	8001e9c <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(1,4);
 8000e4e:	2104      	movs	r1, #4
 8000e50:	2001      	movs	r0, #1
 8000e52:	f007 fe33 	bl	8008abc <aci_hal_set_tx_power_level>
  return;
 8000e56:	e788      	b.n	8000d6a <Init_BlueNRG_Stack+0xb2>
 8000e58:	08009920 	.word	0x08009920
 8000e5c:	08001d8d 	.word	0x08001d8d
 8000e60:	1fff7594 	.word	0x1fff7594
 8000e64:	200008e4 	.word	0x200008e4
 8000e68:	1fff7590 	.word	0x1fff7590
 8000e6c:	1fff7598 	.word	0x1fff7598
 8000e70:	08009bf0 	.word	0x08009bf0
 8000e74:	08009bc4 	.word	0x08009bc4
 8000e78:	08009bdc 	.word	0x08009bdc
 8000e7c:	08009c20 	.word	0x08009c20
 8000e80:	0001e240 	.word	0x0001e240
 8000e84:	08009c48 	.word	0x08009c48
 8000e88:	08009c70 	.word	0x08009c70
 8000e8c:	08009c7c 	.word	0x08009c7c

08000e90 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler>
	...

08000e94 <InitTimers>:
{
 8000e94:	b500      	push	{lr}
 8000e96:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <InitTimers+0x54>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <InitTimers+0x58>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0b5b      	lsrs	r3, r3, #13
 8000ea4:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <InitTimers+0x5c>)
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <InitTimers+0x60>)
 8000eaa:	6002      	str	r2, [r0, #0]
  TimCCHandle.Init.Period        = 65535;
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	60c2      	str	r2, [r0, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8000eb2:	6043      	str	r3, [r0, #4]
  TimCCHandle.Init.ClockDivision = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	6103      	str	r3, [r0, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8000eb8:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8000eba:	f006 f9ff 	bl	80072bc <HAL_TIM_OC_Init>
 8000ebe:	b978      	cbnz	r0, 8000ee0 <InitTimers+0x4c>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8000ec0:	2330      	movs	r3, #48	; 0x30
 8000ec2:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = uhCCR1_Val;
 8000ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ecc:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	a901      	add	r1, sp, #4
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <InitTimers+0x5c>)
 8000ed4:	f006 fa68 	bl	80073a8 <HAL_TIM_OC_ConfigChannel>
 8000ed8:	b920      	cbnz	r0, 8000ee4 <InitTimers+0x50>
}
 8000eda:	b009      	add	sp, #36	; 0x24
 8000edc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ee0:	f7ff ffd6 	bl	8000e90 <Error_Handler>
    Error_Handler();
 8000ee4:	f7ff ffd4 	bl	8000e90 <Error_Handler>
 8000ee8:	20000080 	.word	0x20000080
 8000eec:	d1b71759 	.word	0xd1b71759
 8000ef0:	200008ec 	.word	0x200008ec
 8000ef4:	40012c00 	.word	0x40012c00

08000ef8 <main>:
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	b0c6      	sub	sp, #280	; 0x118
  HAL_Init();
 8000efc:	f002 fdec 	bl	8003ad8 <HAL_Init>
  SystemClock_Config();
 8000f00:	f7ff fc60 	bl	80007c4 <SystemClock_Config>
  InitTargetPlatform(TARGET_SENSORTILE);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fac1 	bl	800048c <InitTargetPlatform>
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8000f0a:	f002 fe07 	bl	8003b1c <HAL_GetHalVersion>
 8000f0e:	0e04      	lsrs	r4, r0, #24
 8000f10:	f002 fe04 	bl	8003b1c <HAL_GetHalVersion>
 8000f14:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8000f18:	f002 fe00 	bl	8003b1c <HAL_GetHalVersion>
 8000f1c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8000f20:	f002 fdfc 	bl	8003b1c <HAL_GetHalVersion>
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f2a:	9304      	str	r3, [sp, #16]
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <main+0x12c>)
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <main+0x130>)
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	9001      	str	r0, [sp, #4]
 8000f36:	9600      	str	r6, [sp, #0]
 8000f38:	462b      	mov	r3, r5
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	493b      	ldr	r1, [pc, #236]	; (800102c <main+0x134>)
 8000f3e:	a806      	add	r0, sp, #24
 8000f40:	f008 f99e 	bl	8009280 <siprintf>
 8000f44:	4601      	mov	r1, r0
 8000f46:	a806      	add	r0, sp, #24
 8000f48:	f000 ffa8 	bl	8001e9c <CDC_Fill_Buffer>
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 8000f4c:	ac06      	add	r4, sp, #24
 8000f4e:	4d38      	ldr	r5, [pc, #224]	; (8001030 <main+0x138>)
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	f824 3b02 	strh.w	r3, [r4], #2
 8000f5e:	0c1b      	lsrs	r3, r3, #16
 8000f60:	7023      	strb	r3, [r4, #0]
 8000f62:	2122      	movs	r1, #34	; 0x22
 8000f64:	a806      	add	r0, sp, #24
 8000f66:	f000 ff99 	bl	8001e9c <CDC_Fill_Buffer>
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000f6a:	ac06      	add	r4, sp, #24
 8000f6c:	4d31      	ldr	r5, [pc, #196]	; (8001034 <main+0x13c>)
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	682b      	ldr	r3, [r5, #0]
 8000f78:	f824 3b02 	strh.w	r3, [r4], #2
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	7023      	strb	r3, [r4, #0]
 8000f80:	2122      	movs	r1, #34	; 0x22
 8000f82:	a806      	add	r0, sp, #24
 8000f84:	f000 ff8a 	bl	8001e9c <CDC_Fill_Buffer>
  Init_BlueNRG_Stack();
 8000f88:	f7ff fe96 	bl	8000cb8 <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();  
 8000f8c:	f7ff fc7a 	bl	8000884 <Init_BlueNRG_Custom_Services>
  InitTimers();
 8000f90:	f7ff ff80 	bl	8000e94 <InitTimers>
  StartTime = HAL_GetTick();
 8000f94:	f002 fdbc 	bl	8003b10 <HAL_GetTick>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	e00e      	b.n	8000fba <main+0xc2>
        if(HAL_GetTick()-StartTime > 50)
 8000f9c:	f002 fdb8 	bl	8003b10 <HAL_GetTick>
 8000fa0:	1b00      	subs	r0, r0, r4
 8000fa2:	2832      	cmp	r0, #50	; 0x32
 8000fa4:	d822      	bhi.n	8000fec <main+0xf4>
    if(HCI_ProcessEvent) 
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <main+0x140>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	bb4b      	cbnz	r3, 8001000 <main+0x108>
    if(set_connectable)
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <main+0x144>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	bb63      	cbnz	r3, 800100c <main+0x114>
    if(SendEnv) 
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <main+0x148>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	bb7b      	cbnz	r3, 8001018 <main+0x120>
    __WFI();
 8000fb8:	bf30      	wfi
    if(!connected) 
 8000fba:	4b22      	ldr	r3, [pc, #136]	; (8001044 <main+0x14c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f1      	bne.n	8000fa6 <main+0xae>
      if(!TargetBoardFeatures.LedStatus) 
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <main+0x150>)
 8000fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e7      	bne.n	8000f9c <main+0xa4>
        if(HAL_GetTick()-StartTime > 1000)
 8000fcc:	f002 fda0 	bl	8003b10 <HAL_GetTick>
 8000fd0:	1b00      	subs	r0, r0, r4
 8000fd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fd6:	d9e6      	bls.n	8000fa6 <main+0xae>
          LedOnTargetPlatform();
 8000fd8:	f7ff fa82 	bl	80004e0 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <main+0x150>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000fe4:	f002 fd94 	bl	8003b10 <HAL_GetTick>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	e7dc      	b.n	8000fa6 <main+0xae>
          LedOffTargetPlatform();
 8000fec:	f7ff fa7d 	bl	80004ea <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <main+0x150>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000ff8:	f002 fd8a 	bl	8003b10 <HAL_GetTick>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	e7d2      	b.n	8000fa6 <main+0xae>
      HCI_ProcessEvent=0;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <main+0x140>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
      hci_user_evt_proc();
 8001006:	f007 ff83 	bl	8008f10 <hci_user_evt_proc>
 800100a:	e7cf      	b.n	8000fac <main+0xb4>
      setConnectable();
 800100c:	f000 fc5c 	bl	80018c8 <setConnectable>
      set_connectable = FALSE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <main+0x144>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e7cc      	b.n	8000fb2 <main+0xba>
      SendEnv=0;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <main+0x148>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
      SendEnvironmentalData();
 800101e:	f7ff fc85 	bl	800092c <SendEnvironmentalData>
 8001022:	e7c9      	b.n	8000fb8 <main+0xc0>
 8001024:	08009d64 	.word	0x08009d64
 8001028:	08009d70 	.word	0x08009d70
 800102c:	08009cfc 	.word	0x08009cfc
 8001030:	08009d7c 	.word	0x08009d7c
 8001034:	08009da0 	.word	0x08009da0
 8001038:	200008e0 	.word	0x200008e0
 800103c:	20000000 	.word	0x20000000
 8001040:	20000210 	.word	0x20000210
 8001044:	20000230 	.word	0x20000230
 8001048:	200005d4 	.word	0x200005d4

0800104c <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 800104c:	b500      	push	{lr}
 800104e:	b083      	sub	sp, #12
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <Stderr_Update_AfterRead+0x28>)
 8001052:	f812 3b04 	ldrb.w	r3, [r2], #4
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	4611      	mov	r1, r2
 800105c:	4610      	mov	r0, r2
 800105e:	f007 fcd7 	bl	8008a10 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS) 
 8001062:	4603      	mov	r3, r0
 8001064:	b918      	cbnz	r0, 800106e <Stderr_Update_AfterRead+0x22>
  {
    return BLE_STATUS_ERROR;
  }
  
  return BLE_STATUS_SUCCESS;
}
 8001066:	4618      	mov	r0, r3
 8001068:	b003      	add	sp, #12
 800106a:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_ERROR;
 800106e:	2347      	movs	r3, #71	; 0x47
 8001070:	e7f9      	b.n	8001066 <Stderr_Update_AfterRead+0x1a>
 8001072:	bf00      	nop
 8001074:	20000218 	.word	0x20000218

08001078 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	b0c0      	sub	sp, #256	; 0x100
  connected = FALSE;
 800107c:	2600      	movs	r6, #0
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <GAP_DisconnectionComplete_CB+0x44>)
 8001080:	619e      	str	r6, [r3, #24]

#ifdef ENABLE_USB_DEBUG_CONNECTION  
  STLBLE_PRINTF("<<<<<<DISCONNECTED\r\n");
 8001082:	466c      	mov	r4, sp
 8001084:	4d0e      	ldr	r5, [pc, #56]	; (80010c0 <GAP_DisconnectionComplete_CB+0x48>)
 8001086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108e:	f844 0b04 	str.w	r0, [r4], #4
 8001092:	7021      	strb	r1, [r4, #0]
 8001094:	2114      	movs	r1, #20
 8001096:	4668      	mov	r0, sp
 8001098:	f000 ff00 	bl	8001e9c <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <GAP_DisconnectionComplete_CB+0x4c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <GAP_DisconnectionComplete_CB+0x50>)
 80010a4:	601e      	str	r6, [r3, #0]

  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 80010a6:	4631      	mov	r1, r6
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <GAP_DisconnectionComplete_CB+0x54>)
 80010aa:	f006 fa9b 	bl	80075e4 <HAL_TIM_OC_Stop_IT>
 80010ae:	b908      	cbnz	r0, 80010b4 <GAP_DisconnectionComplete_CB+0x3c>
    /* Stopping Error */
    Error_Handler();
  }
}
 80010b0:	b040      	add	sp, #256	; 0x100
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80010b4:	f7ff feec 	bl	8000e90 <Error_Handler>
}
 80010b8:	e7fa      	b.n	80010b0 <GAP_DisconnectionComplete_CB+0x38>
 80010ba:	bf00      	nop
 80010bc:	20000218 	.word	0x20000218
 80010c0:	08009dc4 	.word	0x08009dc4
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000210 	.word	0x20000210
 80010cc:	200008ec 	.word	0x200008ec

080010d0 <GAP_ConnectionComplete_CB>:
{  
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b0c5      	sub	sp, #276	; 0x114
  connected = TRUE;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <GAP_ConnectionComplete_CB+0x3c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	619a      	str	r2, [r3, #24]
  connection_handle = handle;
 80010da:	8399      	strh	r1, [r3, #28]
  STLBLE_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 80010dc:	7942      	ldrb	r2, [r0, #5]
 80010de:	7903      	ldrb	r3, [r0, #4]
 80010e0:	78c1      	ldrb	r1, [r0, #3]
 80010e2:	7884      	ldrb	r4, [r0, #2]
 80010e4:	7845      	ldrb	r5, [r0, #1]
 80010e6:	7800      	ldrb	r0, [r0, #0]
 80010e8:	9003      	str	r0, [sp, #12]
 80010ea:	9502      	str	r5, [sp, #8]
 80010ec:	9401      	str	r4, [sp, #4]
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <GAP_ConnectionComplete_CB+0x40>)
 80010f2:	a804      	add	r0, sp, #16
 80010f4:	f008 f8c4 	bl	8009280 <siprintf>
 80010f8:	4601      	mov	r1, r0
 80010fa:	a804      	add	r0, sp, #16
 80010fc:	f000 fece 	bl	8001e9c <CDC_Fill_Buffer>
  ConnectionBleStatus=0;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <GAP_ConnectionComplete_CB+0x44>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	b045      	add	sp, #276	; 0x114
 8001108:	bd30      	pop	{r4, r5, pc}
 800110a:	bf00      	nop
 800110c:	20000218 	.word	0x20000218
 8001110:	08009ddc 	.word	0x08009ddc
 8001114:	20000210 	.word	0x20000210

08001118 <Add_ConfigW2ST_Service>:
{
 8001118:	b500      	push	{lr}
 800111a:	b08b      	sub	sp, #44	; 0x2c
  COPY_CONFIG_SERVICE_UUID(uuid);
 800111c:	231b      	movs	r3, #27
 800111e:	f88d 3018 	strb.w	r3, [sp, #24]
 8001122:	23c5      	movs	r3, #197	; 0xc5
 8001124:	f88d 3019 	strb.w	r3, [sp, #25]
 8001128:	23d5      	movs	r3, #213	; 0xd5
 800112a:	f88d 301a 	strb.w	r3, [sp, #26]
 800112e:	23a5      	movs	r3, #165	; 0xa5
 8001130:	f88d 301b 	strb.w	r3, [sp, #27]
 8001134:	2002      	movs	r0, #2
 8001136:	f88d 001c 	strb.w	r0, [sp, #28]
 800113a:	2300      	movs	r3, #0
 800113c:	f88d 301d 	strb.w	r3, [sp, #29]
 8001140:	22b4      	movs	r2, #180	; 0xb4
 8001142:	f88d 201e 	strb.w	r2, [sp, #30]
 8001146:	229a      	movs	r2, #154	; 0x9a
 8001148:	f88d 201f 	strb.w	r2, [sp, #31]
 800114c:	22e1      	movs	r2, #225	; 0xe1
 800114e:	f88d 2020 	strb.w	r2, [sp, #32]
 8001152:	2211      	movs	r2, #17
 8001154:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8001158:	220f      	movs	r2, #15
 800115a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 800115e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8001162:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001166:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800116a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800116e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <Add_ConfigW2ST_Service+0xf4>)
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2304      	movs	r3, #4
 8001178:	2201      	movs	r2, #1
 800117a:	a906      	add	r1, sp, #24
 800117c:	f007 fbaa 	bl	80088d4 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS)
 8001180:	2800      	cmp	r0, #0
 8001182:	d13e      	bne.n	8001202 <Add_ConfigW2ST_Service+0xea>
  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8001184:	231b      	movs	r3, #27
 8001186:	f88d 3018 	strb.w	r3, [sp, #24]
 800118a:	23c5      	movs	r3, #197	; 0xc5
 800118c:	f88d 3019 	strb.w	r3, [sp, #25]
 8001190:	23d5      	movs	r3, #213	; 0xd5
 8001192:	f88d 301a 	strb.w	r3, [sp, #26]
 8001196:	23a5      	movs	r3, #165	; 0xa5
 8001198:	f88d 301b 	strb.w	r3, [sp, #27]
 800119c:	2102      	movs	r1, #2
 800119e:	f88d 101c 	strb.w	r1, [sp, #28]
 80011a2:	2300      	movs	r3, #0
 80011a4:	f88d 301d 	strb.w	r3, [sp, #29]
 80011a8:	2236      	movs	r2, #54	; 0x36
 80011aa:	f88d 201e 	strb.w	r2, [sp, #30]
 80011ae:	22ac      	movs	r2, #172	; 0xac
 80011b0:	f88d 201f 	strb.w	r2, [sp, #31]
 80011b4:	22e1      	movs	r2, #225	; 0xe1
 80011b6:	f88d 2020 	strb.w	r2, [sp, #32]
 80011ba:	2211      	movs	r2, #17
 80011bc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80011c0:	220f      	movs	r2, #15
 80011c2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80011c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80011ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80011ce:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80011d2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80011d6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <Add_ConfigW2ST_Service+0xf8>)
 80011dc:	8c90      	ldrh	r0, [r2, #36]	; 0x24
 80011de:	3226      	adds	r2, #38	; 0x26
 80011e0:	9205      	str	r2, [sp, #20]
 80011e2:	2201      	movs	r2, #1
 80011e4:	9204      	str	r2, [sp, #16]
 80011e6:	2210      	movs	r2, #16
 80011e8:	9203      	str	r2, [sp, #12]
 80011ea:	2205      	movs	r2, #5
 80011ec:	9202      	str	r2, [sp, #8]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2314      	movs	r3, #20
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	aa06      	add	r2, sp, #24
 80011f6:	f007 fbab 	bl	8008950 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 80011fa:	4603      	mov	r3, r0
 80011fc:	b110      	cbz	r0, 8001204 <Add_ConfigW2ST_Service+0xec>
  return BLE_STATUS_ERROR;
 80011fe:	2347      	movs	r3, #71	; 0x47
 8001200:	e000      	b.n	8001204 <Add_ConfigW2ST_Service+0xec>
 8001202:	2347      	movs	r3, #71	; 0x47
}
 8001204:	4618      	mov	r0, r3
 8001206:	b00b      	add	sp, #44	; 0x2c
 8001208:	f85d fb04 	ldr.w	pc, [sp], #4
 800120c:	2000023c 	.word	0x2000023c
 8001210:	20000218 	.word	0x20000218

08001214 <Stderr_Update>:
{
 8001214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001218:	b083      	sub	sp, #12
 800121a:	4680      	mov	r8, r0
 800121c:	460f      	mov	r7, r1
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800121e:	2500      	movs	r5, #0
 8001220:	42bd      	cmp	r5, r7
 8001222:	d21e      	bcs.n	8001262 <Stderr_Update+0x4e>
    DataToSend = (length-Offset);
 8001224:	1b7c      	subs	r4, r7, r5
 8001226:	b2e4      	uxtb	r4, r4
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8001228:	2c14      	cmp	r4, #20
 800122a:	bf28      	it	cs
 800122c:	2414      	movcs	r4, #20
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800122e:	eb08 0605 	add.w	r6, r8, r5
 8001232:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8001270 <Stderr_Update+0x5c>
 8001236:	4622      	mov	r2, r4
 8001238:	4631      	mov	r1, r6
 800123a:	f109 0004 	add.w	r0, r9, #4
 800123e:	f007 ff53 	bl	80090e8 <memcpy>
    LastStderrLen = DataToSend;
 8001242:	f889 4000 	strb.w	r4, [r9]
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 8001246:	9600      	str	r6, [sp, #0]
 8001248:	4623      	mov	r3, r4
 800124a:	2200      	movs	r2, #0
 800124c:	4611      	mov	r1, r2
 800124e:	4610      	mov	r0, r2
 8001250:	f007 fbde 	bl	8008a10 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS)
 8001254:	b948      	cbnz	r0, 800126a <Stderr_Update+0x56>
    HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff fd1e 	bl	8000c98 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800125c:	3514      	adds	r5, #20
 800125e:	b2ed      	uxtb	r5, r5
 8001260:	e7de      	b.n	8001220 <Stderr_Update+0xc>
  return BLE_STATUS_SUCCESS;
 8001262:	2000      	movs	r0, #0
}
 8001264:	b003      	add	sp, #12
 8001266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return BLE_STATUS_ERROR;
 800126a:	2047      	movs	r0, #71	; 0x47
 800126c:	e7fa      	b.n	8001264 <Stderr_Update+0x50>
 800126e:	bf00      	nop
 8001270:	20000218 	.word	0x20000218

08001274 <Term_Update_AfterRead>:
{
 8001274:	b530      	push	{r4, r5, lr}
 8001276:	b0c3      	sub	sp, #268	; 0x10c
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <Term_Update_AfterRead+0x70>)
 800127a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800127e:	322c      	adds	r2, #44	; 0x2c
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	4611      	mov	r1, r2
 8001286:	4610      	mov	r0, r2
 8001288:	f007 fbc2 	bl	8008a10 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS) 
 800128c:	4603      	mov	r3, r0
 800128e:	b1c0      	cbz	r0, 80012c2 <Term_Update_AfterRead+0x4e>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <Term_Update_AfterRead+0x74>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001298:	d016      	beq.n	80012c8 <Term_Update_AfterRead+0x54>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 800129a:	4d14      	ldr	r5, [pc, #80]	; (80012ec <Term_Update_AfterRead+0x78>)
 800129c:	4c14      	ldr	r4, [pc, #80]	; (80012f0 <Term_Update_AfterRead+0x7c>)
 800129e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a0:	6028      	str	r0, [r5, #0]
 80012a2:	6069      	str	r1, [r5, #4]
 80012a4:	60aa      	str	r2, [r5, #8]
 80012a6:	60eb      	str	r3, [r5, #12]
 80012a8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012aa:	6128      	str	r0, [r5, #16]
 80012ac:	6169      	str	r1, [r5, #20]
 80012ae:	61aa      	str	r2, [r5, #24]
 80012b0:	7823      	ldrb	r3, [r4, #0]
 80012b2:	772b      	strb	r3, [r5, #28]
 80012b4:	211c      	movs	r1, #28
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <Term_Update_AfterRead+0x80>)
 80012b8:	6019      	str	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80012ba:	4628      	mov	r0, r5
 80012bc:	f7ff ffaa 	bl	8001214 <Stderr_Update>
    return BLE_STATUS_ERROR;
 80012c0:	2347      	movs	r3, #71	; 0x47
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	b043      	add	sp, #268	; 0x10c
 80012c6:	bd30      	pop	{r4, r5, pc}
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 80012c8:	ac02      	add	r4, sp, #8
 80012ca:	4d09      	ldr	r5, [pc, #36]	; (80012f0 <Term_Update_AfterRead+0x7c>)
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012d4:	c407      	stmia	r4!, {r0, r1, r2}
 80012d6:	7023      	strb	r3, [r4, #0]
 80012d8:	211c      	movs	r1, #28
 80012da:	a802      	add	r0, sp, #8
 80012dc:	f000 fdde 	bl	8001e9c <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 80012e0:	2347      	movs	r3, #71	; 0x47
 80012e2:	e7ee      	b.n	80012c2 <Term_Update_AfterRead+0x4e>
 80012e4:	20000218 	.word	0x20000218
 80012e8:	20000210 	.word	0x20000210
 80012ec:	20000938 	.word	0x20000938
 80012f0:	08009e00 	.word	0x08009e00
 80012f4:	20000a38 	.word	0x20000a38

080012f8 <Term_Update>:
{
 80012f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012fc:	b0c3      	sub	sp, #268	; 0x10c
 80012fe:	4680      	mov	r8, r0
 8001300:	460f      	mov	r7, r1
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001302:	2500      	movs	r5, #0
 8001304:	42bd      	cmp	r5, r7
 8001306:	d22c      	bcs.n	8001362 <Term_Update+0x6a>
    DataToSend = (length-Offset);
 8001308:	1b7c      	subs	r4, r7, r5
 800130a:	b2e4      	uxtb	r4, r4
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 800130c:	2c14      	cmp	r4, #20
 800130e:	bf28      	it	cs
 8001310:	2414      	movcs	r4, #20
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8001312:	eb08 0605 	add.w	r6, r8, r5
 8001316:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001370 <Term_Update+0x78>
 800131a:	4622      	mov	r2, r4
 800131c:	4631      	mov	r1, r6
 800131e:	f109 002c 	add.w	r0, r9, #44	; 0x2c
 8001322:	f007 fee1 	bl	80090e8 <memcpy>
    LastTermLen = DataToSend;
 8001326:	f889 4028 	strb.w	r4, [r9, #40]	; 0x28
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 800132a:	9600      	str	r6, [sp, #0]
 800132c:	4623      	mov	r3, r4
 800132e:	2200      	movs	r2, #0
 8001330:	4611      	mov	r1, r2
 8001332:	4610      	mov	r0, r2
 8001334:	f007 fb6c 	bl	8008a10 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS) 
 8001338:	b928      	cbnz	r0, 8001346 <Term_Update+0x4e>
    HAL_Delay(20);
 800133a:	2014      	movs	r0, #20
 800133c:	f7ff fcac 	bl	8000c98 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001340:	3514      	adds	r5, #20
 8001342:	b2ed      	uxtb	r5, r5
 8001344:	e7de      	b.n	8001304 <Term_Update+0xc>
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001346:	ac02      	add	r4, sp, #8
 8001348:	4d08      	ldr	r5, [pc, #32]	; (800136c <Term_Update+0x74>)
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001352:	c407      	stmia	r4!, {r0, r1, r2}
 8001354:	7023      	strb	r3, [r4, #0]
 8001356:	211c      	movs	r1, #28
 8001358:	a802      	add	r0, sp, #8
 800135a:	f000 fd9f 	bl	8001e9c <CDC_Fill_Buffer>
      return BLE_STATUS_ERROR;
 800135e:	2047      	movs	r0, #71	; 0x47
 8001360:	e000      	b.n	8001364 <Term_Update+0x6c>
  return BLE_STATUS_SUCCESS;
 8001362:	2000      	movs	r0, #0
}
 8001364:	b043      	add	sp, #268	; 0x10c
 8001366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800136a:	bf00      	nop
 800136c:	08009e00 	.word	0x08009e00
 8001370:	20000218 	.word	0x20000218

08001374 <Config_Notify>:
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b0c5      	sub	sp, #276	; 0x114
 8001378:	4604      	mov	r4, r0
 800137a:	460e      	mov	r6, r1
 800137c:	4615      	mov	r5, r2
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800137e:	f002 fbc7 	bl	8003b10 <HAL_GetTick>
 8001382:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8001386:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
 800138a:	f002 fbc1 	bl	8003b10 <HAL_GetTick>
 800138e:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8001392:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
  STORE_BE_32(buff+2,Feature);
 8001396:	f88d 410d 	strb.w	r4, [sp, #269]	; 0x10d
 800139a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800139e:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
 80013a2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80013a6:	f88d 310b 	strb.w	r3, [sp, #267]	; 0x10b
 80013aa:	0e24      	lsrs	r4, r4, #24
 80013ac:	f88d 410a 	strb.w	r4, [sp, #266]	; 0x10a
  buff[6] = Command;
 80013b0:	f88d 610e 	strb.w	r6, [sp, #270]	; 0x10e
  buff[7] = data;
 80013b4:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
  ret = aci_gatt_update_char_value (ConfigServW2STHandle, ConfigCharHandle, 0, 8,buff);
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <Config_Notify+0xb4>)
 80013ba:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 80013bc:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80013be:	ab42      	add	r3, sp, #264	; 0x108
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2308      	movs	r3, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	f007 fb23 	bl	8008a10 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS)
 80013ca:	4603      	mov	r3, r0
 80013cc:	b348      	cbz	r0, 8001422 <Config_Notify+0xae>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <Config_Notify+0xb8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80013d6:	d017      	beq.n	8001408 <Config_Notify+0x94>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Configuration Char\r\n");
 80013d8:	4e15      	ldr	r6, [pc, #84]	; (8001430 <Config_Notify+0xbc>)
 80013da:	4c16      	ldr	r4, [pc, #88]	; (8001434 <Config_Notify+0xc0>)
 80013dc:	f106 0720 	add.w	r7, r6, #32
 80013e0:	4635      	mov	r5, r6
 80013e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e4:	6020      	str	r0, [r4, #0]
 80013e6:	6061      	str	r1, [r4, #4]
 80013e8:	60a2      	str	r2, [r4, #8]
 80013ea:	60e3      	str	r3, [r4, #12]
 80013ec:	462e      	mov	r6, r5
 80013ee:	3410      	adds	r4, #16
 80013f0:	42bd      	cmp	r5, r7
 80013f2:	d1f5      	bne.n	80013e0 <Config_Notify+0x6c>
 80013f4:	6828      	ldr	r0, [r5, #0]
 80013f6:	6020      	str	r0, [r4, #0]
 80013f8:	2123      	movs	r1, #35	; 0x23
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <Config_Notify+0xc4>)
 80013fc:	6019      	str	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <Config_Notify+0xc0>)
 8001400:	f7ff ff08 	bl	8001214 <Stderr_Update>
    return BLE_STATUS_ERROR;
 8001404:	2347      	movs	r3, #71	; 0x47
 8001406:	e00c      	b.n	8001422 <Config_Notify+0xae>
      STLBLE_PRINTF("Error Updating Configuration Char\r\n");
 8001408:	ac02      	add	r4, sp, #8
 800140a:	4d09      	ldr	r5, [pc, #36]	; (8001430 <Config_Notify+0xbc>)
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	6023      	str	r3, [r4, #0]
 8001418:	2123      	movs	r1, #35	; 0x23
 800141a:	a802      	add	r0, sp, #8
 800141c:	f000 fd3e 	bl	8001e9c <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8001420:	2347      	movs	r3, #71	; 0x47
}
 8001422:	4618      	mov	r0, r3
 8001424:	b045      	add	sp, #276	; 0x114
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	20000218 	.word	0x20000218
 800142c:	20000210 	.word	0x20000210
 8001430:	08009e20 	.word	0x08009e20
 8001434:	20000938 	.word	0x20000938
 8001438:	20000a38 	.word	0x20000a38

0800143c <Add_HWServW2ST_Service>:
{
 800143c:	b500      	push	{lr}
 800143e:	b08b      	sub	sp, #44	; 0x2c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001440:	231b      	movs	r3, #27
 8001442:	f88d 3018 	strb.w	r3, [sp, #24]
 8001446:	23c5      	movs	r3, #197	; 0xc5
 8001448:	f88d 3019 	strb.w	r3, [sp, #25]
 800144c:	23d5      	movs	r3, #213	; 0xd5
 800144e:	f88d 301a 	strb.w	r3, [sp, #26]
 8001452:	23a5      	movs	r3, #165	; 0xa5
 8001454:	f88d 301b 	strb.w	r3, [sp, #27]
 8001458:	2002      	movs	r0, #2
 800145a:	f88d 001c 	strb.w	r0, [sp, #28]
 800145e:	2300      	movs	r3, #0
 8001460:	f88d 301d 	strb.w	r3, [sp, #29]
 8001464:	22b4      	movs	r2, #180	; 0xb4
 8001466:	f88d 201e 	strb.w	r2, [sp, #30]
 800146a:	229a      	movs	r2, #154	; 0x9a
 800146c:	f88d 201f 	strb.w	r2, [sp, #31]
 8001470:	22e1      	movs	r2, #225	; 0xe1
 8001472:	f88d 2020 	strb.w	r2, [sp, #32]
 8001476:	2211      	movs	r2, #17
 8001478:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800147c:	2201      	movs	r2, #1
 800147e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8001482:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8001486:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800148a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800148e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8001492:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <Add_HWServW2ST_Service+0x1e0>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	230d      	movs	r3, #13
 800149c:	a906      	add	r1, sp, #24
 800149e:	f007 fa19 	bl	80088d4 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) 
 80014a2:	2800      	cmp	r0, #0
 80014a4:	f040 80b2 	bne.w	800160c <Add_HWServW2ST_Service+0x1d0>
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80014a8:	231b      	movs	r3, #27
 80014aa:	f88d 3018 	strb.w	r3, [sp, #24]
 80014ae:	23c5      	movs	r3, #197	; 0xc5
 80014b0:	f88d 3019 	strb.w	r3, [sp, #25]
 80014b4:	23d5      	movs	r3, #213	; 0xd5
 80014b6:	f88d 301a 	strb.w	r3, [sp, #26]
 80014ba:	23a5      	movs	r3, #165	; 0xa5
 80014bc:	f88d 301b 	strb.w	r3, [sp, #27]
 80014c0:	2302      	movs	r3, #2
 80014c2:	f88d 301c 	strb.w	r3, [sp, #28]
 80014c6:	2300      	movs	r3, #0
 80014c8:	f88d 301d 	strb.w	r3, [sp, #29]
 80014cc:	2236      	movs	r2, #54	; 0x36
 80014ce:	f88d 201e 	strb.w	r2, [sp, #30]
 80014d2:	22ac      	movs	r2, #172	; 0xac
 80014d4:	f88d 201f 	strb.w	r2, [sp, #31]
 80014d8:	22e1      	movs	r2, #225	; 0xe1
 80014da:	f88d 2020 	strb.w	r2, [sp, #32]
 80014de:	2211      	movs	r2, #17
 80014e0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80014e4:	2201      	movs	r2, #1
 80014e6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80014ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80014ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80014f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80014f6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80014fa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if(TargetBoardFeatures.NumTempSensors==2) 
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <Add_HWServW2ST_Service+0x1e4>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d072      	beq.n	80015ec <Add_HWServW2ST_Service+0x1b0>
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001506:	2b01      	cmp	r3, #1
 8001508:	d078      	beq.n	80015fc <Add_HWServW2ST_Service+0x1c0>
  if(TargetBoardFeatures.HandleHumSensor) 
 800150a:	4b45      	ldr	r3, [pc, #276]	; (8001620 <Add_HWServW2ST_Service+0x1e4>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	b14b      	cbz	r3, 8001524 <Add_HWServW2ST_Service+0xe8>
    uuid[14] |= 0x08; /* Humidity */
 8001510:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    EnvironmentalCharSize+=2;
 800151c:	4a41      	ldr	r2, [pc, #260]	; (8001624 <Add_HWServW2ST_Service+0x1e8>)
 800151e:	7853      	ldrb	r3, [r2, #1]
 8001520:	3302      	adds	r3, #2
 8001522:	7053      	strb	r3, [r2, #1]
  if(TargetBoardFeatures.HandlePressSensor) 
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <Add_HWServW2ST_Service+0x1e4>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	b14b      	cbz	r3, 800153e <Add_HWServW2ST_Service+0x102>
    uuid[14] |= 0x10; /* Pressure value*/
 800152a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    EnvironmentalCharSize+=4;
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <Add_HWServW2ST_Service+0x1e8>)
 8001538:	7853      	ldrb	r3, [r2, #1]
 800153a:	3304      	adds	r3, #4
 800153c:	7053      	strb	r3, [r2, #1]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
 800153e:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <Add_HWServW2ST_Service+0x1ec>)
 8001540:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <Add_HWServW2ST_Service+0x1e8>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	3242      	adds	r2, #66	; 0x42
 800154a:	9205      	str	r2, [sp, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	9204      	str	r2, [sp, #16]
 8001550:	2110      	movs	r1, #16
 8001552:	9103      	str	r1, [sp, #12]
 8001554:	2104      	movs	r1, #4
 8001556:	9102      	str	r1, [sp, #8]
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	2212      	movs	r2, #18
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	aa06      	add	r2, sp, #24
 8001560:	2102      	movs	r1, #2
 8001562:	f007 f9f5 	bl	8008950 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 8001566:	2800      	cmp	r0, #0
 8001568:	d152      	bne.n	8001610 <Add_HWServW2ST_Service+0x1d4>
  COPY_LED_W2ST_CHAR_UUID(uuid);
 800156a:	231b      	movs	r3, #27
 800156c:	f88d 3018 	strb.w	r3, [sp, #24]
 8001570:	23c5      	movs	r3, #197	; 0xc5
 8001572:	f88d 3019 	strb.w	r3, [sp, #25]
 8001576:	23d5      	movs	r3, #213	; 0xd5
 8001578:	f88d 301a 	strb.w	r3, [sp, #26]
 800157c:	23a5      	movs	r3, #165	; 0xa5
 800157e:	f88d 301b 	strb.w	r3, [sp, #27]
 8001582:	2102      	movs	r1, #2
 8001584:	f88d 101c 	strb.w	r1, [sp, #28]
 8001588:	2300      	movs	r3, #0
 800158a:	f88d 301d 	strb.w	r3, [sp, #29]
 800158e:	2236      	movs	r2, #54	; 0x36
 8001590:	f88d 201e 	strb.w	r2, [sp, #30]
 8001594:	22ac      	movs	r2, #172	; 0xac
 8001596:	f88d 201f 	strb.w	r2, [sp, #31]
 800159a:	22e1      	movs	r2, #225	; 0xe1
 800159c:	f88d 2020 	strb.w	r2, [sp, #32]
 80015a0:	2211      	movs	r2, #17
 80015a2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80015a6:	2201      	movs	r2, #1
 80015a8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80015ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80015b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80015b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80015b8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80015bc:	2220      	movs	r2, #32
 80015be:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <Add_HWServW2ST_Service+0x1ec>)
 80015c4:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
 80015c8:	3244      	adds	r2, #68	; 0x44
 80015ca:	9205      	str	r2, [sp, #20]
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	2210      	movs	r2, #16
 80015d0:	9203      	str	r2, [sp, #12]
 80015d2:	2204      	movs	r2, #4
 80015d4:	9202      	str	r2, [sp, #8]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2312      	movs	r3, #18
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	aa06      	add	r2, sp, #24
 80015e0:	f007 f9b6 	bl	8008950 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 80015e4:	4603      	mov	r3, r0
 80015e6:	b1a0      	cbz	r0, 8001612 <Add_HWServW2ST_Service+0x1d6>
  return BLE_STATUS_ERROR;
 80015e8:	2347      	movs	r3, #71	; 0x47
 80015ea:	e012      	b.n	8001612 <Add_HWServW2ST_Service+0x1d6>
    uuid[14] |= 0x05; /* Two Temperature values*/
 80015ec:	2305      	movs	r3, #5
 80015ee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    EnvironmentalCharSize+=2*2;
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <Add_HWServW2ST_Service+0x1e8>)
 80015f4:	7853      	ldrb	r3, [r2, #1]
 80015f6:	3304      	adds	r3, #4
 80015f8:	7053      	strb	r3, [r2, #1]
 80015fa:	e786      	b.n	800150a <Add_HWServW2ST_Service+0xce>
    uuid[14] |= 0x04; /* One Temperature value*/
 80015fc:	2304      	movs	r3, #4
 80015fe:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    EnvironmentalCharSize+=2;
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <Add_HWServW2ST_Service+0x1e8>)
 8001604:	7853      	ldrb	r3, [r2, #1]
 8001606:	3302      	adds	r3, #2
 8001608:	7053      	strb	r3, [r2, #1]
 800160a:	e77e      	b.n	800150a <Add_HWServW2ST_Service+0xce>
  return BLE_STATUS_ERROR;
 800160c:	2347      	movs	r3, #71	; 0x47
 800160e:	e000      	b.n	8001612 <Add_HWServW2ST_Service+0x1d6>
 8001610:	2347      	movs	r3, #71	; 0x47
}
 8001612:	4618      	mov	r0, r3
 8001614:	b00b      	add	sp, #44	; 0x2c
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4
 800161a:	bf00      	nop
 800161c:	20000258 	.word	0x20000258
 8001620:	200005d4 	.word	0x200005d4
 8001624:	20000000 	.word	0x20000000
 8001628:	20000218 	.word	0x20000218

0800162c <Environmental_Update>:
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b0c7      	sub	sp, #284	; 0x11c
 8001630:	4607      	mov	r7, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4616      	mov	r6, r2
 8001636:	461c      	mov	r4, r3
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001638:	f002 fa6a 	bl	8003b10 <HAL_GetTick>
 800163c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8001640:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 8001644:	f002 fa64 	bl	8003b10 <HAL_GetTick>
 8001648:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 800164c:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  if(TargetBoardFeatures.HandlePressSensor) 
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <Environmental_Update+0x110>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d049      	beq.n	80016ec <Environmental_Update+0xc0>
    STORE_LE_32(buff+BuffPos,Press);
 8001658:	f88d 710e 	strb.w	r7, [sp, #270]	; 0x10e
 800165c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8001660:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8001664:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8001668:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 800166c:	0e38      	lsrs	r0, r7, #24
 800166e:	f88d 0111 	strb.w	r0, [sp, #273]	; 0x111
    BuffPos+=4;
 8001672:	2306      	movs	r3, #6
  if(TargetBoardFeatures.HandleHumSensor) 
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <Environmental_Update+0x110>)
 8001676:	6992      	ldr	r2, [r2, #24]
 8001678:	b132      	cbz	r2, 8001688 <Environmental_Update+0x5c>
    STORE_LE_16(buff+BuffPos,Hum);
 800167a:	aa43      	add	r2, sp, #268	; 0x10c
 800167c:	54d5      	strb	r5, [r2, r3]
 800167e:	1c58      	adds	r0, r3, #1
 8001680:	0a29      	lsrs	r1, r5, #8
 8001682:	5411      	strb	r1, [r2, r0]
    BuffPos+=2;
 8001684:	3302      	adds	r3, #2
 8001686:	b2db      	uxtb	r3, r3
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001688:	4a2c      	ldr	r2, [pc, #176]	; (800173c <Environmental_Update+0x110>)
 800168a:	6892      	ldr	r2, [r2, #8]
 800168c:	2a02      	cmp	r2, #2
 800168e:	d02f      	beq.n	80016f0 <Environmental_Update+0xc4>
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001690:	2a01      	cmp	r2, #1
 8001692:	d03b      	beq.n	800170c <Environmental_Update+0xe0>
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <Environmental_Update+0x114>)
 8001696:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 800169a:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <Environmental_Update+0x118>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	aa43      	add	r2, sp, #268	; 0x10c
 80016a4:	9200      	str	r2, [sp, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f007 f9b2 	bl	8008a10 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS)
 80016ac:	4603      	mov	r3, r0
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d040      	beq.n	8001734 <Environmental_Update+0x108>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <Environmental_Update+0x11c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80016ba:	d02e      	beq.n	800171a <Environmental_Update+0xee>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 80016bc:	4e23      	ldr	r6, [pc, #140]	; (800174c <Environmental_Update+0x120>)
 80016be:	4c24      	ldr	r4, [pc, #144]	; (8001750 <Environmental_Update+0x124>)
 80016c0:	f106 0720 	add.w	r7, r6, #32
 80016c4:	4635      	mov	r5, r6
 80016c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c8:	6020      	str	r0, [r4, #0]
 80016ca:	6061      	str	r1, [r4, #4]
 80016cc:	60a2      	str	r2, [r4, #8]
 80016ce:	60e3      	str	r3, [r4, #12]
 80016d0:	462e      	mov	r6, r5
 80016d2:	3410      	adds	r4, #16
 80016d4:	42bd      	cmp	r5, r7
 80016d6:	d1f5      	bne.n	80016c4 <Environmental_Update+0x98>
 80016d8:	6828      	ldr	r0, [r5, #0]
 80016da:	6020      	str	r0, [r4, #0]
 80016dc:	2123      	movs	r1, #35	; 0x23
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <Environmental_Update+0x128>)
 80016e0:	6019      	str	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80016e2:	481b      	ldr	r0, [pc, #108]	; (8001750 <Environmental_Update+0x124>)
 80016e4:	f7ff fd96 	bl	8001214 <Stderr_Update>
    return BLE_STATUS_ERROR;
 80016e8:	2347      	movs	r3, #71	; 0x47
 80016ea:	e023      	b.n	8001734 <Environmental_Update+0x108>
  BuffPos=2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	e7c1      	b.n	8001674 <Environmental_Update+0x48>
    STORE_LE_16(buff+BuffPos,Temp2);
 80016f0:	a943      	add	r1, sp, #268	; 0x10c
 80016f2:	54ce      	strb	r6, [r1, r3]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80016fa:	548e      	strb	r6, [r1, r2]
    BuffPos+=2;
 80016fc:	3302      	adds	r3, #2
 80016fe:	b2db      	uxtb	r3, r3
    STORE_LE_16(buff+BuffPos,Temp1);
 8001700:	54cc      	strb	r4, [r1, r3]
 8001702:	3301      	adds	r3, #1
 8001704:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8001708:	54ca      	strb	r2, [r1, r3]
 800170a:	e7c3      	b.n	8001694 <Environmental_Update+0x68>
    STORE_LE_16(buff+BuffPos,Temp1);
 800170c:	a943      	add	r1, sp, #268	; 0x10c
 800170e:	54cc      	strb	r4, [r1, r3]
 8001710:	3301      	adds	r3, #1
 8001712:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8001716:	54ca      	strb	r2, [r1, r3]
 8001718:	e7bc      	b.n	8001694 <Environmental_Update+0x68>
      STLBLE_PRINTF("Error Updating Environmental Char\r\n");
 800171a:	ac03      	add	r4, sp, #12
 800171c:	4d0b      	ldr	r5, [pc, #44]	; (800174c <Environmental_Update+0x120>)
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	6023      	str	r3, [r4, #0]
 800172a:	2123      	movs	r1, #35	; 0x23
 800172c:	a803      	add	r0, sp, #12
 800172e:	f000 fbb5 	bl	8001e9c <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8001732:	2347      	movs	r3, #71	; 0x47
}
 8001734:	4618      	mov	r0, r3
 8001736:	b047      	add	sp, #284	; 0x11c
 8001738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173a:	bf00      	nop
 800173c:	200005d4 	.word	0x200005d4
 8001740:	20000218 	.word	0x20000218
 8001744:	20000000 	.word	0x20000000
 8001748:	20000210 	.word	0x20000210
 800174c:	08009e44 	.word	0x08009e44
 8001750:	20000938 	.word	0x20000938
 8001754:	20000a38 	.word	0x20000a38

08001758 <LED_Update>:
{
 8001758:	b530      	push	{r4, r5, lr}
 800175a:	b0c5      	sub	sp, #276	; 0x114
 800175c:	4604      	mov	r4, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800175e:	f002 f9d7 	bl	8003b10 <HAL_GetTick>
 8001762:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8001766:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 800176a:	f002 f9d1 	bl	8003b10 <HAL_GetTick>
 800176e:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8001772:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  buff[2] = LedStatus;
 8001776:	f88d 410e 	strb.w	r4, [sp, #270]	; 0x10e
  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <LED_Update+0x94>)
 800177c:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 8001780:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 8001784:	ab43      	add	r3, sp, #268	; 0x10c
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2303      	movs	r3, #3
 800178a:	2200      	movs	r2, #0
 800178c:	f007 f940 	bl	8008a10 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS)
 8001790:	4603      	mov	r3, r0
 8001792:	b1b8      	cbz	r0, 80017c4 <LED_Update+0x6c>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <LED_Update+0x98>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f413 7f00 	tst.w	r3, #512	; 0x200
 800179c:	d015      	beq.n	80017ca <LED_Update+0x72>
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
 800179e:	4d15      	ldr	r5, [pc, #84]	; (80017f4 <LED_Update+0x9c>)
 80017a0:	4c15      	ldr	r4, [pc, #84]	; (80017f8 <LED_Update+0xa0>)
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	6028      	str	r0, [r5, #0]
 80017a6:	6069      	str	r1, [r5, #4]
 80017a8:	60aa      	str	r2, [r5, #8]
 80017aa:	60eb      	str	r3, [r5, #12]
 80017ac:	cc03      	ldmia	r4!, {r0, r1}
 80017ae:	6128      	str	r0, [r5, #16]
 80017b0:	6169      	str	r1, [r5, #20]
 80017b2:	8823      	ldrh	r3, [r4, #0]
 80017b4:	832b      	strh	r3, [r5, #24]
 80017b6:	2119      	movs	r1, #25
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <LED_Update+0xa4>)
 80017ba:	6019      	str	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80017bc:	4628      	mov	r0, r5
 80017be:	f7ff fd29 	bl	8001214 <Stderr_Update>
    return BLE_STATUS_ERROR;
 80017c2:	2347      	movs	r3, #71	; 0x47
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	b045      	add	sp, #276	; 0x114
 80017c8:	bd30      	pop	{r4, r5, pc}
      STLBLE_PRINTF("Error Updating Temp Char\r\n");
 80017ca:	ac03      	add	r4, sp, #12
 80017cc:	4d0c      	ldr	r5, [pc, #48]	; (8001800 <LED_Update+0xa8>)
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d6:	c403      	stmia	r4!, {r0, r1}
 80017d8:	f824 2b02 	strh.w	r2, [r4], #2
 80017dc:	0c12      	lsrs	r2, r2, #16
 80017de:	7022      	strb	r2, [r4, #0]
 80017e0:	211a      	movs	r1, #26
 80017e2:	a803      	add	r0, sp, #12
 80017e4:	f000 fb5a 	bl	8001e9c <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 80017e8:	2347      	movs	r3, #71	; 0x47
 80017ea:	e7eb      	b.n	80017c4 <LED_Update+0x6c>
 80017ec:	20000218 	.word	0x20000218
 80017f0:	20000210 	.word	0x20000210
 80017f4:	20000938 	.word	0x20000938
 80017f8:	08009e68 	.word	0x08009e68
 80017fc:	20000a38 	.word	0x20000a38
 8001800:	08009e84 	.word	0x08009e84

08001804 <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
static void ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	b0c0      	sub	sp, #256	; 0x100
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8001808:	78c2      	ldrb	r2, [r0, #3]
 800180a:	7883      	ldrb	r3, [r0, #2]
 800180c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001810:	7843      	ldrb	r3, [r0, #1]
 8001812:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001816:	7803      	ldrb	r3, [r0, #0]
 8001818:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  uint8_t Command = att_data[4];
 800181c:	7904      	ldrb	r4, [r0, #4]
  uint8_t Data    = att_data[5];
 800181e:	7945      	ldrb	r5, [r0, #5]

  switch (FeatureMask) {
 8001820:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001824:	d124      	bne.n	8001870 <ConfigCommandParsing+0x6c>
    case FEATURE_MASK_LED:
      /* Led events */
#ifdef ENABLE_USB_DEBUG_CONNECTION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) {
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <ConfigCommandParsing+0xac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800182e:	d021      	beq.n	8001874 <ConfigCommandParsing+0x70>
        BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x\n\r",FeatureMask,Command);
 8001830:	4e20      	ldr	r6, [pc, #128]	; (80018b4 <ConfigCommandParsing+0xb0>)
 8001832:	4623      	mov	r3, r4
 8001834:	4920      	ldr	r1, [pc, #128]	; (80018b8 <ConfigCommandParsing+0xb4>)
 8001836:	4630      	mov	r0, r6
 8001838:	f007 fd22 	bl	8009280 <siprintf>
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <ConfigCommandParsing+0xb8>)
 800183e:	6018      	str	r0, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001840:	b2c1      	uxtb	r1, r0
 8001842:	4630      	mov	r0, r6
 8001844:	f7ff fd58 	bl	80012f8 <Term_Update>
      } else {
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
      }
#endif /* ENABLE_USB_DEBUG_CONNECTION */
     switch(Command) {
 8001848:	b1f4      	cbz	r4, 8001888 <ConfigCommandParsing+0x84>
 800184a:	2c01      	cmp	r4, #1
 800184c:	d10b      	bne.n	8001866 <ConfigCommandParsing+0x62>
      case 1:
        TargetBoardFeatures.LedStatus=1;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <ConfigCommandParsing+0xbc>)
 8001850:	2201      	movs	r2, #1
 8001852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOnTargetPlatform();
 8001856:	f7fe fe43 	bl	80004e0 <LedOnTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800185a:	462a      	mov	r2, r5
 800185c:	4621      	mov	r1, r4
 800185e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001862:	f7ff fd87 	bl	8001374 <Config_Notify>
        LedOffTargetPlatform();
        Config_Notify(FEATURE_MASK_LED,Command,Data);
        break;
     }
     /* Update the LED feature */
     if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED)) {
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <ConfigCommandParsing+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f013 0f02 	tst.w	r3, #2
 800186e:	d118      	bne.n	80018a2 <ConfigCommandParsing+0x9e>
       LED_Update(TargetBoardFeatures.LedStatus);
     }
    break;
  }
}
 8001870:	b040      	add	sp, #256	; 0x100
 8001872:	bd70      	pop	{r4, r5, r6, pc}
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
 8001874:	4623      	mov	r3, r4
 8001876:	4913      	ldr	r1, [pc, #76]	; (80018c4 <ConfigCommandParsing+0xc0>)
 8001878:	4668      	mov	r0, sp
 800187a:	f007 fd01 	bl	8009280 <siprintf>
 800187e:	4601      	mov	r1, r0
 8001880:	4668      	mov	r0, sp
 8001882:	f000 fb0b 	bl	8001e9c <CDC_Fill_Buffer>
 8001886:	e7df      	b.n	8001848 <ConfigCommandParsing+0x44>
        TargetBoardFeatures.LedStatus=0;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <ConfigCommandParsing+0xbc>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOffTargetPlatform();
 8001890:	f7fe fe2b 	bl	80004ea <LedOffTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 8001894:	462a      	mov	r2, r5
 8001896:	4621      	mov	r1, r4
 8001898:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800189c:	f7ff fd6a 	bl	8001374 <Config_Notify>
        break;
 80018a0:	e7e1      	b.n	8001866 <ConfigCommandParsing+0x62>
       LED_Update(TargetBoardFeatures.LedStatus);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <ConfigCommandParsing+0xbc>)
 80018a4:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 80018a8:	f7ff ff56 	bl	8001758 <LED_Update>
}
 80018ac:	e7e0      	b.n	8001870 <ConfigCommandParsing+0x6c>
 80018ae:	bf00      	nop
 80018b0:	20000210 	.word	0x20000210
 80018b4:	20000938 	.word	0x20000938
 80018b8:	08009ea0 	.word	0x08009ea0
 80018bc:	20000a38 	.word	0x20000a38
 80018c0:	200005d4 	.word	0x200005d4
 80018c4:	08009eb8 	.word	0x08009eb8

080018c8 <setConnectable>:
{  
 80018c8:	b530      	push	{r4, r5, lr}
 80018ca:	b093      	sub	sp, #76	; 0x4c
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_STLBLE};
 80018cc:	4c37      	ldr	r4, [pc, #220]	; (80019ac <setConnectable+0xe4>)
 80018ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d2:	ab12      	add	r3, sp, #72	; 0x48
 80018d4:	e903 0003 	stmdb	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 80018d8:	ad09      	add	r5, sp, #36	; 0x24
 80018da:	3408      	adds	r4, #8
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018e4:	c503      	stmia	r5!, {r0, r1}
 80018e6:	802a      	strh	r2, [r5, #0]
  manuf_data[20] = bdaddr[5];
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <setConnectable+0xe8>)
 80018ea:	795a      	ldrb	r2, [r3, #5]
 80018ec:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[4];
 80018f0:	791a      	ldrb	r2, [r3, #4]
 80018f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[3];
 80018f6:	78da      	ldrb	r2, [r3, #3]
 80018f8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[2];
 80018fc:	789a      	ldrb	r2, [r3, #2]
 80018fe:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[1];
 8001902:	785a      	ldrb	r2, [r3, #1]
 8001904:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
  manuf_data[25] = bdaddr[0];
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
  manuf_data[16] |= 0x20; /* Led */
 800190e:	2320      	movs	r3, #32
 8001910:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  if(TargetBoardFeatures.HandleGGComponent)
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <setConnectable+0xec>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	b113      	cbz	r3, 8001920 <setConnectable+0x58>
    manuf_data[17] |= 0x02; /* Battery Present */
 800191a:	23e2      	movs	r3, #226	; 0xe2
 800191c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  if(TargetBoardFeatures.NumTempSensors==2)
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <setConnectable+0xec>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d032      	beq.n	800198e <setConnectable+0xc6>
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001928:	2b01      	cmp	r3, #1
 800192a:	d037      	beq.n	800199c <setConnectable+0xd4>
  if(TargetBoardFeatures.HandleHumSensor) 
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <setConnectable+0xec>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	b12b      	cbz	r3, 800193e <setConnectable+0x76>
    manuf_data[17] |= 0x08; /* Humidity */
 8001932:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  if(TargetBoardFeatures.HandlePressSensor) 
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <setConnectable+0xec>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	b12b      	cbz	r3, 8001950 <setConnectable+0x88>
    manuf_data[17] |= 0x10; /* Pressure value*/
 8001944:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  if(TargetBoardFeatures.HWAdvanceFeatures) 
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <setConnectable+0xec>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	b113      	cbz	r3, 800195c <setConnectable+0x94>
    manuf_data[18] |=0x04;
 8001956:	2304      	movs	r3, #4
 8001958:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  hci_le_set_scan_resp_data(0,NULL);
 800195c:	2100      	movs	r1, #0
 800195e:	4608      	mov	r0, r1
 8001960:	f007 f946 	bl	8008bf0 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8001964:	2000      	movs	r0, #0
 8001966:	9006      	str	r0, [sp, #24]
 8001968:	9005      	str	r0, [sp, #20]
 800196a:	9004      	str	r0, [sp, #16]
 800196c:	9003      	str	r0, [sp, #12]
 800196e:	ab10      	add	r3, sp, #64	; 0x40
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2308      	movs	r3, #8
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	9000      	str	r0, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	4602      	mov	r2, r0
 800197c:	4601      	mov	r1, r0
 800197e:	f006 fec7 	bl	8008710 <aci_gap_set_discoverable>
  aci_gap_update_adv_data(26, manuf_data);
 8001982:	a909      	add	r1, sp, #36	; 0x24
 8001984:	201a      	movs	r0, #26
 8001986:	f006 ff5c 	bl	8008842 <aci_gap_update_adv_data>
}
 800198a:	b013      	add	sp, #76	; 0x4c
 800198c:	bd30      	pop	{r4, r5, pc}
    manuf_data[17] |= 0x05; /* Two Temperature values*/
 800198e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8001992:	f043 0305 	orr.w	r3, r3, #5
 8001996:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800199a:	e7c7      	b.n	800192c <setConnectable+0x64>
    manuf_data[17] |= 0x04; /* One Temperature value*/
 800199c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80019a8:	e7c0      	b.n	800192c <setConnectable+0x64>
 80019aa:	bf00      	nop
 80019ac:	08009928 	.word	0x08009928
 80019b0:	200008e4 	.word	0x200008e4
 80019b4:	200005d4 	.word	0x200005d4

080019b8 <Read_Request_CB>:
{
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	ed2d 8b02 	vpush	{d8}
 80019be:	b082      	sub	sp, #8
  if(handle == EnvironmentalCharHandle + 1)
 80019c0:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <Read_Request_CB+0x1b4>)
 80019c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019c6:	3301      	adds	r3, #1
 80019c8:	4298      	cmp	r0, r3
 80019ca:	d00e      	beq.n	80019ea <Read_Request_CB+0x32>
  else if(handle == LedCharHandle + 1)
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <Read_Request_CB+0x1b4>)
 80019ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d2:	3301      	adds	r3, #1
 80019d4:	4298      	cmp	r0, r3
 80019d6:	f000 80bc 	beq.w	8001b52 <Read_Request_CB+0x19a>
  else if (handle == StdErrCharHandle + 1) 
 80019da:	2801      	cmp	r0, #1
 80019dc:	f000 80bf 	beq.w	8001b5e <Read_Request_CB+0x1a6>
  else if (handle == TermCharHandle + 1)
 80019e0:	2801      	cmp	r0, #1
 80019e2:	d117      	bne.n	8001a14 <Read_Request_CB+0x5c>
    Term_Update_AfterRead();
 80019e4:	f7ff fc46 	bl	8001274 <Term_Update_AfterRead>
 80019e8:	e014      	b.n	8001a14 <Read_Request_CB+0x5c>
    if(TargetBoardFeatures.HandlePressSensor) 
 80019ea:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <Read_Request_CB+0x1b8>)
 80019ec:	695e      	ldr	r6, [r3, #20]
 80019ee:	b9d6      	cbnz	r6, 8001a26 <Read_Request_CB+0x6e>
    if(TargetBoardFeatures.HandleHumSensor)
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <Read_Request_CB+0x1b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	bb93      	cbnz	r3, 8001a5c <Read_Request_CB+0xa4>
    uint16_t HumToSend=0;
 80019f6:	2400      	movs	r4, #0
    if(TargetBoardFeatures.NumTempSensors==2) 
 80019f8:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <Read_Request_CB+0x1b8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d04c      	beq.n	8001a9a <Read_Request_CB+0xe2>
    else if(TargetBoardFeatures.NumTempSensors==1)
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f000 8081 	beq.w	8001b08 <Read_Request_CB+0x150>
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8001a06:	2500      	movs	r5, #0
 8001a08:	462a      	mov	r2, r5
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f7ff fe0c 	bl	800162c <Environmental_Update>
  if(connection_handle != 0)
 8001a14:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <Read_Request_CB+0x1b4>)
 8001a16:	8b98      	ldrh	r0, [r3, #28]
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	f040 80a3 	bne.w	8001b64 <Read_Request_CB+0x1ac>
}
 8001a1e:	b002      	add	sp, #8
 8001a20:	ecbd 8b02 	vpop	{d8}
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8001a26:	aa01      	add	r2, sp, #4
 8001a28:	2102      	movs	r1, #2
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f001 ffda 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8001a30:	eddd 7a01 	vldr	s15, [sp, #4]
 8001a34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001a3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a40:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001b74 <Read_Request_CB+0x1bc>
 8001a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      PressToSend=intPart*100+decPart;
 8001a4c:	2664      	movs	r6, #100	; 0x64
 8001a4e:	ee17 3a10 	vmov	r3, s14
 8001a52:	ee17 2a90 	vmov	r2, s15
 8001a56:	fb06 2603 	mla	r6, r6, r3, r2
 8001a5a:	e7c9      	b.n	80019f0 <Read_Request_CB+0x38>
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8001a5c:	aa01      	add	r2, sp, #4
 8001a5e:	2104      	movs	r1, #4
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 ffbf 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8001a66:	eddd 7a01 	vldr	s15, [sp, #4]
 8001a6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a6e:	ee17 3a10 	vmov	r3, s14
 8001a72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 4a90 	vmov	r4, s15
      HumToSend = intPart*10+decPart;
 8001a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a8e:	005a      	lsls	r2, r3, #1
 8001a90:	b292      	uxth	r2, r2
 8001a92:	fa12 f484 	uxtah	r4, r2, r4
 8001a96:	b2a4      	uxth	r4, r4
 8001a98:	e7ae      	b.n	80019f8 <Read_Request_CB+0x40>
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8001a9a:	aa01      	add	r2, sp, #4
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f001 ffa0 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8001aa4:	eddd 7a01 	vldr	s15, [sp, #4]
 8001aa8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001aac:	ee17 3a10 	vmov	r3, s14
 8001ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ab8:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 8001abc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      Temp1ToSend = intPart*10+decPart; 
 8001ac4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ac8:	005d      	lsls	r5, r3, #1
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	441d      	add	r5, r3
 8001ad0:	b22d      	sxth	r5, r5
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8001ad2:	aa01      	add	r2, sp, #4
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	f001 ff84 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8001adc:	eddd 7a01 	vldr	s15, [sp, #4]
 8001ae0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001ae4:	ee17 3a10 	vmov	r3, s14
 8001ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001af0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af8:	ee17 2a90 	vmov	r2, s15
      Temp2ToSend = intPart*10+decPart;
 8001afc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001b00:	004b      	lsls	r3, r1, #1
 8001b02:	441a      	add	r2, r3
 8001b04:	b212      	sxth	r2, r2
 8001b06:	e780      	b.n	8001a0a <Read_Request_CB+0x52>
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 8001b08:	aa01      	add	r2, sp, #4
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f001 ff69 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
 8001b12:	b9c0      	cbnz	r0, 8001b46 <Read_Request_CB+0x18e>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8001b14:	eddd 7a01 	vldr	s15, [sp, #4]
 8001b18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001b1c:	ee17 3a10 	vmov	r3, s14
 8001b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      Temp1ToSend = intPart*10+decPart;
 8001b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b38:	005d      	lsls	r5, r3, #1
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	441d      	add	r5, r3
 8001b40:	b22d      	sxth	r5, r5
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8001b42:	2200      	movs	r2, #0
 8001b44:	e761      	b.n	8001a0a <Read_Request_CB+0x52>
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8001b46:	aa01      	add	r2, sp, #4
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	f001 ff4a 	bl	80039e4 <BSP_ENV_SENSOR_GetValue>
 8001b50:	e7e0      	b.n	8001b14 <Read_Request_CB+0x15c>
    LED_Update(TargetBoardFeatures.LedStatus);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <Read_Request_CB+0x1b8>)
 8001b54:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 8001b58:	f7ff fdfe 	bl	8001758 <LED_Update>
 8001b5c:	e75a      	b.n	8001a14 <Read_Request_CB+0x5c>
    Stderr_Update_AfterRead();
 8001b5e:	f7ff fa75 	bl	800104c <Stderr_Update_AfterRead>
 8001b62:	e757      	b.n	8001a14 <Read_Request_CB+0x5c>
    aci_gatt_allow_read(connection_handle);
 8001b64:	f006 ff88 	bl	8008a78 <aci_gatt_allow_read>
}
 8001b68:	e759      	b.n	8001a1e <Read_Request_CB+0x66>
 8001b6a:	bf00      	nop
 8001b6c:	20000218 	.word	0x20000218
 8001b70:	200005d4 	.word	0x200005d4
 8001b74:	42c80000 	.word	0x42c80000

08001b78 <Attribute_Modified_CB>:
{
 8001b78:	b530      	push	{r4, r5, lr}
 8001b7a:	b0c1      	sub	sp, #260	; 0x104
  if(attr_handle == ConfigCharHandle + 2) 
 8001b7c:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <Attribute_Modified_CB+0x1e8>)
 8001b7e:	8cdd      	ldrh	r5, [r3, #38]	; 0x26
 8001b80:	1cab      	adds	r3, r5, #2
 8001b82:	4298      	cmp	r0, r3
 8001b84:	d040      	beq.n	8001c08 <Attribute_Modified_CB+0x90>
 8001b86:	460b      	mov	r3, r1
  else if(attr_handle == EnvironmentalCharHandle + 2)
 8001b88:	4975      	ldr	r1, [pc, #468]	; (8001d60 <Attribute_Modified_CB+0x1e8>)
 8001b8a:	f8b1 4042 	ldrh.w	r4, [r1, #66]	; 0x42
 8001b8e:	3402      	adds	r4, #2
 8001b90:	42a0      	cmp	r0, r4
 8001b92:	d021      	beq.n	8001bd8 <Attribute_Modified_CB+0x60>
  else if(attr_handle == StdErrCharHandle + 2)
 8001b94:	2802      	cmp	r0, #2
 8001b96:	d06d      	beq.n	8001c74 <Attribute_Modified_CB+0xfc>
  else if(attr_handle == TermCharHandle + 2)
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d07c      	beq.n	8001c96 <Attribute_Modified_CB+0x11e>
  else if(attr_handle == LedCharHandle + 2)
 8001b9c:	4970      	ldr	r1, [pc, #448]	; (8001d60 <Attribute_Modified_CB+0x1e8>)
 8001b9e:	f8b1 1044 	ldrh.w	r1, [r1, #68]	; 0x44
 8001ba2:	3102      	adds	r1, #2
 8001ba4:	4288      	cmp	r0, r1
 8001ba6:	f000 8087 	beq.w	8001cb8 <Attribute_Modified_CB+0x140>
  else if (attr_handle == ConfigCharHandle + 1) 
 8001baa:	3501      	adds	r5, #1
 8001bac:	42a8      	cmp	r0, r5
 8001bae:	f000 80bd 	beq.w	8001d2c <Attribute_Modified_CB+0x1b4>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001bba:	f040 80bc 	bne.w	8001d36 <Attribute_Modified_CB+0x1be>
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
 8001bbe:	466c      	mov	r4, sp
 8001bc0:	4d69      	ldr	r5, [pc, #420]	; (8001d68 <Attribute_Modified_CB+0x1f0>)
 8001bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bca:	c407      	stmia	r4!, {r0, r1, r2}
 8001bcc:	7023      	strb	r3, [r4, #0]
 8001bce:	211c      	movs	r1, #28
 8001bd0:	4668      	mov	r0, sp
 8001bd2:	f000 f963 	bl	8001e9c <CDC_Fill_Buffer>
}
 8001bd6:	e017      	b.n	8001c08 <Attribute_Modified_CB+0x90>
    if (att_data[0] == 01) 
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d016      	beq.n	8001c0c <Attribute_Modified_CB+0x94>
    else if (att_data[0] == 0)
 8001bde:	b353      	cbz	r3, 8001c36 <Attribute_Modified_CB+0xbe>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001be8:	d035      	beq.n	8001c56 <Attribute_Modified_CB+0xde>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8001bea:	f013 0f01 	tst.w	r3, #1
 8001bee:	d130      	bne.n	8001c52 <Attribute_Modified_CB+0xda>
 8001bf0:	4a5e      	ldr	r2, [pc, #376]	; (8001d6c <Attribute_Modified_CB+0x1f4>)
 8001bf2:	4c5f      	ldr	r4, [pc, #380]	; (8001d70 <Attribute_Modified_CB+0x1f8>)
 8001bf4:	495f      	ldr	r1, [pc, #380]	; (8001d74 <Attribute_Modified_CB+0x1fc>)
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f007 fb42 	bl	8009280 <siprintf>
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <Attribute_Modified_CB+0x200>)
 8001bfe:	6018      	str	r0, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8001c00:	b2c1      	uxtb	r1, r0
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff fb78 	bl	80012f8 <Term_Update>
}
 8001c08:	b041      	add	sp, #260	; 0x104
 8001c0a:	bd30      	pop	{r4, r5, pc}
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
 8001c0c:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	4858      	ldr	r0, [pc, #352]	; (8001d7c <Attribute_Modified_CB+0x204>)
 8001c1a:	f005 fc0b 	bl	8007434 <HAL_TIM_OC_Start_IT>
 8001c1e:	b938      	cbnz	r0, 8001c30 <Attribute_Modified_CB+0xb8>
        uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <Attribute_Modified_CB+0x204>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a53      	ldr	r3, [r2, #36]	; 0x24
        __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8001c26:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c2e:	e7d7      	b.n	8001be0 <Attribute_Modified_CB+0x68>
        Error_Handler();
 8001c30:	f7ff f92e 	bl	8000e90 <Error_Handler>
 8001c34:	e7f4      	b.n	8001c20 <Attribute_Modified_CB+0xa8>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
 8001c36:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]
      if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	484e      	ldr	r0, [pc, #312]	; (8001d7c <Attribute_Modified_CB+0x204>)
 8001c44:	f005 fcce 	bl	80075e4 <HAL_TIM_OC_Stop_IT>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d0c9      	beq.n	8001be0 <Attribute_Modified_CB+0x68>
        Error_Handler();
 8001c4c:	f7ff f920 	bl	8000e90 <Error_Handler>
 8001c50:	e7c6      	b.n	8001be0 <Attribute_Modified_CB+0x68>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8001c52:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <Attribute_Modified_CB+0x208>)
 8001c54:	e7cd      	b.n	8001bf2 <Attribute_Modified_CB+0x7a>
      STLBLE_PRINTF("--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8001c56:	f013 0f01 	tst.w	r3, #1
 8001c5a:	d109      	bne.n	8001c70 <Attribute_Modified_CB+0xf8>
 8001c5c:	4a43      	ldr	r2, [pc, #268]	; (8001d6c <Attribute_Modified_CB+0x1f4>)
 8001c5e:	4945      	ldr	r1, [pc, #276]	; (8001d74 <Attribute_Modified_CB+0x1fc>)
 8001c60:	4668      	mov	r0, sp
 8001c62:	f007 fb0d 	bl	8009280 <siprintf>
 8001c66:	4601      	mov	r1, r0
 8001c68:	4668      	mov	r0, sp
 8001c6a:	f000 f917 	bl	8001e9c <CDC_Fill_Buffer>
 8001c6e:	e7cb      	b.n	8001c08 <Attribute_Modified_CB+0x90>
 8001c70:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <Attribute_Modified_CB+0x208>)
 8001c72:	e7f4      	b.n	8001c5e <Attribute_Modified_CB+0xe6>
    if (att_data[0] == 01) 
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d007      	beq.n	8001c8a <Attribute_Modified_CB+0x112>
    else if (att_data[0] == 0)
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1c4      	bne.n	8001c08 <Attribute_Modified_CB+0x90>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 8001c7e:	4a39      	ldr	r2, [pc, #228]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e7be      	b.n	8001c08 <Attribute_Modified_CB+0x90>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8001c8a:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001c8c:	6813      	ldr	r3, [r2, #0]
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e7b8      	b.n	8001c08 <Attribute_Modified_CB+0x90>
    if (att_data[0] == 01) 
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d007      	beq.n	8001cac <Attribute_Modified_CB+0x134>
    else if (att_data[0] == 0)
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1b3      	bne.n	8001c08 <Attribute_Modified_CB+0x90>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 8001ca0:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e7ad      	b.n	8001c08 <Attribute_Modified_CB+0x90>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e7a7      	b.n	8001c08 <Attribute_Modified_CB+0x90>
    if (att_data[0] == 01) 
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d01a      	beq.n	8001cf4 <Attribute_Modified_CB+0x17c>
    else if (att_data[0] == 0)
 8001cbe:	b923      	cbnz	r3, 8001cca <Attribute_Modified_CB+0x152>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	f023 0302 	bic.w	r3, r3, #2
 8001cc8:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cd2:	d01c      	beq.n	8001d0e <Attribute_Modified_CB+0x196>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8001cd4:	f013 0f02 	tst.w	r3, #2
 8001cd8:	d117      	bne.n	8001d0a <Attribute_Modified_CB+0x192>
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <Attribute_Modified_CB+0x1f4>)
 8001cdc:	4c24      	ldr	r4, [pc, #144]	; (8001d70 <Attribute_Modified_CB+0x1f8>)
 8001cde:	4929      	ldr	r1, [pc, #164]	; (8001d84 <Attribute_Modified_CB+0x20c>)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f007 facd 	bl	8009280 <siprintf>
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <Attribute_Modified_CB+0x200>)
 8001ce8:	6018      	str	r0, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8001cea:	b2c1      	uxtb	r1, r0
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff fb03 	bl	80012f8 <Term_Update>
 8001cf2:	e789      	b.n	8001c08 <Attribute_Modified_CB+0x90>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <Attribute_Modified_CB+0x1ec>)
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6013      	str	r3, [r2, #0]
      LED_Update(TargetBoardFeatures.LedStatus);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <Attribute_Modified_CB+0x210>)
 8001d00:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 8001d04:	f7ff fd28 	bl	8001758 <LED_Update>
 8001d08:	e7df      	b.n	8001cca <Attribute_Modified_CB+0x152>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <Attribute_Modified_CB+0x208>)
 8001d0c:	e7e6      	b.n	8001cdc <Attribute_Modified_CB+0x164>
      STLBLE_PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8001d0e:	f013 0f02 	tst.w	r3, #2
 8001d12:	d109      	bne.n	8001d28 <Attribute_Modified_CB+0x1b0>
 8001d14:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <Attribute_Modified_CB+0x1f4>)
 8001d16:	491b      	ldr	r1, [pc, #108]	; (8001d84 <Attribute_Modified_CB+0x20c>)
 8001d18:	4668      	mov	r0, sp
 8001d1a:	f007 fab1 	bl	8009280 <siprintf>
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4668      	mov	r0, sp
 8001d22:	f000 f8bb 	bl	8001e9c <CDC_Fill_Buffer>
 8001d26:	e76f      	b.n	8001c08 <Attribute_Modified_CB+0x90>
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <Attribute_Modified_CB+0x208>)
 8001d2a:	e7f4      	b.n	8001d16 <Attribute_Modified_CB+0x19e>
    ConfigCommandParsing(att_data, data_length);    
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd68 	bl	8001804 <ConfigCommandParsing>
 8001d34:	e768      	b.n	8001c08 <Attribute_Modified_CB+0x90>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 8001d36:	4d0e      	ldr	r5, [pc, #56]	; (8001d70 <Attribute_Modified_CB+0x1f8>)
 8001d38:	4c0b      	ldr	r4, [pc, #44]	; (8001d68 <Attribute_Modified_CB+0x1f0>)
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	6028      	str	r0, [r5, #0]
 8001d3e:	6069      	str	r1, [r5, #4]
 8001d40:	60aa      	str	r2, [r5, #8]
 8001d42:	60eb      	str	r3, [r5, #12]
 8001d44:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001d46:	6128      	str	r0, [r5, #16]
 8001d48:	6169      	str	r1, [r5, #20]
 8001d4a:	61aa      	str	r2, [r5, #24]
 8001d4c:	7823      	ldrb	r3, [r4, #0]
 8001d4e:	772b      	strb	r3, [r5, #28]
 8001d50:	211c      	movs	r1, #28
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <Attribute_Modified_CB+0x200>)
 8001d54:	6019      	str	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001d56:	4628      	mov	r0, r5
 8001d58:	f7ff fa5c 	bl	8001214 <Stderr_Update>
 8001d5c:	e754      	b.n	8001c08 <Attribute_Modified_CB+0x90>
 8001d5e:	bf00      	nop
 8001d60:	20000218 	.word	0x20000218
 8001d64:	20000210 	.word	0x20000210
 8001d68:	08009ef8 	.word	0x08009ef8
 8001d6c:	08009ed4 	.word	0x08009ed4
 8001d70:	20000938 	.word	0x20000938
 8001d74:	08009ed8 	.word	0x08009ed8
 8001d78:	20000a38 	.word	0x20000a38
 8001d7c:	200008ec 	.word	0x200008ec
 8001d80:	08009ed0 	.word	0x08009ed0
 8001d84:	08009ee8 	.word	0x08009ee8
 8001d88:	200005d4 	.word	0x200005d4

08001d8c <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 8001d8c:	b508      	push	{r3, lr}
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8001d8e:	7803      	ldrb	r3, [r0, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d000      	beq.n	8001d96 <HCI_Event_CB+0xa>
        break;
      }
    }
    break;
  }
}
 8001d94:	bd08      	pop	{r3, pc}
  switch(event_pckt->evt)
 8001d96:	7843      	ldrb	r3, [r0, #1]
 8001d98:	2b3e      	cmp	r3, #62	; 0x3e
 8001d9a:	d006      	beq.n	8001daa <HCI_Event_CB+0x1e>
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 8001d9e:	d00d      	beq.n	8001dbc <HCI_Event_CB+0x30>
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d1f7      	bne.n	8001d94 <HCI_Event_CB+0x8>
      GAP_DisconnectionComplete_CB();
 8001da4:	f7ff f968 	bl	8001078 <GAP_DisconnectionComplete_CB>
    break;
 8001da8:	e7f4      	b.n	8001d94 <HCI_Event_CB+0x8>
      switch(evt->subevent)
 8001daa:	78c3      	ldrb	r3, [r0, #3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d1f1      	bne.n	8001d94 <HCI_Event_CB+0x8>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001db0:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8001db4:	3009      	adds	r0, #9
 8001db6:	f7ff f98b 	bl	80010d0 <GAP_ConnectionComplete_CB>
        break;
 8001dba:	e7eb      	b.n	8001d94 <HCI_Event_CB+0x8>
      switch(blue_evt->ecode)
 8001dbc:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8001dc0:	f640 4201 	movw	r2, #3073	; 0xc01
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d008      	beq.n	8001dda <HCI_Event_CB+0x4e>
 8001dc8:	f640 4214 	movw	r2, #3092	; 0xc14
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d1e1      	bne.n	8001d94 <HCI_Event_CB+0x8>
          Read_Request_CB(pr->attr_handle);                    
 8001dd0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8001dd4:	f7ff fdf0 	bl	80019b8 <Read_Request_CB>
        break;
 8001dd8:	e7dc      	b.n	8001d94 <HCI_Event_CB+0x8>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8001dda:	7a42      	ldrb	r2, [r0, #9]
 8001ddc:	f100 010c 	add.w	r1, r0, #12
 8001de0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8001de4:	f7ff fec8 	bl	8001b78 <Attribute_Modified_CB>
        break;
 8001de8:	e7d4      	b.n	8001d94 <HCI_Event_CB+0x8>
	...

08001dec <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8001dec:	b500      	push	{lr}
 8001dee:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_TIM_OC_MspInit+0x30>)
 8001df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df8:	661a      	str	r2, [r3, #96]	; 0x60
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2108      	movs	r1, #8
 8001e08:	201b      	movs	r0, #27
 8001e0a:	f001 fe9d 	bl	8003b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e0e:	201b      	movs	r0, #27
 8001e10:	f001 fece 	bl	8003bb0 <HAL_NVIC_EnableIRQ>
}
 8001e14:	b003      	add	sp, #12
 8001e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e20:	4770      	bx	lr

08001e22 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler>

08001e24 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler>

08001e26 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001e26:	e7fe      	b.n	8001e26 <BusFault_Handler>

08001e28 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler>

08001e2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	4770      	bx	lr

08001e2e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e32:	f001 fe61 	bl	8003af8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001e36:	f001 fef2 	bl	8003c1e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bd08      	pop	{r3, pc}

08001e3c <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8001e3c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM1_CC_IRQHandler+0xc>)
 8001e40:	f005 f90a 	bl	8007058 <HAL_TIM_IRQHandler>
}
 8001e44:	bd08      	pop	{r3, pc}
 8001e46:	bf00      	nop
 8001e48:	200008ec 	.word	0x200008ec

08001e4c <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8001e4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 8001e4e:	4802      	ldr	r0, [pc, #8]	; (8001e58 <EXTI9_5_IRQHandler+0xc>)
 8001e50:	f001 ff20 	bl	8003c94 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e54:	bd08      	pop	{r3, pc}
 8001e56:	bf00      	nop
 8001e58:	200008d8 	.word	0x200008d8

08001e5c <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8001e5c:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 8001e5e:	4802      	ldr	r0, [pc, #8]	; (8001e68 <OTG_FS_IRQHandler+0xc>)
 8001e60:	f003 f832 	bl	8004ec8 <HAL_PCD_IRQHandler>
}
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	2000228c 	.word	0x2000228c

08001e6c <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8001e6c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM3_IRQHandler+0xc>)
 8001e70:	f005 f8f2 	bl	8007058 <HAL_TIM_IRQHandler>
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	20002240 	.word	0x20002240

08001e7c <I2C3_EV_IRQHandler>:

/**
* @brief This function handles I2C3 event interrupt.
*/
void I2C3_EV_IRQHandler(void)
{
 8001e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <I2C3_EV_IRQHandler+0xc>)
 8001e80:	f002 fc76 	bl	8004770 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e84:	bd08      	pop	{r3, pc}
 8001e86:	bf00      	nop
 8001e88:	20002694 	.word	0x20002694

08001e8c <I2C3_ER_IRQHandler>:

/**
* @brief This function handles I2C3 error interrupt.
*/
void I2C3_ER_IRQHandler(void)
{
 8001e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 8001e8e:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2C3_ER_IRQHandler+0xc>)
 8001e90:	f002 ff35 	bl	8004cfe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop
 8001e98:	20002694 	.word	0x20002694

08001e9c <CDC_Fill_Buffer>:
  */
uint8_t CDC_Fill_Buffer(uint8_t* Buf, uint32_t TotalLen)
{
  uint16_t i;
  
  for (i = 0; i < TotalLen; i++)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d210      	bcs.n	8001ec4 <CDC_Fill_Buffer+0x28>
{
 8001ea2:	b470      	push	{r4, r5, r6}
  {
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8001ea4:	4c08      	ldr	r4, [pc, #32]	; (8001ec8 <CDC_Fill_Buffer+0x2c>)
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	5c86      	ldrb	r6, [r0, r2]
 8001eaa:	4d08      	ldr	r5, [pc, #32]	; (8001ecc <CDC_Fill_Buffer+0x30>)
 8001eac:	54ee      	strb	r6, [r5, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb4:	6023      	str	r3, [r4, #0]
  for (i = 0; i < TotalLen; i++)
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	b292      	uxth	r2, r2
 8001eba:	428a      	cmp	r2, r1
 8001ebc:	d3f2      	bcc.n	8001ea4 <CDC_Fill_Buffer+0x8>
  }
  return (USBD_OK);
}
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	bc70      	pop	{r4, r5, r6}
 8001ec2:	4770      	bx	lr
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4770      	bx	lr
 8001ec8:	20000260 	.word	0x20000260
 8001ecc:	20001240 	.word	0x20001240

08001ed0 <CDC_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <CDC_TIM_PeriodElapsedCallback+0x44>)
 8001ed4:	6853      	ldr	r3, [r2, #4]
 8001ed6:	6814      	ldr	r4, [r2, #0]
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	d014      	beq.n	8001f06 <CDC_TIM_PeriodElapsedCallback+0x36>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8001edc:	d914      	bls.n	8001f08 <CDC_TIM_PeriodElapsedCallback+0x38>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8001ede:	f5c3 6400 	rsb	r4, r3, #2048	; 0x800
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
    }
    
    buffptr = UserTxBufPtrOut;
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8001ee2:	4d0d      	ldr	r5, [pc, #52]	; (8001f18 <CDC_TIM_PeriodElapsedCallback+0x48>)
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8001ee8:	4419      	add	r1, r3
 8001eea:	4628      	mov	r0, r5
 8001eec:	f005 ff22 	bl	8007d34 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f005 ff27 	bl	8007d44 <USBD_CDC_TransmitPacket>
 8001ef6:	b930      	cbnz	r0, 8001f06 <CDC_TIM_PeriodElapsedCallback+0x36>
    {
      UserTxBufPtrOut += buffsize;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <CDC_TIM_PeriodElapsedCallback+0x44>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4422      	add	r2, r4
 8001efe:	605a      	str	r2, [r3, #4]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8001f00:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f04:	d002      	beq.n	8001f0c <CDC_TIM_PeriodElapsedCallback+0x3c>
      {
        UserTxBufPtrOut = 0;
      }
    }
  }
}
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8001f08:	1ae4      	subs	r4, r4, r3
 8001f0a:	e7ea      	b.n	8001ee2 <CDC_TIM_PeriodElapsedCallback+0x12>
        UserTxBufPtrOut = 0;
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
}
 8001f10:	e7f9      	b.n	8001f06 <CDC_TIM_PeriodElapsedCallback+0x36>
 8001f12:	bf00      	nop
 8001f14:	20000260 	.word	0x20000260
 8001f18:	20000608 	.word	0x20000608
 8001f1c:	20001240 	.word	0x20001240

08001f20 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8001f22:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8001f26:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f2a:	f005 ff36 	bl	8007d9a <USBD_LL_SetupStage>
}
 8001f2e:	bd08      	pop	{r3, pc}

08001f30 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f30:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001f32:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001f36:	0093      	lsls	r3, r2, #2
 8001f38:	4403      	add	r3, r0
 8001f3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001f3e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f42:	f005 ff56 	bl	8007df2 <USBD_LL_DataOutStage>
}
 8001f46:	bd08      	pop	{r3, pc}

08001f48 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f48:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001f4a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001f4e:	0093      	lsls	r3, r2, #2
 8001f50:	4403      	add	r3, r0
 8001f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f54:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f58:	f005 ff84 	bl	8007e64 <USBD_LL_DataInStage>
}
 8001f5c:	bd08      	pop	{r3, pc}

08001f5e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001f5e:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 8001f60:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f64:	f006 f819 	bl	8007f9a <USBD_LL_SOF>
}
 8001f68:	bd08      	pop	{r3, pc}

08001f6a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8001f6a:	b510      	push	{r4, lr}
 8001f6c:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8001f6e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f72:	f005 ffd2 	bl	8007f1a <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8001f76:	2101      	movs	r1, #1
 8001f78:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001f7c:	f005 fff6 	bl	8007f6c <USBD_LL_SetSpeed>
}
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001f82:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 8001f84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f88:	f005 fff3 	bl	8007f72 <USBD_LL_Suspend>
}
 8001f8c:	bd08      	pop	{r3, pc}

08001f8e <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 8001f90:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001f94:	f005 fff6 	bl	8007f84 <USBD_LL_Resume>
}
 8001f98:	bd08      	pop	{r3, pc}

08001f9a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f9a:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8001f9c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001fa0:	f006 f80b 	bl	8007fba <USBD_LL_IsoOUTIncomplete>
}
 8001fa4:	bd08      	pop	{r3, pc}

08001fa6 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001fa6:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001fa8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001fac:	f006 f803 	bl	8007fb6 <USBD_LL_IsoINIncomplete>
}
 8001fb0:	bd08      	pop	{r3, pc}

08001fb2 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8001fb4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001fb8:	f006 f801 	bl	8007fbe <USBD_LL_DevConnected>
}
 8001fbc:	bd08      	pop	{r3, pc}

08001fbe <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001fbe:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 8001fc0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001fc4:	f005 fffd 	bl	8007fc2 <USBD_LL_DevDisconnected>
}
 8001fc8:	bd08      	pop	{r3, pc}

08001fca <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8001fca:	b510      	push	{r4, lr}
 8001fcc:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 8001fce:	4613      	mov	r3, r2
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001fd6:	f003 f9e3 	bl	80053a0 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8001fda:	2000      	movs	r0, #0
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001fde:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001fe0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001fe4:	f003 fa5e 	bl	80054a4 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8001fe8:	2000      	movs	r0, #0
 8001fea:	bd08      	pop	{r3, pc}

08001fec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001fec:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001fee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001ff2:	f003 fa97 	bl	8005524 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	bd08      	pop	{r3, pc}

08001ffa <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001ffa:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8001ffe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002002:	d108      	bne.n	8002016 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002004:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002008:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800200c:	008a      	lsls	r2, r1, #2
 800200e:	4413      	add	r3, r2
 8002010:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8002014:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002016:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800201a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800201e:	008a      	lsls	r2, r1, #2
 8002020:	4413      	add	r3, r2
 8002022:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8002026:	4770      	bx	lr

08002028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002028:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800202a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800202e:	f003 f9a3 	bl	8005378 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8002032:	2000      	movs	r0, #0
 8002034:	bd08      	pop	{r3, pc}

08002036 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8002036:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002038:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800203c:	f003 fa13 	bl	8005466 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8002040:	2000      	movs	r0, #0
 8002042:	bd08      	pop	{r3, pc}

08002044 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8002044:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002046:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800204a:	f003 f9ea 	bl	8005422 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800204e:	2000      	movs	r0, #0
 8002050:	bd08      	pop	{r3, pc}
	...

08002054 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 8002058:	2000      	movs	r0, #0
 800205a:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 800205c:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 800205e:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <HTS221_GetCapabilities+0x18>)
 8002062:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002064:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002066:	2300      	movs	r3, #0
 8002068:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 800206a:	4770      	bx	lr
 800206c:	41480000 	.word	0x41480000

08002070 <Linear_Interpolation>:
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002070:	edd0 6a03 	vldr	s13, [r0, #12]
 8002074:	edd0 7a01 	vldr	s15, [r0, #4]
 8002078:	ee36 7ae7 	vsub.f32	s14, s13, s15
 800207c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002080:	ed90 7a02 	vldr	s14, [r0, #8]
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	ed90 6a00 	vldr	s12, [r0]
 800208c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002090:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002094:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002098:	ee37 0a46 	vsub.f32	s0, s14, s12
}
 800209c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80020a0:	4770      	bx	lr

080020a2 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020a2:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80020a4:	6884      	ldr	r4, [r0, #8]
 80020a6:	b12c      	cbz	r4, 80020b4 <ReadRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80020a8:	6944      	ldr	r4, [r0, #20]
 80020aa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80020ae:	7b00      	ldrb	r0, [r0, #12]
 80020b0:	47a0      	blx	r4
  }
}
 80020b2:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80020b4:	6944      	ldr	r4, [r0, #20]
 80020b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020ba:	7b00      	ldrb	r0, [r0, #12]
 80020bc:	47a0      	blx	r4
 80020be:	e7f8      	b.n	80020b2 <ReadRegWrap+0x10>

080020c0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020c0:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80020c2:	6884      	ldr	r4, [r0, #8]
 80020c4:	b12c      	cbz	r4, 80020d2 <WriteRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80020c6:	6904      	ldr	r4, [r0, #16]
 80020c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80020cc:	7b00      	ldrb	r0, [r0, #12]
 80020ce:	47a0      	blx	r4
  }
}
 80020d0:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80020d2:	6904      	ldr	r4, [r0, #16]
 80020d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020d8:	7b00      	ldrb	r0, [r0, #12]
 80020da:	47a0      	blx	r4
 80020dc:	e7f8      	b.n	80020d0 <WriteRegWrap+0x10>

080020de <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 80020de:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d012      	beq.n	800210c <HTS221_HUM_Enable+0x2e>
{
 80020e6:	b510      	push	{r4, lr}
 80020e8:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80020ea:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80020ee:	b123      	cbz	r3, 80020fa <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 80020f6:	2000      	movs	r0, #0
}
 80020f8:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80020fa:	2101      	movs	r1, #1
 80020fc:	301c      	adds	r0, #28
 80020fe:	f000 fa72 	bl	80025e6 <hts221_power_on_set>
 8002102:	2800      	cmp	r0, #0
 8002104:	d0f4      	beq.n	80020f0 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8002106:	f04f 30ff 	mov.w	r0, #4294967295
 800210a:	e7f5      	b.n	80020f8 <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 800210c:	2000      	movs	r0, #0
}
 800210e:	4770      	bx	lr

08002110 <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 8002110:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002114:	b18b      	cbz	r3, 800213a <HTS221_HUM_Disable+0x2a>
{
 8002116:	b510      	push	{r4, lr}
 8002118:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800211a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800211e:	b11b      	cbz	r3, 8002128 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8002120:	2000      	movs	r0, #0
 8002122:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8002126:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	301c      	adds	r0, #28
 800212c:	f000 fa5b 	bl	80025e6 <hts221_power_on_set>
 8002130:	2800      	cmp	r0, #0
 8002132:	d0f5      	beq.n	8002120 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	e7f5      	b.n	8002126 <HTS221_HUM_Disable+0x16>
    return HTS221_OK;
 800213a:	2000      	movs	r0, #0
}
 800213c:	4770      	bx	lr

0800213e <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 800213e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002142:	2b01      	cmp	r3, #1
 8002144:	d012      	beq.n	800216c <HTS221_TEMP_Enable+0x2e>
{
 8002146:	b510      	push	{r4, lr}
 8002148:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800214a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800214e:	b123      	cbz	r3, 800215a <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8002150:	2301      	movs	r3, #1
 8002152:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 8002156:	2000      	movs	r0, #0
}
 8002158:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800215a:	2101      	movs	r1, #1
 800215c:	301c      	adds	r0, #28
 800215e:	f000 fa42 	bl	80025e6 <hts221_power_on_set>
 8002162:	2800      	cmp	r0, #0
 8002164:	d0f4      	beq.n	8002150 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8002166:	f04f 30ff 	mov.w	r0, #4294967295
 800216a:	e7f5      	b.n	8002158 <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 800216c:	2000      	movs	r0, #0
}
 800216e:	4770      	bx	lr

08002170 <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8002170:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002174:	b18b      	cbz	r3, 800219a <HTS221_TEMP_Disable+0x2a>
{
 8002176:	b510      	push	{r4, lr}
 8002178:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800217a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800217e:	b11b      	cbz	r3, 8002188 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002180:	2000      	movs	r0, #0
 8002182:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8002186:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002188:	2100      	movs	r1, #0
 800218a:	301c      	adds	r0, #28
 800218c:	f000 fa2b 	bl	80025e6 <hts221_power_on_set>
 8002190:	2800      	cmp	r0, #0
 8002192:	d0f5      	beq.n	8002180 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	e7f5      	b.n	8002186 <HTS221_TEMP_Disable+0x16>
    return HTS221_OK;
 800219a:	2000      	movs	r0, #0
}
 800219c:	4770      	bx	lr

0800219e <HTS221_DeInit>:
{
 800219e:	b510      	push	{r4, lr}
 80021a0:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80021a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d003      	beq.n	80021b2 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80021aa:	2000      	movs	r0, #0
 80021ac:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80021b0:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80021b2:	f7ff ffad 	bl	8002110 <HTS221_HUM_Disable>
 80021b6:	b938      	cbnz	r0, 80021c8 <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7ff ffd9 	bl	8002170 <HTS221_TEMP_Disable>
 80021be:	2800      	cmp	r0, #0
 80021c0:	d0f3      	beq.n	80021aa <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	e7f3      	b.n	80021b0 <HTS221_DeInit+0x12>
      return HTS221_ERROR;
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	e7f0      	b.n	80021b0 <HTS221_DeInit+0x12>

080021ce <HTS221_SetOutputDataRate>:
{
 80021ce:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80021d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	d908      	bls.n	80021f0 <HTS221_SetOutputDataRate+0x22>
 80021de:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80021e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	d809      	bhi.n	8002200 <HTS221_SetOutputDataRate+0x32>
 80021ec:	2102      	movs	r1, #2
 80021ee:	e000      	b.n	80021f2 <HTS221_SetOutputDataRate+0x24>
 80021f0:	2101      	movs	r1, #1
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80021f2:	301c      	adds	r0, #28
 80021f4:	f000 f988 	bl	8002508 <hts221_data_rate_set>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b918      	cbnz	r0, 8002204 <HTS221_SetOutputDataRate+0x36>
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002200:	2103      	movs	r1, #3
 8002202:	e7f6      	b.n	80021f2 <HTS221_SetOutputDataRate+0x24>
    return HTS221_ERROR;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	e7f8      	b.n	80021fc <HTS221_SetOutputDataRate+0x2e>

0800220a <HTS221_Initialize>:
{
 800220a:	b538      	push	{r3, r4, r5, lr}
 800220c:	4605      	mov	r5, r0
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800220e:	f100 041c 	add.w	r4, r0, #28
 8002212:	2100      	movs	r1, #0
 8002214:	4620      	mov	r0, r4
 8002216:	f000 f9e6 	bl	80025e6 <hts221_power_on_set>
 800221a:	b980      	cbnz	r0, 800223e <HTS221_Initialize+0x34>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800221c:	2101      	movs	r1, #1
 800221e:	4620      	mov	r0, r4
 8002220:	f000 f9b0 	bl	8002584 <hts221_block_data_update_set>
 8002224:	b970      	cbnz	r0, 8002244 <HTS221_Initialize+0x3a>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002226:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff ffcf 	bl	80021ce <HTS221_SetOutputDataRate>
 8002230:	4603      	mov	r3, r0
 8002232:	b908      	cbnz	r0, 8002238 <HTS221_Initialize+0x2e>
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd38      	pop	{r3, r4, r5, pc}
    return HTS221_ERROR;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e7fa      	b.n	8002234 <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e7f7      	b.n	8002234 <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	e7f4      	b.n	8002234 <HTS221_Initialize+0x2a>

0800224a <HTS221_Init>:
{
 800224a:	b510      	push	{r4, lr}
 800224c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800224e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002252:	b123      	cbz	r3, 800225e <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 800225a:	2000      	movs	r0, #0
}
 800225c:	bd10      	pop	{r4, pc}
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800225e:	f7ff ffd4 	bl	800220a <HTS221_Initialize>
 8002262:	2800      	cmp	r0, #0
 8002264:	d0f6      	beq.n	8002254 <HTS221_Init+0xa>
      return HTS221_ERROR;
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	e7f7      	b.n	800225c <HTS221_Init+0x12>

0800226c <HTS221_HUM_SetOutputDataRate>:
{
 800226c:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 800226e:	f7ff ffae 	bl	80021ce <HTS221_SetOutputDataRate>
}
 8002272:	bd08      	pop	{r3, pc}

08002274 <HTS221_TEMP_SetOutputDataRate>:
{
 8002274:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002276:	f7ff ffaa 	bl	80021ce <HTS221_SetOutputDataRate>
}
 800227a:	bd08      	pop	{r3, pc}

0800227c <HTS221_ReadID>:
{
 800227c:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800227e:	301c      	adds	r0, #28
 8002280:	f000 f9aa 	bl	80025d8 <hts221_device_id_get>
 8002284:	4603      	mov	r3, r0
 8002286:	b908      	cbnz	r0, 800228c <HTS221_ReadID+0x10>
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd08      	pop	{r3, pc}
    return HTS221_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e7fa      	b.n	8002288 <HTS221_ReadID+0xc>
	...

08002294 <HTS221_GetOutputDataRate>:
{
 8002294:	b510      	push	{r4, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800229a:	f10d 0107 	add.w	r1, sp, #7
 800229e:	301c      	adds	r0, #28
 80022a0:	f000 f94e 	bl	8002540 <hts221_data_rate_get>
 80022a4:	b9b8      	cbnz	r0, 80022d6 <HTS221_GetOutputDataRate+0x42>
 80022a6:	4602      	mov	r2, r0
  switch (odr_low_level)
 80022a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d815      	bhi.n	80022dc <HTS221_GetOutputDataRate+0x48>
 80022b0:	e8df f003 	tbb	[pc, r3]
 80022b4:	0e0b0702 	.word	0x0e0b0702
      *Odr = 0.0f;
 80022b8:	2300      	movs	r3, #0
 80022ba:	6023      	str	r3, [r4, #0]
}
 80022bc:	4610      	mov	r0, r2
 80022be:	b002      	add	sp, #8
 80022c0:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80022c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022c6:	6023      	str	r3, [r4, #0]
      break;
 80022c8:	e7f8      	b.n	80022bc <HTS221_GetOutputDataRate+0x28>
      *Odr = 7.0f;
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HTS221_GetOutputDataRate+0x50>)
 80022cc:	6023      	str	r3, [r4, #0]
      break;
 80022ce:	e7f5      	b.n	80022bc <HTS221_GetOutputDataRate+0x28>
      *Odr = 12.5f;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HTS221_GetOutputDataRate+0x54>)
 80022d2:	6023      	str	r3, [r4, #0]
      break;
 80022d4:	e7f2      	b.n	80022bc <HTS221_GetOutputDataRate+0x28>
    return HTS221_ERROR;
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	e7ef      	b.n	80022bc <HTS221_GetOutputDataRate+0x28>
      ret = HTS221_ERROR;
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	e7ec      	b.n	80022bc <HTS221_GetOutputDataRate+0x28>
 80022e2:	bf00      	nop
 80022e4:	40e00000 	.word	0x40e00000
 80022e8:	41480000 	.word	0x41480000

080022ec <HTS221_HUM_GetOutputDataRate>:
{
 80022ec:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80022ee:	f7ff ffd1 	bl	8002294 <HTS221_GetOutputDataRate>
}
 80022f2:	bd08      	pop	{r3, pc}

080022f4 <HTS221_TEMP_GetOutputDataRate>:
{
 80022f4:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80022f6:	f7ff ffcd 	bl	8002294 <HTS221_GetOutputDataRate>
}
 80022fa:	bd08      	pop	{r3, pc}

080022fc <HTS221_HUM_GetHumidity>:
{
 80022fc:	b530      	push	{r4, r5, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002302:	f100 041c 	add.w	r4, r0, #28
 8002306:	a904      	add	r1, sp, #16
 8002308:	4620      	mov	r0, r4
 800230a:	f000 f9e0 	bl	80026ce <hts221_hum_adc_point_0_get>
 800230e:	2800      	cmp	r0, #0
 8002310:	d15a      	bne.n	80023c8 <HTS221_HUM_GetHumidity+0xcc>
  lin_hum.x0 = (float)coeff.i16bit;
 8002312:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231e:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002322:	a904      	add	r1, sp, #16
 8002324:	4620      	mov	r0, r4
 8002326:	f000 f97a 	bl	800261e <hts221_hum_rh_point_0_get>
 800232a:	2800      	cmp	r0, #0
 800232c:	d14f      	bne.n	80023ce <HTS221_HUM_GetHumidity+0xd2>
  lin_hum.y0 = (float)coeff.u8bit[0];
 800232e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233a:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800233e:	a904      	add	r1, sp, #16
 8002340:	4620      	mov	r0, r4
 8002342:	f000 f9cb 	bl	80026dc <hts221_hum_adc_point_1_get>
 8002346:	2800      	cmp	r0, #0
 8002348:	d144      	bne.n	80023d4 <HTS221_HUM_GetHumidity+0xd8>
  lin_hum.x1 = (float)coeff.i16bit;
 800234a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002356:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800235a:	a904      	add	r1, sp, #16
 800235c:	4620      	mov	r0, r4
 800235e:	f000 f969 	bl	8002634 <hts221_hum_rh_point_1_get>
 8002362:	bbd0      	cbnz	r0, 80023da <HTS221_HUM_GetHumidity+0xde>
  lin_hum.y1 = (float)coeff.u8bit[0];
 8002364:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8002374:	2300      	movs	r3, #0
 8002376:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 800237a:	a905      	add	r1, sp, #20
 800237c:	4620      	mov	r0, r4
 800237e:	f000 f91d 	bl	80025bc <hts221_humidity_raw_get>
 8002382:	4604      	mov	r4, r0
 8002384:	bb60      	cbnz	r0, 80023e0 <HTS221_HUM_GetHumidity+0xe4>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002386:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800238a:	ee00 3a10 	vmov	s0, r3
 800238e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002392:	4668      	mov	r0, sp
 8002394:	f7ff fe6c 	bl	8002070 <Linear_Interpolation>
 8002398:	ed85 0a00 	vstr	s0, [r5]
  if (*Value < 0.0f)
 800239c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	d40d      	bmi.n	80023c2 <HTS221_HUM_GetHumidity+0xc6>
  if (*Value > 100.0f)
 80023a6:	ed95 7a00 	vldr	s14, [r5]
 80023aa:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80023e8 <HTS221_HUM_GetHumidity+0xec>
 80023ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	dd01      	ble.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
    *Value = 100.0f;
 80023b8:	edc5 7a00 	vstr	s15, [r5]
}
 80023bc:	4620      	mov	r0, r4
 80023be:	b007      	add	sp, #28
 80023c0:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 80023c2:	2300      	movs	r3, #0
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	e7ee      	b.n	80023a6 <HTS221_HUM_GetHumidity+0xaa>
    return HTS221_ERROR;
 80023c8:	f04f 34ff 	mov.w	r4, #4294967295
 80023cc:	e7f6      	b.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80023ce:	f04f 34ff 	mov.w	r4, #4294967295
 80023d2:	e7f3      	b.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80023d4:	f04f 34ff 	mov.w	r4, #4294967295
 80023d8:	e7f0      	b.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80023da:	f04f 34ff 	mov.w	r4, #4294967295
 80023de:	e7ed      	b.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 80023e0:	f04f 34ff 	mov.w	r4, #4294967295
 80023e4:	e7ea      	b.n	80023bc <HTS221_HUM_GetHumidity+0xc0>
 80023e6:	bf00      	nop
 80023e8:	42c80000 	.word	0x42c80000

080023ec <HTS221_TEMP_GetTemperature>:
{
 80023ec:	b530      	push	{r4, r5, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80023f2:	f100 041c 	add.w	r4, r0, #28
 80023f6:	a904      	add	r1, sp, #16
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 f976 	bl	80026ea <hts221_temp_adc_point_0_get>
 80023fe:	2800      	cmp	r0, #0
 8002400:	d145      	bne.n	800248e <HTS221_TEMP_GetTemperature+0xa2>
  lin_temp.x0 = (float)coeff.i16bit;
 8002402:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002412:	a904      	add	r1, sp, #16
 8002414:	4620      	mov	r0, r4
 8002416:	f000 f918 	bl	800264a <hts221_temp_deg_point_0_get>
 800241a:	bbd8      	cbnz	r0, 8002494 <HTS221_TEMP_GetTemperature+0xa8>
  lin_temp.y0 = (float)coeff.u8bit[0];
 800241c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002428:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800242c:	a904      	add	r1, sp, #16
 800242e:	4620      	mov	r0, r4
 8002430:	f000 f962 	bl	80026f8 <hts221_temp_adc_point_1_get>
 8002434:	bb88      	cbnz	r0, 800249a <HTS221_TEMP_GetTemperature+0xae>
  lin_temp.x1 = (float)coeff.i16bit;
 8002436:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8002446:	a904      	add	r1, sp, #16
 8002448:	4620      	mov	r0, r4
 800244a:	f000 f91f 	bl	800268c <hts221_temp_deg_point_1_get>
 800244e:	bb38      	cbnz	r0, 80024a0 <HTS221_TEMP_GetTemperature+0xb4>
  lin_temp.y1 = (float)coeff.u8bit[0];
 8002450:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002460:	2300      	movs	r3, #0
 8002462:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8002466:	a905      	add	r1, sp, #20
 8002468:	4620      	mov	r0, r4
 800246a:	f000 f8ae 	bl	80025ca <hts221_temperature_raw_get>
 800246e:	4604      	mov	r4, r0
 8002470:	b9c8      	cbnz	r0, 80024a6 <HTS221_TEMP_GetTemperature+0xba>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002472:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8002476:	ee00 3a10 	vmov	s0, r3
 800247a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800247e:	4668      	mov	r0, sp
 8002480:	f7ff fdf6 	bl	8002070 <Linear_Interpolation>
 8002484:	ed85 0a00 	vstr	s0, [r5]
}
 8002488:	4620      	mov	r0, r4
 800248a:	b007      	add	sp, #28
 800248c:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 800248e:	f04f 34ff 	mov.w	r4, #4294967295
 8002492:	e7f9      	b.n	8002488 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 8002494:	f04f 34ff 	mov.w	r4, #4294967295
 8002498:	e7f6      	b.n	8002488 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 800249a:	f04f 34ff 	mov.w	r4, #4294967295
 800249e:	e7f3      	b.n	8002488 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80024a0:	f04f 34ff 	mov.w	r4, #4294967295
 80024a4:	e7f0      	b.n	8002488 <HTS221_TEMP_GetTemperature+0x9c>
    return HTS221_ERROR;
 80024a6:	f04f 34ff 	mov.w	r4, #4294967295
 80024aa:	e7ed      	b.n	8002488 <HTS221_TEMP_GetTemperature+0x9c>

080024ac <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 80024ac:	b1b8      	cbz	r0, 80024de <HTS221_RegisterBusIO+0x32>
{
 80024ae:	b508      	push	{r3, lr}
 80024b0:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80024b2:	680a      	ldr	r2, [r1, #0]
 80024b4:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024b6:	6848      	ldr	r0, [r1, #4]
 80024b8:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024ba:	6888      	ldr	r0, [r1, #8]
 80024bc:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80024be:	7b08      	ldrb	r0, [r1, #12]
 80024c0:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024c2:	6908      	ldr	r0, [r1, #16]
 80024c4:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024c6:	6948      	ldr	r0, [r1, #20]
 80024c8:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024ca:	6989      	ldr	r1, [r1, #24]
 80024cc:	6199      	str	r1, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80024ce:	4907      	ldr	r1, [pc, #28]	; (80024ec <HTS221_RegisterBusIO+0x40>)
 80024d0:	6219      	str	r1, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80024d2:	4907      	ldr	r1, [pc, #28]	; (80024f0 <HTS221_RegisterBusIO+0x44>)
 80024d4:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80024d6:	625b      	str	r3, [r3, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 80024d8:	b122      	cbz	r2, 80024e4 <HTS221_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 80024da:	4790      	blx	r2
}
 80024dc:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024e2:	4770      	bx	lr
      ret = HTS221_ERROR;
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80024e8:	e7f8      	b.n	80024dc <HTS221_RegisterBusIO+0x30>
 80024ea:	bf00      	nop
 80024ec:	080020a3 	.word	0x080020a3
 80024f0:	080020c1 	.word	0x080020c1

080024f4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80024f4:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024f6:	6844      	ldr	r4, [r0, #4]
 80024f8:	6880      	ldr	r0, [r0, #8]
 80024fa:	47a0      	blx	r4
  return ret;
}
 80024fc:	bd10      	pop	{r4, pc}

080024fe <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80024fe:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002500:	6804      	ldr	r4, [r0, #0]
 8002502:	6880      	ldr	r0, [r0, #8]
 8002504:	47a0      	blx	r4
  return ret;
}
 8002506:	bd10      	pop	{r4, pc}

08002508 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002508:	b530      	push	{r4, r5, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	4604      	mov	r4, r0
 800250e:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002510:	2301      	movs	r3, #1
 8002512:	aa01      	add	r2, sp, #4
 8002514:	2120      	movs	r1, #32
 8002516:	f7ff ffed 	bl	80024f4 <hts221_read_reg>

  if(ret == 0){
 800251a:	4603      	mov	r3, r0
 800251c:	b110      	cbz	r0, 8002524 <hts221_data_rate_set+0x1c>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 800251e:	4618      	mov	r0, r3
 8002520:	b003      	add	sp, #12
 8002522:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8002524:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002528:	f365 0301 	bfi	r3, r5, #0, #2
 800252c:	aa02      	add	r2, sp, #8
 800252e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002532:	2301      	movs	r3, #1
 8002534:	2120      	movs	r1, #32
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff ffe1 	bl	80024fe <hts221_write_reg>
 800253c:	4603      	mov	r3, r0
  return ret;
 800253e:	e7ee      	b.n	800251e <hts221_data_rate_set+0x16>

08002540 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002540:	b510      	push	{r4, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002546:	2301      	movs	r3, #1
 8002548:	aa01      	add	r2, sp, #4
 800254a:	2120      	movs	r1, #32
 800254c:	f7ff ffd2 	bl	80024f4 <hts221_read_reg>

  switch (reg.odr) {
 8002550:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d810      	bhi.n	800257e <hts221_data_rate_get+0x3e>
 800255c:	e8df f003 	tbb	[pc, r3]
 8002560:	0c090602 	.word	0x0c090602
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002564:	2300      	movs	r3, #0
 8002566:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8002568:	b002      	add	sp, #8
 800256a:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 800256c:	2301      	movs	r3, #1
 800256e:	7023      	strb	r3, [r4, #0]
      break;
 8002570:	e7fa      	b.n	8002568 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 8002572:	2302      	movs	r3, #2
 8002574:	7023      	strb	r3, [r4, #0]
      break;
 8002576:	e7f7      	b.n	8002568 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 8002578:	2303      	movs	r3, #3
 800257a:	7023      	strb	r3, [r4, #0]
      break;
 800257c:	e7f4      	b.n	8002568 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 800257e:	2304      	movs	r3, #4
 8002580:	7023      	strb	r3, [r4, #0]
  return ret;
 8002582:	e7f1      	b.n	8002568 <hts221_data_rate_get+0x28>

08002584 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002584:	b530      	push	{r4, r5, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800258c:	2301      	movs	r3, #1
 800258e:	aa01      	add	r2, sp, #4
 8002590:	2120      	movs	r1, #32
 8002592:	f7ff ffaf 	bl	80024f4 <hts221_read_reg>

  if(ret == 0){
 8002596:	4603      	mov	r3, r0
 8002598:	b110      	cbz	r0, 80025a0 <hts221_block_data_update_set+0x1c>
    reg.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 800259a:	4618      	mov	r0, r3
 800259c:	b003      	add	sp, #12
 800259e:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80025a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025a4:	f365 0382 	bfi	r3, r5, #2, #1
 80025a8:	aa02      	add	r2, sp, #8
 80025aa:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80025ae:	2301      	movs	r3, #1
 80025b0:	2120      	movs	r1, #32
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7ff ffa3 	bl	80024fe <hts221_write_reg>
 80025b8:	4603      	mov	r3, r0
  return ret;
 80025ba:	e7ee      	b.n	800259a <hts221_block_data_update_set+0x16>

080025bc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80025bc:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80025be:	2302      	movs	r3, #2
 80025c0:	460a      	mov	r2, r1
 80025c2:	2128      	movs	r1, #40	; 0x28
 80025c4:	f7ff ff96 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80025c8:	bd08      	pop	{r3, pc}

080025ca <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80025ca:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80025cc:	2302      	movs	r3, #2
 80025ce:	460a      	mov	r2, r1
 80025d0:	212a      	movs	r1, #42	; 0x2a
 80025d2:	f7ff ff8f 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80025d6:	bd08      	pop	{r3, pc}

080025d8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80025d8:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80025da:	2301      	movs	r3, #1
 80025dc:	460a      	mov	r2, r1
 80025de:	210f      	movs	r1, #15
 80025e0:	f7ff ff88 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80025e4:	bd08      	pop	{r3, pc}

080025e6 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025e6:	b530      	push	{r4, r5, lr}
 80025e8:	b083      	sub	sp, #12
 80025ea:	4604      	mov	r4, r0
 80025ec:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80025ee:	2301      	movs	r3, #1
 80025f0:	aa01      	add	r2, sp, #4
 80025f2:	2120      	movs	r1, #32
 80025f4:	f7ff ff7e 	bl	80024f4 <hts221_read_reg>

  if(ret == 0){
 80025f8:	4603      	mov	r3, r0
 80025fa:	b110      	cbz	r0, 8002602 <hts221_power_on_set+0x1c>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	b003      	add	sp, #12
 8002600:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 8002602:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002606:	f365 13c7 	bfi	r3, r5, #7, #1
 800260a:	aa02      	add	r2, sp, #8
 800260c:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002610:	2301      	movs	r3, #1
 8002612:	2120      	movs	r1, #32
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff ff72 	bl	80024fe <hts221_write_reg>
 800261a:	4603      	mov	r3, r0
  return ret;
 800261c:	e7ee      	b.n	80025fc <hts221_power_on_set+0x16>

0800261e <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800261e:	b510      	push	{r4, lr}
 8002620:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8002622:	2301      	movs	r3, #1
 8002624:	460a      	mov	r2, r1
 8002626:	2130      	movs	r1, #48	; 0x30
 8002628:	f7ff ff64 	bl	80024f4 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800262c:	7823      	ldrb	r3, [r4, #0]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8002632:	bd10      	pop	{r4, pc}

08002634 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002634:	b510      	push	{r4, lr}
 8002636:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8002638:	2301      	movs	r3, #1
 800263a:	460a      	mov	r2, r1
 800263c:	2131      	movs	r1, #49	; 0x31
 800263e:	f7ff ff59 	bl	80024f4 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8002642:	7823      	ldrb	r3, [r4, #0]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8002648:	bd10      	pop	{r4, pc}

0800264a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800264a:	b530      	push	{r4, r5, lr}
 800264c:	b083      	sub	sp, #12
 800264e:	4605      	mov	r5, r0
 8002650:	460c      	mov	r4, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002652:	2301      	movs	r3, #1
 8002654:	f10d 0203 	add.w	r2, sp, #3
 8002658:	2132      	movs	r1, #50	; 0x32
 800265a:	f7ff ff4b 	bl	80024f4 <hts221_read_reg>

  if(ret == 0){
 800265e:	4603      	mov	r3, r0
 8002660:	b110      	cbz	r0, 8002668 <hts221_temp_deg_point_0_get+0x1e>
    coeff_h = reg.t0_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 8002662:	4618      	mov	r0, r3
 8002664:	b003      	add	sp, #12
 8002666:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002668:	2301      	movs	r3, #1
 800266a:	aa01      	add	r2, sp, #4
 800266c:	2135      	movs	r1, #53	; 0x35
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff ff40 	bl	80024f4 <hts221_read_reg>
 8002674:	4603      	mov	r3, r0
    coeff_h = reg.t0_msb;
 8002676:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800267a:	f002 0103 	and.w	r1, r2, #3
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800267e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002682:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8002686:	08d2      	lsrs	r2, r2, #3
 8002688:	7022      	strb	r2, [r4, #0]
  return ret;
 800268a:	e7ea      	b.n	8002662 <hts221_temp_deg_point_0_get+0x18>

0800268c <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800268c:	b530      	push	{r4, r5, lr}
 800268e:	b083      	sub	sp, #12
 8002690:	4605      	mov	r5, r0
 8002692:	460c      	mov	r4, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002694:	2301      	movs	r3, #1
 8002696:	f10d 0203 	add.w	r2, sp, #3
 800269a:	2133      	movs	r1, #51	; 0x33
 800269c:	f7ff ff2a 	bl	80024f4 <hts221_read_reg>

  if(ret == 0){
 80026a0:	4603      	mov	r3, r0
 80026a2:	b110      	cbz	r0, 80026aa <hts221_temp_deg_point_1_get+0x1e>
    coeff_h = reg.t1_msb;
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
  }

  return ret;
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	b003      	add	sp, #12
 80026a8:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80026aa:	2301      	movs	r3, #1
 80026ac:	aa01      	add	r2, sp, #4
 80026ae:	2135      	movs	r1, #53	; 0x35
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7ff ff1f 	bl	80024f4 <hts221_read_reg>
 80026b6:	4603      	mov	r3, r0
    coeff_h = reg.t1_msb;
 80026b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80026bc:	f3c2 0181 	ubfx	r1, r2, #2, #2
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80026c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80026c4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80026c8:	08d2      	lsrs	r2, r2, #3
 80026ca:	7022      	strb	r2, [r4, #0]
  return ret;
 80026cc:	e7ea      	b.n	80026a4 <hts221_temp_deg_point_1_get+0x18>

080026ce <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026ce:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80026d0:	2302      	movs	r3, #2
 80026d2:	460a      	mov	r2, r1
 80026d4:	2136      	movs	r1, #54	; 0x36
 80026d6:	f7ff ff0d 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80026da:	bd08      	pop	{r3, pc}

080026dc <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026dc:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80026de:	2302      	movs	r3, #2
 80026e0:	460a      	mov	r2, r1
 80026e2:	213a      	movs	r1, #58	; 0x3a
 80026e4:	f7ff ff06 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80026e8:	bd08      	pop	{r3, pc}

080026ea <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026ea:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 80026ec:	2302      	movs	r3, #2
 80026ee:	460a      	mov	r2, r1
 80026f0:	213c      	movs	r1, #60	; 0x3c
 80026f2:	f7ff feff 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 80026f6:	bd08      	pop	{r3, pc}

080026f8 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026f8:	b508      	push	{r3, lr}
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 80026fa:	2302      	movs	r3, #2
 80026fc:	460a      	mov	r2, r1
 80026fe:	213e      	movs	r1, #62	; 0x3e
 8002700:	f7ff fef8 	bl	80024f4 <hts221_read_reg>
  return ret;
}
 8002704:	bd08      	pop	{r3, pc}
	...

08002708 <LPS22HB_GetCapabilities>:
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8002708:	2000      	movs	r0, #0
 800270a:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8002710:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8002712:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8002714:	2300      	movs	r3, #0
 8002716:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <LPS22HB_GetCapabilities+0x18>)
 800271a:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
 800271c:	60cb      	str	r3, [r1, #12]
  return LPS22HB_OK;
}
 800271e:	4770      	bx	lr
 8002720:	42960000 	.word	0x42960000

08002724 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002728:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	d918      	bls.n	8002764 <LPS22HB_SetOutputDataRate_When_Disabled+0x40>
 8002732:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d916      	bls.n	800276e <LPS22HB_SetOutputDataRate_When_Disabled+0x4a>
 8002740:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002744:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	d911      	bls.n	8002772 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800274e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002778 <LPS22HB_SetOutputDataRate_When_Disabled+0x54>
 8002752:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d901      	bls.n	8002760 <LPS22HB_SetOutputDataRate_When_Disabled+0x3c>
 800275c:	2305      	movs	r3, #5
 800275e:	e002      	b.n	8002766 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8002760:	2304      	movs	r3, #4
 8002762:	e000      	b.n	8002766 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8002764:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002766:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
}
 800276a:	2000      	movs	r0, #0
 800276c:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800276e:	2302      	movs	r3, #2
 8002770:	e7f9      	b.n	8002766 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8002772:	2303      	movs	r3, #3
 8002774:	e7f7      	b.n	8002766 <LPS22HB_SetOutputDataRate_When_Disabled+0x42>
 8002776:	bf00      	nop
 8002778:	42480000 	.word	0x42480000

0800277c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800277c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002780:	4605      	mov	r5, r0
 8002782:	4688      	mov	r8, r1
 8002784:	4691      	mov	r9, r2
 8002786:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002788:	6883      	ldr	r3, [r0, #8]
 800278a:	b13b      	cbz	r3, 800279c <ReadRegWrap+0x20>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800278c:	6944      	ldr	r4, [r0, #20]
 800278e:	463b      	mov	r3, r7
 8002790:	7b00      	ldrb	r0, [r0, #12]
 8002792:	47a0      	blx	r4
 8002794:	4603      	mov	r3, r0
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = LPS22HB_OK;
 800279c:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 800279e:	461c      	mov	r4, r3
 80027a0:	42bc      	cmp	r4, r7
 80027a2:	d2f8      	bcs.n	8002796 <ReadRegWrap+0x1a>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80027a4:	696e      	ldr	r6, [r5, #20]
 80027a6:	eb04 0108 	add.w	r1, r4, r8
 80027aa:	2301      	movs	r3, #1
 80027ac:	eb09 0204 	add.w	r2, r9, r4
 80027b0:	b289      	uxth	r1, r1
 80027b2:	7b28      	ldrb	r0, [r5, #12]
 80027b4:	47b0      	blx	r6
      if (ret != LPS22HB_OK)
 80027b6:	4603      	mov	r3, r0
 80027b8:	b910      	cbnz	r0, 80027c0 <ReadRegWrap+0x44>
    for (i = 0; i < Length; i++)
 80027ba:	3401      	adds	r4, #1
 80027bc:	b2a4      	uxth	r4, r4
 80027be:	e7ef      	b.n	80027a0 <ReadRegWrap+0x24>
        return LPS22HB_ERROR;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	e7e7      	b.n	8002796 <ReadRegWrap+0x1a>

080027c6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ca:	4605      	mov	r5, r0
 80027cc:	4688      	mov	r8, r1
 80027ce:	4691      	mov	r9, r2
 80027d0:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80027d2:	6883      	ldr	r3, [r0, #8]
 80027d4:	b13b      	cbz	r3, 80027e6 <WriteRegWrap+0x20>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80027d6:	6904      	ldr	r4, [r0, #16]
 80027d8:	463b      	mov	r3, r7
 80027da:	7b00      	ldrb	r0, [r0, #12]
 80027dc:	47a0      	blx	r4
 80027de:	4603      	mov	r3, r0
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = LPS22HB_OK;
 80027e6:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 80027e8:	461c      	mov	r4, r3
 80027ea:	42bc      	cmp	r4, r7
 80027ec:	d2f8      	bcs.n	80027e0 <WriteRegWrap+0x1a>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80027ee:	692e      	ldr	r6, [r5, #16]
 80027f0:	eb04 0108 	add.w	r1, r4, r8
 80027f4:	2301      	movs	r3, #1
 80027f6:	eb09 0204 	add.w	r2, r9, r4
 80027fa:	b289      	uxth	r1, r1
 80027fc:	7b28      	ldrb	r0, [r5, #12]
 80027fe:	47b0      	blx	r6
      if (ret != LPS22HB_OK)
 8002800:	4603      	mov	r3, r0
 8002802:	b910      	cbnz	r0, 800280a <WriteRegWrap+0x44>
    for (i = 0; i < Length; i++)
 8002804:	3401      	adds	r4, #1
 8002806:	b2a4      	uxth	r4, r4
 8002808:	e7ef      	b.n	80027ea <WriteRegWrap+0x24>
        return LPS22HB_ERROR;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e7e7      	b.n	80027e0 <WriteRegWrap+0x1a>

08002810 <LPS22HB_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 8002810:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002814:	2b01      	cmp	r3, #1
 8002816:	d00d      	beq.n	8002834 <LPS22HB_PRESS_Enable+0x24>
{
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800281c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002820:	301c      	adds	r0, #28
 8002822:	f000 fa45 	bl	8002cb0 <lps22hb_data_rate_set>
 8002826:	4603      	mov	r3, r0
 8002828:	b938      	cbnz	r0, 800283a <LPS22HB_PRESS_Enable+0x2a>
  pObj->press_is_enabled = 1;
 800282a:	2201      	movs	r2, #1
 800282c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	4770      	bx	lr
    return LPS22HB_ERROR;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e7f7      	b.n	8002830 <LPS22HB_PRESS_Enable+0x20>

08002840 <LPS22HB_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8002840:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002844:	2b01      	cmp	r3, #1
 8002846:	d00d      	beq.n	8002864 <LPS22HB_TEMP_Enable+0x24>
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800284c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002850:	301c      	adds	r0, #28
 8002852:	f000 fa2d 	bl	8002cb0 <lps22hb_data_rate_set>
 8002856:	4603      	mov	r3, r0
 8002858:	b938      	cbnz	r0, 800286a <LPS22HB_TEMP_Enable+0x2a>
  pObj->temp_is_enabled = 1;
 800285a:	2201      	movs	r2, #1
 800285c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	4770      	bx	lr
    return LPS22HB_ERROR;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e7f7      	b.n	8002860 <LPS22HB_TEMP_Enable+0x20>

08002870 <LPS22HB_Initialize>:
{
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	4605      	mov	r5, r0
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002874:	f100 041c 	add.w	r4, r0, #28
 8002878:	2101      	movs	r1, #1
 800287a:	4620      	mov	r0, r4
 800287c:	f000 fa8e 	bl	8002d9c <lps22hb_low_power_set>
 8002880:	bb20      	cbnz	r0, 80028cc <LPS22HB_Initialize+0x5c>
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002882:	2100      	movs	r1, #0
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fa13 	bl	8002cb0 <lps22hb_data_rate_set>
 800288a:	bb10      	cbnz	r0, 80028d2 <LPS22HB_Initialize+0x62>
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800288c:	2102      	movs	r1, #2
 800288e:	4620      	mov	r0, r4
 8002890:	f000 f9f2 	bl	8002c78 <lps22hb_low_pass_filter_mode_set>
 8002894:	bb00      	cbnz	r0, 80028d8 <LPS22HB_Initialize+0x68>
  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002896:	2101      	movs	r1, #1
 8002898:	4620      	mov	r0, r4
 800289a:	f000 f9d1 	bl	8002c40 <lps22hb_block_data_update_set>
 800289e:	4606      	mov	r6, r0
 80028a0:	b9e8      	cbnz	r0, 80028de <LPS22HB_Initialize+0x6e>
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80028a2:	68ab      	ldr	r3, [r5, #8]
 80028a4:	b94b      	cbnz	r3, 80028ba <LPS22HB_Initialize+0x4a>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80028a6:	2100      	movs	r1, #0
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 faaf 	bl	8002e0c <lps22hb_auto_add_inc_set>
 80028ae:	b9c8      	cbnz	r0, 80028e4 <LPS22HB_Initialize+0x74>
  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 80028b6:	4630      	mov	r0, r6
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80028ba:	2101      	movs	r1, #1
 80028bc:	4620      	mov	r0, r4
 80028be:	f000 faa5 	bl	8002e0c <lps22hb_auto_add_inc_set>
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d0f4      	beq.n	80028b0 <LPS22HB_Initialize+0x40>
      return LPS22HB_ERROR;
 80028c6:	f04f 36ff 	mov.w	r6, #4294967295
 80028ca:	e7f4      	b.n	80028b6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80028cc:	f04f 36ff 	mov.w	r6, #4294967295
 80028d0:	e7f1      	b.n	80028b6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80028d2:	f04f 36ff 	mov.w	r6, #4294967295
 80028d6:	e7ee      	b.n	80028b6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80028d8:	f04f 36ff 	mov.w	r6, #4294967295
 80028dc:	e7eb      	b.n	80028b6 <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80028de:	f04f 36ff 	mov.w	r6, #4294967295
 80028e2:	e7e8      	b.n	80028b6 <LPS22HB_Initialize+0x46>
      return LPS22HB_ERROR;
 80028e4:	f04f 36ff 	mov.w	r6, #4294967295
 80028e8:	e7e5      	b.n	80028b6 <LPS22HB_Initialize+0x46>

080028ea <LPS22HB_Init>:
{
 80028ea:	b510      	push	{r4, lr}
 80028ec:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80028ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80028f2:	b123      	cbz	r3, 80028fe <LPS22HB_Init+0x14>
  pObj->is_initialized = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HB_OK;
 80028fa:	2000      	movs	r0, #0
}
 80028fc:	bd10      	pop	{r4, pc}
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80028fe:	f7ff ffb7 	bl	8002870 <LPS22HB_Initialize>
 8002902:	2800      	cmp	r0, #0
 8002904:	d0f6      	beq.n	80028f4 <LPS22HB_Init+0xa>
      return LPS22HB_ERROR;
 8002906:	f04f 30ff 	mov.w	r0, #4294967295
 800290a:	e7f7      	b.n	80028fc <LPS22HB_Init+0x12>

0800290c <LPS22HB_ReadID>:
{
 800290c:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 800290e:	301c      	adds	r0, #28
 8002910:	f000 fa21 	bl	8002d56 <lps22hb_device_id_get>
 8002914:	4603      	mov	r3, r0
 8002916:	b908      	cbnz	r0, 800291c <LPS22HB_ReadID+0x10>
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd08      	pop	{r3, pc}
    return LPS22HB_ERROR;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	e7fa      	b.n	8002918 <LPS22HB_ReadID+0xc>

08002922 <LPS22HB_PRESS_Disable>:
{
 8002922:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8002924:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002928:	b1c3      	cbz	r3, 800295c <LPS22HB_PRESS_Disable+0x3a>
 800292a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800292c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002930:	b11b      	cbz	r3, 800293a <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8002932:	2000      	movs	r0, #0
 8002934:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8002938:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800293a:	f100 051c 	add.w	r5, r0, #28
 800293e:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8002942:	4628      	mov	r0, r5
 8002944:	f000 f9d0 	bl	8002ce8 <lps22hb_data_rate_get>
 8002948:	b950      	cbnz	r0, 8002960 <LPS22HB_PRESS_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800294a:	2100      	movs	r1, #0
 800294c:	4628      	mov	r0, r5
 800294e:	f000 f9af 	bl	8002cb0 <lps22hb_data_rate_set>
 8002952:	2800      	cmp	r0, #0
 8002954:	d0ed      	beq.n	8002932 <LPS22HB_PRESS_Disable+0x10>
      return LPS22HB_ERROR;
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	e7ed      	b.n	8002938 <LPS22HB_PRESS_Disable+0x16>
    return LPS22HB_OK;
 800295c:	2000      	movs	r0, #0
 800295e:	e7eb      	b.n	8002938 <LPS22HB_PRESS_Disable+0x16>
      return LPS22HB_ERROR;
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e7e8      	b.n	8002938 <LPS22HB_PRESS_Disable+0x16>
	...

08002968 <LPS22HB_GetOutputDataRate>:
{
 8002968:	b510      	push	{r4, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800296e:	f10d 0107 	add.w	r1, sp, #7
 8002972:	301c      	adds	r0, #28
 8002974:	f000 f9b8 	bl	8002ce8 <lps22hb_data_rate_get>
 8002978:	b9f0      	cbnz	r0, 80029b8 <LPS22HB_GetOutputDataRate+0x50>
 800297a:	4602      	mov	r2, r0
  switch (odr_low_level)
 800297c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d81c      	bhi.n	80029be <LPS22HB_GetOutputDataRate+0x56>
 8002984:	e8df f003 	tbb	[pc, r3]
 8002988:	0f0c0803 	.word	0x0f0c0803
 800298c:	1512      	.short	0x1512
      *Odr = 0.0f;
 800298e:	2300      	movs	r3, #0
 8002990:	6023      	str	r3, [r4, #0]
}
 8002992:	4610      	mov	r0, r2
 8002994:	b002      	add	sp, #8
 8002996:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8002998:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800299c:	6023      	str	r3, [r4, #0]
      break;
 800299e:	e7f8      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 10.0f;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <LPS22HB_GetOutputDataRate+0x5c>)
 80029a2:	6023      	str	r3, [r4, #0]
      break;
 80029a4:	e7f5      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 25.0f;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <LPS22HB_GetOutputDataRate+0x60>)
 80029a8:	6023      	str	r3, [r4, #0]
      break;
 80029aa:	e7f2      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 50.0f;
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <LPS22HB_GetOutputDataRate+0x64>)
 80029ae:	6023      	str	r3, [r4, #0]
      break;
 80029b0:	e7ef      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 75.0f;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <LPS22HB_GetOutputDataRate+0x68>)
 80029b4:	6023      	str	r3, [r4, #0]
      break;
 80029b6:	e7ec      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
    return LPS22HB_ERROR;
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	e7e9      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
      ret = LPS22HB_ERROR;
 80029be:	f04f 32ff 	mov.w	r2, #4294967295
 80029c2:	e7e6      	b.n	8002992 <LPS22HB_GetOutputDataRate+0x2a>
 80029c4:	41200000 	.word	0x41200000
 80029c8:	41c80000 	.word	0x41c80000
 80029cc:	42480000 	.word	0x42480000
 80029d0:	42960000 	.word	0x42960000

080029d4 <LPS22HB_PRESS_GetOutputDataRate>:
{
 80029d4:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80029d6:	f7ff ffc7 	bl	8002968 <LPS22HB_GetOutputDataRate>
}
 80029da:	bd08      	pop	{r3, pc}

080029dc <LPS22HB_TEMP_GetOutputDataRate>:
{
 80029dc:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80029de:	f7ff ffc3 	bl	8002968 <LPS22HB_GetOutputDataRate>
}
 80029e2:	bd08      	pop	{r3, pc}

080029e4 <LPS22HB_SetOutputDataRate_When_Enabled>:
{
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80029e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80029ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	d916      	bls.n	8002a24 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 80029f6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80029fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d91f      	bls.n	8002a44 <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8002a04:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002a08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d91a      	bls.n	8002a48 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002a12:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002a5c <LPS22HB_SetOutputDataRate_When_Enabled+0x78>
 8002a16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d815      	bhi.n	8002a4c <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 8002a20:	2104      	movs	r1, #4
 8002a22:	e000      	b.n	8002a26 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8002a24:	2101      	movs	r1, #1
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002a26:	f105 041c 	add.w	r4, r5, #28
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 f940 	bl	8002cb0 <lps22hb_data_rate_set>
 8002a30:	b988      	cbnz	r0, 8002a56 <LPS22HB_SetOutputDataRate_When_Enabled+0x72>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002a32:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8002a36:	4620      	mov	r0, r4
 8002a38:	f000 f956 	bl	8002ce8 <lps22hb_data_rate_get>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b938      	cbnz	r0, 8002a50 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002a44:	2102      	movs	r1, #2
 8002a46:	e7ee      	b.n	8002a26 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8002a48:	2103      	movs	r1, #3
 8002a4a:	e7ec      	b.n	8002a26 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
 8002a4c:	2105      	movs	r1, #5
 8002a4e:	e7ea      	b.n	8002a26 <LPS22HB_SetOutputDataRate_When_Enabled+0x42>
    return LPS22HB_ERROR;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	e7f4      	b.n	8002a40 <LPS22HB_SetOutputDataRate_When_Enabled+0x5c>
    return LPS22HB_ERROR;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e7f1      	b.n	8002a40 <LPS22HB_SetOutputDataRate_When_Enabled+0x5c>
 8002a5c:	42480000 	.word	0x42480000

08002a60 <LPS22HB_PRESS_SetOutputDataRate>:
{
 8002a60:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 8002a62:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d002      	beq.n	8002a70 <LPS22HB_PRESS_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002a6a:	f7ff fe5b 	bl	8002724 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8002a6e:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002a70:	f7ff ffb8 	bl	80029e4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8002a74:	e7fb      	b.n	8002a6e <LPS22HB_PRESS_SetOutputDataRate+0xe>

08002a76 <LPS22HB_TEMP_SetOutputDataRate>:
{
 8002a76:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 8002a78:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <LPS22HB_TEMP_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002a80:	f7ff fe50 	bl	8002724 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8002a84:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002a86:	f7ff ffad 	bl	80029e4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8002a8a:	e7fb      	b.n	8002a84 <LPS22HB_TEMP_SetOutputDataRate+0xe>

08002a8c <LPS22HB_TEMP_Disable>:
{
 8002a8c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8002a8e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002a92:	b1c3      	cbz	r3, 8002ac6 <LPS22HB_TEMP_Disable+0x3a>
 8002a94:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8002a96:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002a9a:	b11b      	cbz	r3, 8002aa4 <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002aa4:	f100 051c 	add.w	r5, r0, #28
 8002aa8:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8002aac:	4628      	mov	r0, r5
 8002aae:	f000 f91b 	bl	8002ce8 <lps22hb_data_rate_get>
 8002ab2:	b950      	cbnz	r0, 8002aca <LPS22HB_TEMP_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f000 f8fa 	bl	8002cb0 <lps22hb_data_rate_set>
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d0ed      	beq.n	8002a9c <LPS22HB_TEMP_Disable+0x10>
      return LPS22HB_ERROR;
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	e7ed      	b.n	8002aa2 <LPS22HB_TEMP_Disable+0x16>
    return LPS22HB_OK;
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e7eb      	b.n	8002aa2 <LPS22HB_TEMP_Disable+0x16>
      return LPS22HB_ERROR;
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ace:	e7e8      	b.n	8002aa2 <LPS22HB_TEMP_Disable+0x16>

08002ad0 <LPS22HB_DeInit>:
{
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8002ad4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d003      	beq.n	8002ae4 <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 8002adc:	2000      	movs	r0, #0
 8002ade:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8002ae2:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8002ae4:	f7ff ff1d 	bl	8002922 <LPS22HB_PRESS_Disable>
 8002ae8:	b938      	cbnz	r0, 8002afa <LPS22HB_DeInit+0x2a>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ffce 	bl	8002a8c <LPS22HB_TEMP_Disable>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d0f3      	beq.n	8002adc <LPS22HB_DeInit+0xc>
      return LPS22HB_ERROR;
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	e7f3      	b.n	8002ae2 <LPS22HB_DeInit+0x12>
      return LPS22HB_ERROR;
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	e7f0      	b.n	8002ae2 <LPS22HB_DeInit+0x12>

08002b00 <LPS22HB_PRESS_GetPressure>:
{
 8002b00:	b530      	push	{r4, r5, lr}
 8002b02:	b083      	sub	sp, #12
 8002b04:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002b06:	2300      	movs	r3, #0
 8002b08:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8002b0a:	a901      	add	r1, sp, #4
 8002b0c:	301c      	adds	r0, #28
 8002b0e:	f000 f914 	bl	8002d3a <lps22hb_pressure_raw_get>
 8002b12:	b940      	cbnz	r0, 8002b26 <LPS22HB_PRESS_GetPressure+0x26>
 8002b14:	4604      	mov	r4, r0
  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8002b16:	9801      	ldr	r0, [sp, #4]
 8002b18:	f000 f87a 	bl	8002c10 <lps22hb_from_lsb_to_hpa>
 8002b1c:	ed85 0a00 	vstr	s0, [r5]
}
 8002b20:	4620      	mov	r0, r4
 8002b22:	b003      	add	sp, #12
 8002b24:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 8002b26:	f04f 34ff 	mov.w	r4, #4294967295
 8002b2a:	e7f9      	b.n	8002b20 <LPS22HB_PRESS_GetPressure+0x20>

08002b2c <LPS22HB_TEMP_GetTemperature>:
{
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8002b38:	a901      	add	r1, sp, #4
 8002b3a:	301c      	adds	r0, #28
 8002b3c:	f000 f904 	bl	8002d48 <lps22hb_temperature_raw_get>
 8002b40:	b948      	cbnz	r0, 8002b56 <LPS22HB_TEMP_GetTemperature+0x2a>
 8002b42:	4604      	mov	r4, r0
  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002b44:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8002b48:	f000 f86e 	bl	8002c28 <lps22hb_from_lsb_to_degc>
 8002b4c:	ed85 0a00 	vstr	s0, [r5]
}
 8002b50:	4620      	mov	r0, r4
 8002b52:	b003      	add	sp, #12
 8002b54:	bd30      	pop	{r4, r5, pc}
    return LPS22HB_ERROR;
 8002b56:	f04f 34ff 	mov.w	r4, #4294967295
 8002b5a:	e7f9      	b.n	8002b50 <LPS22HB_TEMP_GetTemperature+0x24>

08002b5c <LPS22HB_Write_Reg>:
{
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	ac02      	add	r4, sp, #8
 8002b62:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002b66:	2301      	movs	r3, #1
 8002b68:	4622      	mov	r2, r4
 8002b6a:	301c      	adds	r0, #28
 8002b6c:	f000 f84b 	bl	8002c06 <lps22hb_write_reg>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b910      	cbnz	r0, 8002b7a <LPS22HB_Write_Reg+0x1e>
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	b002      	add	sp, #8
 8002b78:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	e7f9      	b.n	8002b74 <LPS22HB_Write_Reg+0x18>

08002b80 <LPS22HB_RegisterBusIO>:
  if (pObj == NULL)
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d02c      	beq.n	8002bde <LPS22HB_RegisterBusIO+0x5e>
{
 8002b84:	b510      	push	{r4, lr}
 8002b86:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002b88:	680a      	ldr	r2, [r1, #0]
 8002b8a:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b8c:	6848      	ldr	r0, [r1, #4]
 8002b8e:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002b90:	6888      	ldr	r0, [r1, #8]
 8002b92:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8002b94:	7b08      	ldrb	r0, [r1, #12]
 8002b96:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b98:	6908      	ldr	r0, [r1, #16]
 8002b9a:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b9c:	6948      	ldr	r0, [r1, #20]
 8002b9e:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ba0:	6989      	ldr	r1, [r1, #24]
 8002ba2:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8002ba4:	4913      	ldr	r1, [pc, #76]	; (8002bf4 <LPS22HB_RegisterBusIO+0x74>)
 8002ba6:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002ba8:	4913      	ldr	r1, [pc, #76]	; (8002bf8 <LPS22HB_RegisterBusIO+0x78>)
 8002baa:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8002bac:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002bae:	b1d2      	cbz	r2, 8002be6 <LPS22HB_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LPS22HB_OK)
 8002bb0:	4790      	blx	r2
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b9d0      	cbnz	r0, 8002bec <LPS22HB_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002bb6:	68a2      	ldr	r2, [r4, #8]
 8002bb8:	2a02      	cmp	r2, #2
 8002bba:	d001      	beq.n	8002bc0 <LPS22HB_RegisterBusIO+0x40>
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8002bc0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d1f9      	bne.n	8002bbc <LPS22HB_RegisterBusIO+0x3c>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2110      	movs	r1, #16
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ffc5 	bl	8002b5c <LPS22HB_Write_Reg>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d0f1      	beq.n	8002bbc <LPS22HB_RegisterBusIO+0x3c>
            ret = LPS22HB_ERROR;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
  return ret;
 8002bdc:	e7ee      	b.n	8002bbc <LPS22HB_RegisterBusIO+0x3c>
    ret = LPS22HB_ERROR;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	4770      	bx	lr
      ret = LPS22HB_ERROR;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e7e7      	b.n	8002bbc <LPS22HB_RegisterBusIO+0x3c>
      ret = LPS22HB_ERROR;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	e7e4      	b.n	8002bbc <LPS22HB_RegisterBusIO+0x3c>
 8002bf2:	bf00      	nop
 8002bf4:	0800277d 	.word	0x0800277d
 8002bf8:	080027c7 	.word	0x080027c7

08002bfc <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002bfc:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002bfe:	6844      	ldr	r4, [r0, #4]
 8002c00:	6880      	ldr	r0, [r0, #8]
 8002c02:	47a0      	blx	r4
  return ret;
}
 8002c04:	bd10      	pop	{r4, pc}

08002c06 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002c06:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c08:	6804      	ldr	r4, [r0, #0]
 8002c0a:	6880      	ldr	r0, [r0, #8]
 8002c0c:	47a0      	blx	r4
  return ret;
}
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <lps22hb_from_lsb_to_hpa>:
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
  return ( (float_t)lsb / 4096.0f );
 8002c10:	ee07 0a90 	vmov	s15, r0
 8002c14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8002c18:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002c24 <lps22hb_from_lsb_to_hpa+0x14>
 8002c1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	39800000 	.word	0x39800000

08002c28 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
  return ( (float_t)lsb / 100.0f );
 8002c28:	ee07 0a90 	vmov	s15, r0
 8002c2c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8002c30:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002c3c <lps22hb_from_lsb_to_degc+0x14>
 8002c34:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	42c80000 	.word	0x42c80000

08002c40 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c40:	b530      	push	{r4, r5, lr}
 8002c42:	b083      	sub	sp, #12
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002c48:	2301      	movs	r3, #1
 8002c4a:	aa01      	add	r2, sp, #4
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	f7ff ffd5 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002c52:	4603      	mov	r3, r0
 8002c54:	b110      	cbz	r0, 8002c5c <lps22hb_block_data_update_set+0x1c>
    ctrl_reg1.bdu = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	b003      	add	sp, #12
 8002c5a:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.bdu = val;
 8002c5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c60:	f365 0341 	bfi	r3, r5, #1, #1
 8002c64:	aa02      	add	r2, sp, #8
 8002c66:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff ffc9 	bl	8002c06 <lps22hb_write_reg>
 8002c74:	4603      	mov	r3, r0
  return ret;
 8002c76:	e7ee      	b.n	8002c56 <lps22hb_block_data_update_set+0x16>

08002c78 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8002c78:	b530      	push	{r4, r5, lr}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002c80:	2301      	movs	r3, #1
 8002c82:	aa01      	add	r2, sp, #4
 8002c84:	2110      	movs	r1, #16
 8002c86:	f7ff ffb9 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b110      	cbz	r0, 8002c94 <lps22hb_low_pass_filter_mode_set+0x1c>
    ctrl_reg1.lpfp = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	b003      	add	sp, #12
 8002c92:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.lpfp = (uint8_t)val;
 8002c94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c98:	f365 0383 	bfi	r3, r5, #2, #2
 8002c9c:	aa02      	add	r2, sp, #8
 8002c9e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	2110      	movs	r1, #16
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff ffad 	bl	8002c06 <lps22hb_write_reg>
 8002cac:	4603      	mov	r3, r0
  return ret;
 8002cae:	e7ee      	b.n	8002c8e <lps22hb_low_pass_filter_mode_set+0x16>

08002cb0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002cb0:	b530      	push	{r4, r5, lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	460d      	mov	r5, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002cb8:	2301      	movs	r3, #1
 8002cba:	aa01      	add	r2, sp, #4
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	f7ff ff9d 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	b110      	cbz	r0, 8002ccc <lps22hb_data_rate_set+0x1c>
    ctrl_reg1.odr = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	b003      	add	sp, #12
 8002cca:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.odr = (uint8_t)val;
 8002ccc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cd0:	f365 1306 	bfi	r3, r5, #4, #3
 8002cd4:	aa02      	add	r2, sp, #8
 8002cd6:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2110      	movs	r1, #16
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7ff ff91 	bl	8002c06 <lps22hb_write_reg>
 8002ce4:	4603      	mov	r3, r0
  return ret;
 8002ce6:	e7ee      	b.n	8002cc6 <lps22hb_data_rate_set+0x16>

08002ce8 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	460c      	mov	r4, r1
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002cee:	2301      	movs	r3, #1
 8002cf0:	aa01      	add	r2, sp, #4
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	f7ff ff82 	bl	8002bfc <lps22hb_read_reg>
  switch (ctrl_reg1.odr){
 8002cf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cfc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d817      	bhi.n	8002d34 <lps22hb_data_rate_get+0x4c>
 8002d04:	e8df f003 	tbb	[pc, r3]
 8002d08:	0d0a0703 	.word	0x0d0a0703
 8002d0c:	1310      	.short	0x1310
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	7023      	strb	r3, [r4, #0]
      *val = LPS22HB_ODR_1_Hz;
      break;
  }

  return ret;
}
 8002d12:	b002      	add	sp, #8
 8002d14:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 8002d16:	2301      	movs	r3, #1
 8002d18:	7023      	strb	r3, [r4, #0]
      break;
 8002d1a:	e7fa      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_10_Hz;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	7023      	strb	r3, [r4, #0]
      break;
 8002d20:	e7f7      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_25_Hz;
 8002d22:	2303      	movs	r3, #3
 8002d24:	7023      	strb	r3, [r4, #0]
      break;
 8002d26:	e7f4      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_50_Hz;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	7023      	strb	r3, [r4, #0]
      break;
 8002d2c:	e7f1      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_75_Hz;
 8002d2e:	2305      	movs	r3, #5
 8002d30:	7023      	strb	r3, [r4, #0]
      break;
 8002d32:	e7ee      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_1_Hz;
 8002d34:	2301      	movs	r3, #1
 8002d36:	7023      	strb	r3, [r4, #0]
  return ret;
 8002d38:	e7eb      	b.n	8002d12 <lps22hb_data_rate_get+0x2a>

08002d3a <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d3a:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	460a      	mov	r2, r1
 8002d40:	2128      	movs	r1, #40	; 0x28
 8002d42:	f7ff ff5b 	bl	8002bfc <lps22hb_read_reg>
  return ret;
}
 8002d46:	bd08      	pop	{r3, pc}

08002d48 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d48:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	212b      	movs	r1, #43	; 0x2b
 8002d50:	f7ff ff54 	bl	8002bfc <lps22hb_read_reg>
  return ret;
}
 8002d54:	bd08      	pop	{r3, pc}

08002d56 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d56:	b508      	push	{r3, lr}
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8002d58:	2301      	movs	r3, #1
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	210f      	movs	r1, #15
 8002d5e:	f7ff ff4d 	bl	8002bfc <lps22hb_read_reg>
  return ret;
}
 8002d62:	bd08      	pop	{r3, pc}

08002d64 <lps22hb_boot_set>:
  * @param  val    Change the values of boot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d64:	b530      	push	{r4, r5, lr}
 8002d66:	b083      	sub	sp, #12
 8002d68:	4604      	mov	r4, r0
 8002d6a:	460d      	mov	r5, r1
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	aa01      	add	r2, sp, #4
 8002d70:	2111      	movs	r1, #17
 8002d72:	f7ff ff43 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002d76:	4603      	mov	r3, r0
 8002d78:	b110      	cbz	r0, 8002d80 <lps22hb_boot_set+0x1c>
    ctrl_reg2.boot = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	b003      	add	sp, #12
 8002d7e:	bd30      	pop	{r4, r5, pc}
    ctrl_reg2.boot = val;
 8002d80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d84:	f365 13c7 	bfi	r3, r5, #7, #1
 8002d88:	aa02      	add	r2, sp, #8
 8002d8a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2111      	movs	r1, #17
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff ff37 	bl	8002c06 <lps22hb_write_reg>
 8002d98:	4603      	mov	r3, r0
  return ret;
 8002d9a:	e7ee      	b.n	8002d7a <lps22hb_boot_set+0x16>

08002d9c <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d9c:	b530      	push	{r4, r5, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8002da4:	2301      	movs	r3, #1
 8002da6:	aa01      	add	r2, sp, #4
 8002da8:	211a      	movs	r1, #26
 8002daa:	f7ff ff27 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002dae:	4603      	mov	r3, r0
 8002db0:	b110      	cbz	r0, 8002db8 <lps22hb_low_power_set+0x1c>
    res_conf.lc_en = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
  }
  return ret;
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	b003      	add	sp, #12
 8002db6:	bd30      	pop	{r4, r5, pc}
    res_conf.lc_en = val;
 8002db8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002dbc:	f365 0300 	bfi	r3, r5, #0, #1
 8002dc0:	aa02      	add	r2, sp, #8
 8002dc2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	211a      	movs	r1, #26
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ff1b 	bl	8002c06 <lps22hb_write_reg>
 8002dd0:	4603      	mov	r3, r0
  return ret;
 8002dd2:	e7ee      	b.n	8002db2 <lps22hb_low_power_set+0x16>

08002dd4 <lps22hb_i2c_interface_set>:
  * @param  val    Change the values of i2c_dis in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_i2c_interface_set(stmdev_ctx_t *ctx, lps22hb_i2c_dis_t val)
{
 8002dd4:	b530      	push	{r4, r5, lr}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	4604      	mov	r4, r0
 8002dda:	460d      	mov	r5, r1
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002ddc:	2301      	movs	r3, #1
 8002dde:	aa01      	add	r2, sp, #4
 8002de0:	2111      	movs	r1, #17
 8002de2:	f7ff ff0b 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002de6:	4603      	mov	r3, r0
 8002de8:	b110      	cbz	r0, 8002df0 <lps22hb_i2c_interface_set+0x1c>
    ctrl_reg2.i2c_dis = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	b003      	add	sp, #12
 8002dee:	bd30      	pop	{r4, r5, pc}
    ctrl_reg2.i2c_dis = (uint8_t)val;
 8002df0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002df4:	f365 03c3 	bfi	r3, r5, #3, #1
 8002df8:	aa02      	add	r2, sp, #8
 8002dfa:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002dfe:	2301      	movs	r3, #1
 8002e00:	2111      	movs	r1, #17
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff feff 	bl	8002c06 <lps22hb_write_reg>
 8002e08:	4603      	mov	r3, r0
  return ret;
 8002e0a:	e7ee      	b.n	8002dea <lps22hb_i2c_interface_set+0x16>

08002e0c <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e0c:	b530      	push	{r4, r5, lr}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	4604      	mov	r4, r0
 8002e12:	460d      	mov	r5, r1
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002e14:	2301      	movs	r3, #1
 8002e16:	aa01      	add	r2, sp, #4
 8002e18:	2111      	movs	r1, #17
 8002e1a:	f7ff feef 	bl	8002bfc <lps22hb_read_reg>
  if(ret == 0){
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b110      	cbz	r0, 8002e28 <lps22hb_auto_add_inc_set+0x1c>
    ctrl_reg2.if_add_inc = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	b003      	add	sp, #12
 8002e26:	bd30      	pop	{r4, r5, pc}
    ctrl_reg2.if_add_inc = val;
 8002e28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e2c:	f365 1304 	bfi	r3, r5, #4, #1
 8002e30:	aa02      	add	r2, sp, #8
 8002e32:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8002e36:	2301      	movs	r3, #1
 8002e38:	2111      	movs	r1, #17
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff fee3 	bl	8002c06 <lps22hb_write_reg>
 8002e40:	4603      	mov	r3, r0
  return ret;
 8002e42:	e7ee      	b.n	8002e22 <lps22hb_auto_add_inc_set+0x16>

08002e44 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8002e44:	b510      	push	{r4, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <BSP_LED_Init+0x74>)
 8002e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8002e5e:	f002 fba9 	bl	80055b4 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002e62:	b94c      	cbnz	r4, 8002e78 <BSP_LED_Init+0x34>
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <BSP_LED_Init+0x74>)
 8002e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	2c01      	cmp	r4, #1
 8002e7a:	d012      	beq.n	8002ea2 <BSP_LED_Init+0x5e>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <BSP_LED_Init+0x78>)
 8002e7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002e82:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <BSP_LED_Init+0x7c>)
 8002e92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002e96:	a903      	add	r1, sp, #12
 8002e98:	6860      	ldr	r0, [r4, #4]
 8002e9a:	f000 ff11 	bl	8003cc0 <HAL_GPIO_Init>
}
 8002e9e:	b008      	add	sp, #32
 8002ea0:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <BSP_LED_Init+0x74>)
 8002ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	9302      	str	r3, [sp, #8]
 8002eb4:	9b02      	ldr	r3, [sp, #8]
 8002eb6:	e7e1      	b.n	8002e7c <BSP_LED_Init+0x38>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	0800994c 	.word	0x0800994c
 8002ec0:	20000074 	.word	0x20000074

08002ec4 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8002ec4:	b508      	push	{r3, lr}
  if(Led == LED1)
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b110      	cbz	r0, 8002ed0 <BSP_LED_On+0xc>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
  else if (Led == LEDSWD)
 8002eca:	2801      	cmp	r0, #1
 8002ecc:	d00b      	beq.n	8002ee6 <BSP_LED_On+0x22>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8002ece:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002ed0:	480a      	ldr	r0, [pc, #40]	; (8002efc <BSP_LED_On+0x38>)
 8002ed2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <BSP_LED_On+0x3c>)
 8002eda:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8002ede:	6840      	ldr	r0, [r0, #4]
 8002ee0:	f001 f869 	bl	8003fb6 <HAL_GPIO_WritePin>
 8002ee4:	e7f3      	b.n	8002ece <BSP_LED_On+0xa>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <BSP_LED_On+0x38>)
 8002ee8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002eec:	2200      	movs	r2, #0
 8002eee:	4904      	ldr	r1, [pc, #16]	; (8002f00 <BSP_LED_On+0x3c>)
 8002ef0:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8002ef4:	6840      	ldr	r0, [r0, #4]
 8002ef6:	f001 f85e 	bl	8003fb6 <HAL_GPIO_WritePin>
}
 8002efa:	e7e8      	b.n	8002ece <BSP_LED_On+0xa>
 8002efc:	20000074 	.word	0x20000074
 8002f00:	0800994c 	.word	0x0800994c

08002f04 <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8002f04:	b508      	push	{r3, lr}
  if(Led == LED1)
 8002f06:	4603      	mov	r3, r0
 8002f08:	b110      	cbz	r0, 8002f10 <BSP_LED_Off+0xc>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
  else if (Led == LEDSWD)
 8002f0a:	2801      	cmp	r0, #1
 8002f0c:	d00b      	beq.n	8002f26 <BSP_LED_Off+0x22>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 8002f0e:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002f10:	480a      	ldr	r0, [pc, #40]	; (8002f3c <BSP_LED_Off+0x38>)
 8002f12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f16:	2200      	movs	r2, #0
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <BSP_LED_Off+0x3c>)
 8002f1a:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8002f1e:	6840      	ldr	r0, [r0, #4]
 8002f20:	f001 f849 	bl	8003fb6 <HAL_GPIO_WritePin>
 8002f24:	e7f3      	b.n	8002f0e <BSP_LED_Off+0xa>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <BSP_LED_Off+0x38>)
 8002f28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4904      	ldr	r1, [pc, #16]	; (8002f40 <BSP_LED_Off+0x3c>)
 8002f30:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8002f34:	6840      	ldr	r0, [r0, #4]
 8002f36:	f001 f83e 	bl	8003fb6 <HAL_GPIO_WritePin>
}
 8002f3a:	e7e8      	b.n	8002f0e <BSP_LED_Off+0xa>
 8002f3c:	20000074 	.word	0x20000074
 8002f40:	0800994c 	.word	0x0800994c

08002f44 <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8002f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f48:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <Sensor_IO_SPI_CS_Init_All+0x100>)
 8002f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f4e:	f042 0202 	orr.w	r2, r2, #2
 8002f52:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f56:	f002 0202 	and.w	r2, r2, #2
 8002f5a:	9201      	str	r2, [sp, #4]
 8002f5c:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8002f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f60:	f042 0202 	orr.w	r2, r2, #2
 8002f64:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f68:	f002 0202 	and.w	r2, r2, #2
 8002f6c:	9202      	str	r2, [sp, #8]
 8002f6e:	9a02      	ldr	r2, [sp, #8]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8002f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f7a:	f002 0204 	and.w	r2, r2, #4
 8002f7e:	9203      	str	r2, [sp, #12]
 8002f80:	9a03      	ldr	r2, [sp, #12]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8002f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	9b04      	ldr	r3, [sp, #16]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8002f94:	4d2c      	ldr	r5, [pc, #176]	; (8003048 <Sensor_IO_SPI_CS_Init_All+0x104>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f001 f80a 	bl	8003fb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8002fa2:	4f2a      	ldr	r7, [pc, #168]	; (800304c <Sensor_IO_SPI_CS_Init_All+0x108>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f001 f804 	bl	8003fb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 ffff 	bl	8003fb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2108      	movs	r1, #8
 8002fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc0:	f000 fff9 	bl	8003fb6 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	f04f 0800 	mov.w	r8, #0
 8002fcc:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd0:	2601      	movs	r6, #1
 8002fd2:	9606      	str	r6, [sp, #24]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8002fd4:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8002fd8:	ac0a      	add	r4, sp, #40	; 0x28
 8002fda:	f844 9d14 	str.w	r9, [r4, #-20]!
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f000 fe6d 	bl	8003cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8002fe6:	4632      	mov	r2, r6
 8002fe8:	4649      	mov	r1, r9
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 ffe3 	bl	8003fb6 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8002ff0:	f04f 0910 	mov.w	r9, #16
 8002ff4:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	f000 fe60 	bl	8003cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8003000:	4632      	mov	r2, r6
 8003002:	4649      	mov	r1, r9
 8003004:	4638      	mov	r0, r7
 8003006:	f000 ffd6 	bl	8003fb6 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 800300a:	2702      	movs	r7, #2
 800300c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 fe55 	bl	8003cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8003016:	4632      	mov	r2, r6
 8003018:	4639      	mov	r1, r7
 800301a:	4628      	mov	r0, r5
 800301c:	f000 ffcb 	bl	8003fb6 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8003020:	2508      	movs	r5, #8
 8003022:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8003024:	4621      	mov	r1, r4
 8003026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302a:	f000 fe49 	bl	8003cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800302e:	4632      	mov	r2, r6
 8003030:	4629      	mov	r1, r5
 8003032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003036:	f000 ffbe 	bl	8003fb6 <HAL_GPIO_WritePin>

  return HAL_OK;
}
 800303a:	4640      	mov	r0, r8
 800303c:	b00b      	add	sp, #44	; 0x2c
 800303e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	48000400 	.word	0x48000400
 800304c:	48000800 	.word	0x48000800

08003050 <SPI2_MspInit>:
  
  return ret;
}

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003050:	b500      	push	{lr}
 8003052:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <SPI2_MspInit+0x4c>)
 8003056:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800305c:	659a      	str	r2, [r3, #88]	; 0x58
 800305e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003060:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800306a:	f042 0202 	orr.w	r2, r2, #2
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	9b02      	ldr	r3, [sp, #8]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800307a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800307e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003084:	2201      	movs	r2, #1
 8003086:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003088:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800308a:	2305      	movs	r3, #5
 800308c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	a903      	add	r1, sp, #12
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <SPI2_MspInit+0x50>)
 8003092:	f000 fe15 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8003096:	b009      	add	sp, #36	; 0x24
 8003098:	f85d fb04 	ldr.w	pc, [sp], #4
 800309c:	40021000 	.word	0x40021000
 80030a0:	48000400 	.word	0x48000400

080030a4 <SPI1_MspInit>:

  return ret;
}

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030a4:	b500      	push	{lr}
 80030a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <SPI1_MspInit+0x50>)
 80030aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b0:	661a      	str	r2, [r3, #96]	; 0x60
 80030b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030b8:	9201      	str	r2, [sp, #4]
 80030ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	9302      	str	r3, [sp, #8]
 80030cc:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80030ce:	23e0      	movs	r3, #224	; 0xe0
 80030d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030de:	2305      	movs	r3, #5
 80030e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	a903      	add	r1, sp, #12
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f000 fdea 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80030ec:	b009      	add	sp, #36	; 0x24
 80030ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000

080030f8 <I2C3_MspInit>:
{
 80030f8:	b510      	push	{r4, lr}
 80030fa:	b0aa      	sub	sp, #168	; 0xa8
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80030fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003100:	9303      	str	r3, [sp, #12]
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8003102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003106:	9319      	str	r3, [sp, #100]	; 0x64
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 8003108:	a803      	add	r0, sp, #12
 800310a:	f003 f829 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>
 800310e:	b100      	cbz	r0, 8003112 <I2C3_MspInit+0x1a>
 8003110:	e7fe      	b.n	8003110 <I2C3_MspInit+0x18>
  __GPIOC_CLK_ENABLE();
 8003112:	4c1d      	ldr	r4, [pc, #116]	; (8003188 <I2C3_MspInit+0x90>)
 8003114:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800311c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003126:	2303      	movs	r3, #3
 8003128:	9325      	str	r3, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800312a:	2212      	movs	r2, #18
 800312c:	9226      	str	r2, [sp, #152]	; 0x98
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800312e:	2201      	movs	r2, #1
 8003130:	9227      	str	r2, [sp, #156]	; 0x9c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003132:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003134:	2304      	movs	r3, #4
 8003136:	9329      	str	r3, [sp, #164]	; 0xa4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003138:	a925      	add	r1, sp, #148	; 0x94
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <I2C3_MspInit+0x94>)
 800313c:	f000 fdc0 	bl	8003cc0 <HAL_GPIO_Init>
  __HAL_RCC_I2C3_CLK_ENABLE();
 8003140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003142:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003146:	65a3      	str	r3, [r4, #88]	; 0x58
 8003148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800314a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	9b02      	ldr	r3, [sp, #8]
  __I2C3_FORCE_RESET();
 8003152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003158:	63a3      	str	r3, [r4, #56]	; 0x38
  __I2C3_RELEASE_RESET();
 800315a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800315c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003160:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	4611      	mov	r1, r2
 8003166:	2048      	movs	r0, #72	; 0x48
 8003168:	f000 fcee 	bl	8003b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800316c:	2048      	movs	r0, #72	; 0x48
 800316e:	f000 fd1f 	bl	8003bb0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	4611      	mov	r1, r2
 8003176:	2049      	movs	r0, #73	; 0x49
 8003178:	f000 fce6 	bl	8003b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800317c:	2049      	movs	r0, #73	; 0x49
 800317e:	f000 fd17 	bl	8003bb0 <HAL_NVIC_EnableIRQ>
}
 8003182:	b02a      	add	sp, #168	; 0xa8
 8003184:	bd10      	pop	{r4, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	48000800 	.word	0x48000800

08003190 <SPI2_MspDeInit>:
{
 8003190:	b508      	push	{r3, lr}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <SPI2_MspDeInit+0x18>)
 8003194:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 800319c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <SPI2_MspDeInit+0x1c>)
 80031a2:	f000 fe71 	bl	8003e88 <HAL_GPIO_DeInit>
}
 80031a6:	bd08      	pop	{r3, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	48000400 	.word	0x48000400

080031b0 <I2C3_MspDeInit>:
{
 80031b0:	b508      	push	{r3, lr}
    __HAL_RCC_I2C3_CLK_DISABLE();
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <I2C3_MspDeInit+0x24>)
 80031b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80031b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80031bc:	2103      	movs	r1, #3
 80031be:	4806      	ldr	r0, [pc, #24]	; (80031d8 <I2C3_MspDeInit+0x28>)
 80031c0:	f000 fe62 	bl	8003e88 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80031c4:	2048      	movs	r0, #72	; 0x48
 80031c6:	f000 fd01 	bl	8003bcc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80031ca:	2049      	movs	r0, #73	; 0x49
 80031cc:	f000 fcfe 	bl	8003bcc <HAL_NVIC_DisableIRQ>
}
 80031d0:	bd08      	pop	{r3, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	48000800 	.word	0x48000800

080031dc <BSP_I2C3_DeInit>:
int32_t BSP_I2C3_DeInit(void) {
 80031dc:	b510      	push	{r4, lr}
    I2C3_MspDeInit(&hbusi2c3);
 80031de:	4c06      	ldr	r4, [pc, #24]	; (80031f8 <BSP_I2C3_DeInit+0x1c>)
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7ff ffe5 	bl	80031b0 <I2C3_MspDeInit>
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 80031e6:	4620      	mov	r0, r4
 80031e8:	f001 f900 	bl	80043ec <HAL_I2C_DeInit>
 80031ec:	b908      	cbnz	r0, 80031f2 <BSP_I2C3_DeInit+0x16>
    ret = BSP_ERROR_NONE;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80031f2:	f06f 0007 	mvn.w	r0, #7
 80031f6:	e7fb      	b.n	80031f0 <BSP_I2C3_DeInit+0x14>
 80031f8:	20002694 	.word	0x20002694

080031fc <BSP_I2C3_WriteReg>:
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 80031fc:	b510      	push	{r4, lr}
 80031fe:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8003200:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003204:	9402      	str	r4, [sp, #8]
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	9200      	str	r2, [sp, #0]
 800320a:	2301      	movs	r3, #1
 800320c:	460a      	mov	r2, r1
 800320e:	b2c1      	uxtb	r1, r0
 8003210:	4804      	ldr	r0, [pc, #16]	; (8003224 <BSP_I2C3_WriteReg+0x28>)
 8003212:	f001 f904 	bl	800441e <HAL_I2C_Mem_Write>
 8003216:	b910      	cbnz	r0, 800321e <BSP_I2C3_WriteReg+0x22>
    ret = BSP_ERROR_NONE;
 8003218:	2000      	movs	r0, #0
}
 800321a:	b004      	add	sp, #16
 800321c:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800321e:	f06f 0007 	mvn.w	r0, #7
 8003222:	e7fa      	b.n	800321a <BSP_I2C3_WriteReg+0x1e>
 8003224:	20002694 	.word	0x20002694

08003228 <BSP_I2C3_ReadReg>:
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8003228:	b510      	push	{r4, lr}
 800322a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 800322c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003230:	9402      	str	r4, [sp, #8]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	2301      	movs	r3, #1
 8003238:	460a      	mov	r2, r1
 800323a:	4601      	mov	r1, r0
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <BSP_I2C3_ReadReg+0x28>)
 800323e:	f001 f9c1 	bl	80045c4 <HAL_I2C_Mem_Read>
 8003242:	b910      	cbnz	r0, 800324a <BSP_I2C3_ReadReg+0x22>
    ret = HAL_OK;
 8003244:	2000      	movs	r0, #0
}
 8003246:	b004      	add	sp, #16
 8003248:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800324a:	f06f 0007 	mvn.w	r0, #7
 800324e:	e7fa      	b.n	8003246 <BSP_I2C3_ReadReg+0x1e>
 8003250:	20002694 	.word	0x20002694

08003254 <BSP_SPI2_DeInit>:
int32_t BSP_SPI2_DeInit(void) {
 8003254:	b510      	push	{r4, lr}
  SPI2_MspDeInit(&hbusspi2);
 8003256:	4c06      	ldr	r4, [pc, #24]	; (8003270 <BSP_SPI2_DeInit+0x1c>)
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff ff99 	bl	8003190 <SPI2_MspDeInit>
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 800325e:	4620      	mov	r0, r4
 8003260:	f003 fb36 	bl	80068d0 <HAL_SPI_DeInit>
 8003264:	b908      	cbnz	r0, 800326a <BSP_SPI2_DeInit+0x16>
    ret = BSP_ERROR_NONE;
 8003266:	2000      	movs	r0, #0
}
 8003268:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800326a:	f06f 0007 	mvn.w	r0, #7
 800326e:	e7fb      	b.n	8003268 <BSP_SPI2_DeInit+0x14>
 8003270:	200026e0 	.word	0x200026e0

08003274 <BSP_SPI2_Send>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8003278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327c:	460a      	mov	r2, r1
 800327e:	4601      	mov	r1, r0
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <BSP_SPI2_Send+0x20>)
 8003282:	f003 fb3b 	bl	80068fc <HAL_SPI_Transmit>
 8003286:	b908      	cbnz	r0, 800328c <BSP_SPI2_Send+0x18>
      ret = len;
 8003288:	4620      	mov	r0, r4
}
 800328a:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800328c:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8003290:	e7fb      	b.n	800328a <BSP_SPI2_Send+0x16>
 8003292:	bf00      	nop
 8003294:	200026e0 	.word	0x200026e0

08003298 <BSP_SPI1_SendRecv>:
{
 8003298:	b510      	push	{r4, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800329e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	460a      	mov	r2, r1
 80032a8:	4601      	mov	r1, r0
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <BSP_SPI1_SendRecv+0x28>)
 80032ac:	f003 fc19 	bl	8006ae2 <HAL_SPI_TransmitReceive>
 80032b0:	b910      	cbnz	r0, 80032b8 <BSP_SPI1_SendRecv+0x20>
      ret = len;
 80032b2:	4620      	mov	r0, r4
}
 80032b4:	b002      	add	sp, #8
 80032b6:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80032b8:	f06f 0005 	mvn.w	r0, #5
  return ret;
 80032bc:	e7fa      	b.n	80032b4 <BSP_SPI1_SendRecv+0x1c>
 80032be:	bf00      	nop
 80032c0:	20002744 	.word	0x20002744

080032c4 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 80032c4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80032c6:	f000 fc23 	bl	8003b10 <HAL_GetTick>
}
 80032ca:	bd08      	pop	{r3, pc}

080032cc <MX_SPI2_Init>:
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <MX_SPI2_Init+0x6c>)
 80032d2:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80032d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032d8:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 80032da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032de:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80032e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032e4:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032e6:	2302      	movs	r3, #2
 80032e8:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80032ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032f2:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80032f4:	2330      	movs	r3, #48	; 0x30
 80032f6:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032f8:	2300      	movs	r3, #0
 80032fa:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80032fc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003300:	2207      	movs	r2, #7
 8003302:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003304:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003306:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003308:	f003 fa72 	bl	80067f0 <HAL_SPI_Init>
 800330c:	4605      	mov	r5, r0
 800330e:	b100      	cbz	r0, 8003312 <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8003310:	2501      	movs	r5, #1
  HAL_Delay(5);
 8003312:	2005      	movs	r0, #5
 8003314:	f7fd fcc0 	bl	8000c98 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003320:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8003322:	2005      	movs	r0, #5
 8003324:	f7fd fcb8 	bl	8000c98 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	4628      	mov	r0, r5
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	bf00      	nop
 8003338:	40003800 	.word	0x40003800

0800333c <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 800333c:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 800333e:	480a      	ldr	r0, [pc, #40]	; (8003368 <BSP_SPI2_Init+0x2c>)
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <BSP_SPI2_Init+0x30>)
 8003342:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8003344:	f003 fd34 	bl	8006db0 <HAL_SPI_GetState>
 8003348:	b108      	cbz	r0, 800334e <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 800334a:	2000      	movs	r0, #0
}
 800334c:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 800334e:	4c06      	ldr	r4, [pc, #24]	; (8003368 <BSP_SPI2_Init+0x2c>)
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff fe7d 	bl	8003050 <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff ffb8 	bl	80032cc <MX_SPI2_Init>
 800335c:	2800      	cmp	r0, #0
 800335e:	d0f5      	beq.n	800334c <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8003360:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003364:	e7f2      	b.n	800334c <BSP_SPI2_Init+0x10>
 8003366:	bf00      	nop
 8003368:	200026e0 	.word	0x200026e0
 800336c:	40003800 	.word	0x40003800

08003370 <MX_I2C3_Init>:
{
 8003370:	b508      	push	{r3, lr}
  hi2c->Instance = I2C3;
 8003372:	4a07      	ldr	r2, [pc, #28]	; (8003390 <MX_I2C3_Init+0x20>)
 8003374:	6002      	str	r2, [r0, #0]
  hi2c->Init.Timing = 0x10801541;
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <MX_I2C3_Init+0x24>)
 8003378:	6042      	str	r2, [r0, #4]
  hi2c->Init.OwnAddress1 = 0x33;
 800337a:	2233      	movs	r2, #51	; 0x33
 800337c:	6082      	str	r2, [r0, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800337e:	2201      	movs	r2, #1
 8003380:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003382:	f000 ffd4 	bl	800432e <HAL_I2C_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	b100      	cbz	r0, 800338c <MX_I2C3_Init+0x1c>
    ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd08      	pop	{r3, pc}
 8003390:	40005c00 	.word	0x40005c00
 8003394:	10801541 	.word	0x10801541

08003398 <BSP_I2C3_Init>:
int32_t BSP_I2C3_Init(void) {
 8003398:	b510      	push	{r4, lr}
  hbusi2c3.Instance  = I2C3;
 800339a:	480a      	ldr	r0, [pc, #40]	; (80033c4 <BSP_I2C3_Init+0x2c>)
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <BSP_I2C3_Init+0x30>)
 800339e:	6003      	str	r3, [r0, #0]
  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 80033a0:	f001 fcef 	bl	8004d82 <HAL_I2C_GetState>
 80033a4:	b108      	cbz	r0, 80033aa <BSP_I2C3_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 80033a6:	2000      	movs	r0, #0
}
 80033a8:	bd10      	pop	{r4, pc}
      I2C3_MspInit(&hbusi2c3);
 80033aa:	4c06      	ldr	r4, [pc, #24]	; (80033c4 <BSP_I2C3_Init+0x2c>)
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff fea3 	bl	80030f8 <I2C3_MspInit>
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff ffdc 	bl	8003370 <MX_I2C3_Init>
 80033b8:	b908      	cbnz	r0, 80033be <BSP_I2C3_Init+0x26>
      ret = BSP_ERROR_NONE;
 80033ba:	2000      	movs	r0, #0
  return ret;
 80033bc:	e7f4      	b.n	80033a8 <BSP_I2C3_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 80033be:	f06f 0007 	mvn.w	r0, #7
 80033c2:	e7f1      	b.n	80033a8 <BSP_I2C3_Init+0x10>
 80033c4:	20002694 	.word	0x20002694
 80033c8:	40005c00 	.word	0x40005c00

080033cc <MX_SPI1_Init>:
{
 80033cc:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 80033ce:	4a10      	ldr	r2, [pc, #64]	; (8003410 <MX_SPI1_Init+0x44>)
 80033d0:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80033d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033d6:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80033d8:	2200      	movs	r2, #0
 80033da:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80033dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80033e0:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80033e4:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80033e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ea:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80033ec:	2118      	movs	r1, #24
 80033ee:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033f0:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80033f2:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80033f6:	2107      	movs	r1, #7
 80033f8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033fa:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fc:	2208      	movs	r2, #8
 80033fe:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003400:	f003 f9f6 	bl	80067f0 <HAL_SPI_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	b100      	cbz	r0, 800340a <MX_SPI1_Init+0x3e>
    ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd08      	pop	{r3, pc}
 800340e:	bf00      	nop
 8003410:	40013000 	.word	0x40013000

08003414 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8003414:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8003416:	480a      	ldr	r0, [pc, #40]	; (8003440 <BSP_SPI1_Init+0x2c>)
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <BSP_SPI1_Init+0x30>)
 800341a:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 800341c:	f003 fcc8 	bl	8006db0 <HAL_SPI_GetState>
 8003420:	b108      	cbz	r0, 8003426 <BSP_SPI1_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8003422:	2000      	movs	r0, #0
}
 8003424:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8003426:	4c06      	ldr	r4, [pc, #24]	; (8003440 <BSP_SPI1_Init+0x2c>)
 8003428:	4620      	mov	r0, r4
 800342a:	f7ff fe3b 	bl	80030a4 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 800342e:	4620      	mov	r0, r4
 8003430:	f7ff ffcc 	bl	80033cc <MX_SPI1_Init>
 8003434:	2800      	cmp	r0, #0
 8003436:	d0f5      	beq.n	8003424 <BSP_SPI1_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8003438:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800343c:	e7f2      	b.n	8003424 <BSP_SPI1_Init+0x10>
 800343e:	bf00      	nop
 8003440:	20002744 	.word	0x20002744
 8003444:	40013000 	.word	0x40013000

08003448 <LPS22HB_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LPS22HB_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8003448:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800344a:	b672      	cpsid	i
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 800344c:	6804      	ldr	r4, [r0, #0]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	6023      	str	r3, [r4, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 8003456:	2a01      	cmp	r2, #1
 8003458:	d90a      	bls.n	8003470 <LPS22HB_SPI_Read_nBytes+0x28>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	689c      	ldr	r4, [r3, #8]
 800345e:	f014 0f01 	tst.w	r4, #1
 8003462:	d0f8      	beq.n	8003456 <LPS22HB_SPI_Read_nBytes+0xe>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8003464:	7b1b      	ldrb	r3, [r3, #12]
 8003466:	f801 3b01 	strb.w	r3, [r1], #1
      val += sizeof(uint8_t);
      nBytesToRead--;
 800346a:	3a01      	subs	r2, #1
 800346c:	b292      	uxth	r2, r2
 800346e:	e7f2      	b.n	8003456 <LPS22HB_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f4f 	dsb	sy
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 8003478:	6802      	ldr	r2, [r0, #0]
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003480:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003482:	b662      	cpsie	i
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f012 0f01 	tst.w	r2, #1
 800348c:	d0fa      	beq.n	8003484 <LPS22HB_SPI_Read_nBytes+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 800348e:	7b1b      	ldrb	r3, [r3, #12]
 8003490:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f013 0f80 	tst.w	r3, #128	; 0x80
 800349a:	d1fa      	bne.n	8003492 <LPS22HB_SPI_Read_nBytes+0x4a>
}
 800349c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LPS22HB_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 80034a2:	b672      	cpsid	i
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 80034a4:	6802      	ldr	r2, [r0, #0]
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ac:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 80034ae:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 80034b2:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 80034b6:	6802      	ldr	r2, [r0, #0]
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034be:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034c0:	b662      	cpsie	i
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80034c2:	6803      	ldr	r3, [r0, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	f012 0f01 	tst.w	r2, #1
 80034ca:	d0fa      	beq.n	80034c2 <LPS22HB_SPI_Read+0x20>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 80034cc:	7b1b      	ldrb	r3, [r3, #12]
 80034ce:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034d8:	d1fa      	bne.n	80034d0 <LPS22HB_SPI_Read+0x2e>
}
 80034da:	4770      	bx	lr

080034dc <LPS22HB_SPI_Write>:
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80034dc:	6803      	ldr	r3, [r0, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	f012 0f02 	tst.w	r2, #2
 80034e4:	d0fa      	beq.n	80034dc <LPS22HB_SPI_Write>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 80034e6:	7319      	strb	r1, [r3, #12]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80034e8:	6803      	ldr	r3, [r0, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80034f0:	d1fa      	bne.n	80034e8 <LPS22HB_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034f8:	d1fb      	bne.n	80034f2 <LPS22HB_SPI_Write+0x16>
}
 80034fa:	4770      	bx	lr

080034fc <HTS221_0_Probe>:
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	b08c      	sub	sp, #48	; 0x30
 8003500:	4606      	mov	r6, r0
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003502:	2300      	movs	r3, #0
 8003504:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003506:	23bf      	movs	r3, #191	; 0xbf
 8003508:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_I2C3_Init;
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HTS221_0_Probe+0xd0>)
 800350e:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HTS221_0_Probe+0xd4>)
 8003512:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HTS221_0_Probe+0xd8>)
 8003516:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HTS221_0_Probe+0xdc>)
 800351a:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = BSP_GetTick;
 800351c:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HTS221_0_Probe+0xe0>)
 800351e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8003520:	a905      	add	r1, sp, #20
 8003522:	482f      	ldr	r0, [pc, #188]	; (80035e0 <HTS221_0_Probe+0xe4>)
 8003524:	f7fe ffc2 	bl	80024ac <HTS221_RegisterBusIO>
 8003528:	2800      	cmp	r0, #0
 800352a:	d145      	bne.n	80035b8 <HTS221_0_Probe+0xbc>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800352c:	f10d 0113 	add.w	r1, sp, #19
 8003530:	482b      	ldr	r0, [pc, #172]	; (80035e0 <HTS221_0_Probe+0xe4>)
 8003532:	f7fe fea3 	bl	800227c <HTS221_ReadID>
 8003536:	4605      	mov	r5, r0
 8003538:	2800      	cmp	r0, #0
 800353a:	d140      	bne.n	80035be <HTS221_0_Probe+0xc2>
  else if (id != HTS221_ID)
 800353c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003540:	2bbc      	cmp	r3, #188	; 0xbc
 8003542:	d13f      	bne.n	80035c4 <HTS221_0_Probe+0xc8>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003544:	4c26      	ldr	r4, [pc, #152]	; (80035e0 <HTS221_0_Probe+0xe4>)
 8003546:	4669      	mov	r1, sp
 8003548:	4620      	mov	r0, r4
 800354a:	f7fe fd83 	bl	8002054 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800354e:	f89d 2000 	ldrb.w	r2, [sp]
 8003552:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003556:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                   uint32_t)cap.Humidity << 2);
 800355a:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800355e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8003562:	62e3      	str	r3, [r4, #44]	; 0x2c
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HTS221_0_Probe+0xe8>)
 8003566:	601c      	str	r4, [r3, #0]
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HTS221_0_Probe+0xec>)
 800356a:	6363      	str	r3, [r4, #52]	; 0x34
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800356c:	f016 0f01 	tst.w	r6, #1
 8003570:	d00b      	beq.n	800358a <HTS221_0_Probe+0x8e>
 8003572:	2a01      	cmp	r2, #1
 8003574:	d109      	bne.n	800358a <HTS221_0_Probe+0x8e>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8003576:	4620      	mov	r0, r4
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HTS221_0_Probe+0xf0>)
 800357a:	63e3      	str	r3, [r4, #60]	; 0x3c
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HTS221_0_Probe+0xec>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4798      	blx	r3
 8003582:	4605      	mov	r5, r0
 8003584:	b108      	cbz	r0, 800358a <HTS221_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003586:	f06f 0504 	mvn.w	r5, #4
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800358a:	f016 0f04 	tst.w	r6, #4
 800358e:	d00d      	beq.n	80035ac <HTS221_0_Probe+0xb0>
 8003590:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d109      	bne.n	80035ac <HTS221_0_Probe+0xb0>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HTS221_0_Probe+0xe4>)
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HTS221_0_Probe+0xf4>)
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HTS221_0_Probe+0xe8>)
 80035a4:	6810      	ldr	r0, [r2, #0]
 80035a6:	4798      	blx	r3
 80035a8:	4605      	mov	r5, r0
 80035aa:	b910      	cbnz	r0, 80035b2 <HTS221_0_Probe+0xb6>
}
 80035ac:	4628      	mov	r0, r5
 80035ae:	b00c      	add	sp, #48	; 0x30
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035b2:	f06f 0504 	mvn.w	r5, #4
 80035b6:	e7f9      	b.n	80035ac <HTS221_0_Probe+0xb0>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80035b8:	f06f 0506 	mvn.w	r5, #6
 80035bc:	e7f6      	b.n	80035ac <HTS221_0_Probe+0xb0>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80035be:	f06f 0506 	mvn.w	r5, #6
 80035c2:	e7f3      	b.n	80035ac <HTS221_0_Probe+0xb0>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80035c4:	f06f 0506 	mvn.w	r5, #6
  return ret;
 80035c8:	e7f0      	b.n	80035ac <HTS221_0_Probe+0xb0>
 80035ca:	bf00      	nop
 80035cc:	08003399 	.word	0x08003399
 80035d0:	080031dd 	.word	0x080031dd
 80035d4:	08003229 	.word	0x08003229
 80035d8:	080031fd 	.word	0x080031fd
 80035dc:	080032c5 	.word	0x080032c5
 80035e0:	2000026c 	.word	0x2000026c
 80035e4:	200027a8 	.word	0x200027a8
 80035e8:	2000002c 	.word	0x2000002c
 80035ec:	20000004 	.word	0x20000004
 80035f0:	20000018 	.word	0x20000018

080035f4 <LPS22HB_0_Probe>:
{
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b08d      	sub	sp, #52	; 0x34
 80035f8:	4606      	mov	r6, r0
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 80035fa:	2302      	movs	r3, #2
 80035fc:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = 0x0;
 80035fe:	2300      	movs	r3, #0
 8003600:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = BSP_LPS22HB_Init;
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <LPS22HB_0_Probe+0x108>)
 8003606:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <LPS22HB_0_Probe+0x10c>)
 800360a:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 800360c:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <LPS22HB_0_Probe+0x110>)
 800360e:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 8003610:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <LPS22HB_0_Probe+0x114>)
 8003612:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = BSP_GetTick;
 8003614:	4b3d      	ldr	r3, [pc, #244]	; (800370c <LPS22HB_0_Probe+0x118>)
 8003616:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8003618:	a905      	add	r1, sp, #20
 800361a:	483d      	ldr	r0, [pc, #244]	; (8003710 <LPS22HB_0_Probe+0x11c>)
 800361c:	f7ff fab0 	bl	8002b80 <LPS22HB_RegisterBusIO>
 8003620:	2800      	cmp	r0, #0
 8003622:	d15e      	bne.n	80036e2 <LPS22HB_0_Probe+0xee>
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8003624:	f10d 0113 	add.w	r1, sp, #19
 8003628:	4839      	ldr	r0, [pc, #228]	; (8003710 <LPS22HB_0_Probe+0x11c>)
 800362a:	f7ff f96f 	bl	800290c <LPS22HB_ReadID>
 800362e:	2800      	cmp	r0, #0
 8003630:	d15a      	bne.n	80036e8 <LPS22HB_0_Probe+0xf4>
  else if (id != LPS22HB_ID)
 8003632:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003636:	2bb1      	cmp	r3, #177	; 0xb1
 8003638:	d159      	bne.n	80036ee <LPS22HB_0_Probe+0xfa>
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 800363a:	2101      	movs	r1, #1
 800363c:	4835      	ldr	r0, [pc, #212]	; (8003714 <LPS22HB_0_Probe+0x120>)
 800363e:	f7ff fb91 	bl	8002d64 <lps22hb_boot_set>
 8003642:	4604      	mov	r4, r0
 8003644:	b108      	cbz	r0, 800364a <LPS22HB_0_Probe+0x56>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003646:	f06f 0406 	mvn.w	r4, #6
    HAL_Delay(1000);
 800364a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800364e:	f7fd fb23 	bl	8000c98 <HAL_Delay>
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 8003652:	2201      	movs	r2, #1
 8003654:	2110      	movs	r1, #16
 8003656:	482e      	ldr	r0, [pc, #184]	; (8003710 <LPS22HB_0_Probe+0x11c>)
 8003658:	f7ff fa80 	bl	8002b5c <LPS22HB_Write_Reg>
 800365c:	b108      	cbz	r0, 8003662 <LPS22HB_0_Probe+0x6e>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800365e:	f06f 0406 	mvn.w	r4, #6
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8003662:	4d2d      	ldr	r5, [pc, #180]	; (8003718 <LPS22HB_0_Probe+0x124>)
 8003664:	f105 0754 	add.w	r7, r5, #84	; 0x54
 8003668:	4669      	mov	r1, sp
 800366a:	4638      	mov	r0, r7
 800366c:	f7ff f84c 	bl	8002708 <LPS22HB_GetCapabilities>
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 8003670:	f89d 2000 	ldrb.w	r2, [sp]
 8003674:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003678:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800367c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8003680:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8003684:	632b      	str	r3, [r5, #48]	; 0x30
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <LPS22HB_0_Probe+0x128>)
 8003688:	605f      	str	r7, [r3, #4]
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <LPS22HB_0_Probe+0x12c>)
 800368c:	63ab      	str	r3, [r5, #56]	; 0x38
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800368e:	f016 0f01 	tst.w	r6, #1
 8003692:	d00b      	beq.n	80036ac <LPS22HB_0_Probe+0xb8>
 8003694:	2a01      	cmp	r2, #1
 8003696:	d109      	bne.n	80036ac <LPS22HB_0_Probe+0xb8>
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <LPS22HB_0_Probe+0x130>)
 800369a:	64ab      	str	r3, [r5, #72]	; 0x48
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <LPS22HB_0_Probe+0x12c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4638      	mov	r0, r7
 80036a2:	4798      	blx	r3
 80036a4:	4604      	mov	r4, r0
 80036a6:	b108      	cbz	r0, 80036ac <LPS22HB_0_Probe+0xb8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80036a8:	f06f 0404 	mvn.w	r4, #4
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80036ac:	f016 0f02 	tst.w	r6, #2
 80036b0:	d014      	beq.n	80036dc <LPS22HB_0_Probe+0xe8>
 80036b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d110      	bne.n	80036dc <LPS22HB_0_Probe+0xe8>
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <LPS22HB_0_Probe+0x124>)
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <LPS22HB_0_Probe+0x134>)
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <LPS22HB_0_Probe+0x128>)
 80036c6:	6850      	ldr	r0, [r2, #4]
 80036c8:	4798      	blx	r3
 80036ca:	4604      	mov	r4, r0
 80036cc:	b108      	cbz	r0, 80036d2 <LPS22HB_0_Probe+0xde>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80036ce:	f06f 0404 	mvn.w	r4, #4
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 80036d2:	2101      	movs	r1, #1
 80036d4:	480f      	ldr	r0, [pc, #60]	; (8003714 <LPS22HB_0_Probe+0x120>)
 80036d6:	f7ff fb7d 	bl	8002dd4 <lps22hb_i2c_interface_set>
 80036da:	b958      	cbnz	r0, 80036f4 <LPS22HB_0_Probe+0x100>
}
 80036dc:	4620      	mov	r0, r4
 80036de:	b00d      	add	sp, #52	; 0x34
 80036e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80036e2:	f06f 0406 	mvn.w	r4, #6
 80036e6:	e7f9      	b.n	80036dc <LPS22HB_0_Probe+0xe8>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80036e8:	f06f 0406 	mvn.w	r4, #6
 80036ec:	e7f6      	b.n	80036dc <LPS22HB_0_Probe+0xe8>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80036ee:	f06f 0406 	mvn.w	r4, #6
 80036f2:	e7f3      	b.n	80036dc <LPS22HB_0_Probe+0xe8>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80036f4:	f06f 0406 	mvn.w	r4, #6
  return ret;
 80036f8:	e7f0      	b.n	80036dc <LPS22HB_0_Probe+0xe8>
 80036fa:	bf00      	nop
 80036fc:	0800380b 	.word	0x0800380b
 8003700:	080037f7 	.word	0x080037f7
 8003704:	0800372d 	.word	0x0800372d
 8003708:	080037a5 	.word	0x080037a5
 800370c:	080032c5 	.word	0x080032c5
 8003710:	200002c0 	.word	0x200002c0
 8003714:	200002dc 	.word	0x200002dc
 8003718:	2000026c 	.word	0x2000026c
 800371c:	200027a8 	.word	0x200027a8
 8003720:	20000064 	.word	0x20000064
 8003724:	2000003c 	.word	0x2000003c
 8003728:	20000050 	.word	0x20000050

0800372c <BSP_LPS22HB_ReadReg>:
{
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	4616      	mov	r6, r2
 8003730:	461d      	mov	r5, r3
  uint8_t dataReg = (uint8_t)Reg;
 8003732:	b2cf      	uxtb	r7, r1
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 8003734:	2200      	movs	r2, #0
 8003736:	2108      	movs	r1, #8
 8003738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373c:	f000 fc3b 	bl	8003fb6 <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8003740:	4c17      	ldr	r4, [pc, #92]	; (80037a0 <BSP_LPS22HB_ReadReg+0x74>)
 8003742:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8003746:	4620      	mov	r0, r4
 8003748:	f7ff fec8 	bl	80034dc <LPS22HB_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003754:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);  
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	6813      	ldr	r3, [r2, #0]
 800375a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375e:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8003760:	2d01      	cmp	r5, #1
 8003762:	d917      	bls.n	8003794 <BSP_LPS22HB_ReadReg+0x68>
    LPS22HB_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8003764:	462a      	mov	r2, r5
 8003766:	4631      	mov	r1, r6
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff fe6d 	bl	8003448 <LPS22HB_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 800376e:	2201      	movs	r2, #1
 8003770:	2108      	movs	r1, #8
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003776:	f000 fc1e 	bl	8003fb6 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <BSP_LPS22HB_ReadReg+0x74>)
 800377c:	6811      	ldr	r1, [r2, #0]
 800377e:	680b      	ldr	r3, [r1, #0]
 8003780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003784:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	2000      	movs	r0, #0
 8003792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LPS22HB_SPI_Read(&hbusspi2, (pdata));
 8003794:	4631      	mov	r1, r6
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <BSP_LPS22HB_ReadReg+0x74>)
 8003798:	f7ff fe83 	bl	80034a2 <LPS22HB_SPI_Read>
 800379c:	e7e7      	b.n	800376e <BSP_LPS22HB_ReadReg+0x42>
 800379e:	bf00      	nop
 80037a0:	200026e0 	.word	0x200026e0

080037a4 <BSP_LPS22HB_WriteReg>:
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	4616      	mov	r6, r2
 80037aa:	461d      	mov	r5, r3
  uint8_t dataReg = (uint8_t)Reg;
 80037ac:	ac02      	add	r4, sp, #8
 80037ae:	f804 1d01 	strb.w	r1, [r4, #-1]!
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2108      	movs	r1, #8
 80037b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ba:	f000 fbfc 	bl	8003fb6 <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80037be:	2101      	movs	r1, #1
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff fd57 	bl	8003274 <BSP_SPI2_Send>
 80037c6:	2801      	cmp	r0, #1
 80037c8:	d010      	beq.n	80037ec <BSP_LPS22HB_WriteReg+0x48>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80037ca:	f06f 0405 	mvn.w	r4, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 80037ce:	4629      	mov	r1, r5
 80037d0:	4630      	mov	r0, r6
 80037d2:	f7ff fd4f 	bl	8003274 <BSP_SPI2_Send>
 80037d6:	42a8      	cmp	r0, r5
 80037d8:	d10a      	bne.n	80037f0 <BSP_LPS22HB_WriteReg+0x4c>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80037da:	2201      	movs	r2, #1
 80037dc:	2108      	movs	r1, #8
 80037de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e2:	f000 fbe8 	bl	8003fb6 <HAL_GPIO_WritePin>
}
 80037e6:	4620      	mov	r0, r4
 80037e8:	b002      	add	sp, #8
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 80037ec:	2400      	movs	r4, #0
 80037ee:	e7ee      	b.n	80037ce <BSP_LPS22HB_WriteReg+0x2a>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80037f0:	f06f 0405 	mvn.w	r4, #5
 80037f4:	e7f1      	b.n	80037da <BSP_LPS22HB_WriteReg+0x36>

080037f6 <BSP_LPS22HB_DeInit>:
{
 80037f6:	b508      	push	{r3, lr}
  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 80037f8:	f7ff fd2c 	bl	8003254 <BSP_SPI2_DeInit>
 80037fc:	4603      	mov	r3, r0
 80037fe:	b908      	cbnz	r0, 8003804 <BSP_LPS22HB_DeInit+0xe>
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd08      	pop	{r3, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003804:	f06f 0305 	mvn.w	r3, #5
  return ret;
 8003808:	e7fa      	b.n	8003800 <BSP_LPS22HB_DeInit+0xa>

0800380a <BSP_LPS22HB_Init>:
{  
 800380a:	b530      	push	{r4, r5, lr}
 800380c:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800380e:	2201      	movs	r2, #1
 8003810:	2108      	movs	r1, #8
 8003812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003816:	f000 fbce 	bl	8003fb6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800381a:	2303      	movs	r3, #3
 800381c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003822:	2501      	movs	r5, #1
 8003824:	9502      	str	r5, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8003826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800382a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800382e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003830:	432a      	orrs	r2, r5
 8003832:	64da      	str	r2, [r3, #76]	; 0x4c
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	402b      	ands	r3, r5
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 800383c:	2408      	movs	r4, #8
 800383e:	a906      	add	r1, sp, #24
 8003840:	f841 4d14 	str.w	r4, [r1, #-20]!
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f000 fa3a 	bl	8003cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800384c:	462a      	mov	r2, r5
 800384e:	4621      	mov	r1, r4
 8003850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003854:	f000 fbaf 	bl	8003fb6 <HAL_GPIO_WritePin>
  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 8003858:	f7ff fd70 	bl	800333c <BSP_SPI2_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	b910      	cbnz	r0, 8003866 <BSP_LPS22HB_Init+0x5c>
}
 8003860:	4618      	mov	r0, r3
 8003862:	b007      	add	sp, #28
 8003864:	bd30      	pop	{r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003866:	f06f 0305 	mvn.w	r3, #5
  return ret;
 800386a:	e7f9      	b.n	8003860 <BSP_LPS22HB_Init+0x56>

0800386c <BSP_ENV_SENSOR_Init>:
{
 800386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	460f      	mov	r7, r1
  switch (Instance)
 8003874:	4606      	mov	r6, r0
 8003876:	b120      	cbz	r0, 8003882 <BSP_ENV_SENSOR_Init+0x16>
 8003878:	2801      	cmp	r0, #1
 800387a:	d02c      	beq.n	80038d6 <BSP_ENV_SENSOR_Init+0x6a>
      ret = BSP_ERROR_WRONG_PARAM;
 800387c:	f06f 0001 	mvn.w	r0, #1
 8003880:	e06f      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8003882:	4608      	mov	r0, r1
 8003884:	f7ff fe3a 	bl	80034fc <HTS221_0_Probe>
 8003888:	2800      	cmp	r0, #0
 800388a:	d16d      	bne.n	8003968 <BSP_ENV_SENSOR_Init+0xfc>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800388c:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <BSP_ENV_SENSOR_Init+0x114>)
 800388e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4669      	mov	r1, sp
 8003898:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <BSP_ENV_SENSOR_Init+0x118>)
 800389a:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800389e:	4798      	blx	r3
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d164      	bne.n	800396e <BSP_ENV_SENSOR_Init+0x102>
      if (cap.Temperature == 1U)
 80038a4:	f89d 3000 	ldrb.w	r3, [sp]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d00b      	beq.n	80038c4 <BSP_ENV_SENSOR_Init+0x58>
  uint32_t component_functions = 0;
 80038ac:	46b0      	mov	r8, r6
      if (cap.Humidity == 1U)
 80038ae:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d009      	beq.n	80038ca <BSP_ENV_SENSOR_Init+0x5e>
      if (cap.Pressure == 1U)
 80038b6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d008      	beq.n	80038d0 <BSP_ENV_SENSOR_Init+0x64>
        component_functions |= ENV_TEMPERATURE;
 80038be:	2500      	movs	r5, #0
 80038c0:	2401      	movs	r4, #1
 80038c2:	e031      	b.n	8003928 <BSP_ENV_SENSOR_Init+0xbc>
        component_functions |= ENV_TEMPERATURE;
 80038c4:	f04f 0801 	mov.w	r8, #1
 80038c8:	e7f1      	b.n	80038ae <BSP_ENV_SENSOR_Init+0x42>
        component_functions |= ENV_HUMIDITY;
 80038ca:	f048 0804 	orr.w	r8, r8, #4
 80038ce:	e7f2      	b.n	80038b6 <BSP_ENV_SENSOR_Init+0x4a>
        component_functions |= ENV_PRESSURE;
 80038d0:	f048 0802 	orr.w	r8, r8, #2
 80038d4:	e7f3      	b.n	80038be <BSP_ENV_SENSOR_Init+0x52>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80038d6:	4608      	mov	r0, r1
 80038d8:	f7ff fe8c 	bl	80035f4 <LPS22HB_0_Probe>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d149      	bne.n	8003974 <BSP_ENV_SENSOR_Init+0x108>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <BSP_ENV_SENSOR_Init+0x114>)
 80038e2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4669      	mov	r1, sp
 80038ec:	4a25      	ldr	r2, [pc, #148]	; (8003984 <BSP_ENV_SENSOR_Init+0x118>)
 80038ee:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80038f2:	4798      	blx	r3
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d140      	bne.n	800397a <BSP_ENV_SENSOR_Init+0x10e>
      if (cap.Temperature == 1U)
 80038f8:	f89d 3000 	ldrb.w	r3, [sp]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d00c      	beq.n	800391a <BSP_ENV_SENSOR_Init+0xae>
  uint32_t component_functions = 0;
 8003900:	f04f 0800 	mov.w	r8, #0
      if (cap.Humidity == 1U)
 8003904:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d008      	beq.n	800391e <BSP_ENV_SENSOR_Init+0xb2>
      if (cap.Pressure == 1U)
 800390c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d1d4      	bne.n	80038be <BSP_ENV_SENSOR_Init+0x52>
        component_functions |= ENV_PRESSURE;
 8003914:	f048 0802 	orr.w	r8, r8, #2
 8003918:	e7d1      	b.n	80038be <BSP_ENV_SENSOR_Init+0x52>
        component_functions |= ENV_TEMPERATURE;
 800391a:	46b0      	mov	r8, r6
 800391c:	e7f2      	b.n	8003904 <BSP_ENV_SENSOR_Init+0x98>
        component_functions |= ENV_HUMIDITY;
 800391e:	f048 0804 	orr.w	r8, r8, #4
 8003922:	e7f3      	b.n	800390c <BSP_ENV_SENSOR_Init+0xa0>
    function = function << 1;
 8003924:	0064      	lsls	r4, r4, #1
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8003926:	3501      	adds	r5, #1
 8003928:	2d02      	cmp	r5, #2
 800392a:	d819      	bhi.n	8003960 <BSP_ENV_SENSOR_Init+0xf4>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800392c:	ea34 0307 	bics.w	r3, r4, r7
 8003930:	d1f8      	bne.n	8003924 <BSP_ENV_SENSOR_Init+0xb8>
 8003932:	ea34 0308 	bics.w	r3, r4, r8
 8003936:	d1f5      	bne.n	8003924 <BSP_ENV_SENSOR_Init+0xb8>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <BSP_ENV_SENSOR_Init+0x11c>)
 800393a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800393e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003942:	441a      	add	r2, r3
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <BSP_ENV_SENSOR_Init+0x114>)
 8003946:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <BSP_ENV_SENSOR_Init+0x118>)
 8003950:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8003954:	4798      	blx	r3
 8003956:	2800      	cmp	r0, #0
 8003958:	d0e4      	beq.n	8003924 <BSP_ENV_SENSOR_Init+0xb8>
        return BSP_ERROR_COMPONENT_FAILURE;
 800395a:	f06f 0004 	mvn.w	r0, #4
 800395e:	e000      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
 8003960:	2000      	movs	r0, #0
}
 8003962:	b004      	add	sp, #16
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	e7f9      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800396e:	f06f 0006 	mvn.w	r0, #6
 8003972:	e7f6      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_NO_INIT;
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	e7f3      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800397a:	f06f 0006 	mvn.w	r0, #6
 800397e:	e7f0      	b.n	8003962 <BSP_ENV_SENSOR_Init+0xf6>
 8003980:	2000026c 	.word	0x2000026c
 8003984:	200027a8 	.word	0x200027a8
 8003988:	08009954 	.word	0x08009954

0800398c <BSP_ENV_SENSOR_Enable>:
{
 800398c:	b508      	push	{r3, lr}
  if (Instance >= ENV_INSTANCES_NBR)
 800398e:	2801      	cmp	r0, #1
 8003990:	d81c      	bhi.n	80039cc <BSP_ENV_SENSOR_Enable+0x40>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <BSP_ENV_SENSOR_Enable+0x4c>)
 8003994:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	ea31 0303 	bics.w	r3, r1, r3
 800399e:	d118      	bne.n	80039d2 <BSP_ENV_SENSOR_Enable+0x46>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <BSP_ENV_SENSOR_Enable+0x50>)
 80039a2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80039a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80039aa:	441a      	add	r2, r3
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <BSP_ENV_SENSOR_Enable+0x4c>)
 80039ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <BSP_ENV_SENSOR_Enable+0x54>)
 80039b8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80039bc:	4798      	blx	r3
 80039be:	4603      	mov	r3, r0
 80039c0:	b908      	cbnz	r0, 80039c6 <BSP_ENV_SENSOR_Enable+0x3a>
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039c6:	f06f 0304 	mvn.w	r3, #4
 80039ca:	e7fa      	b.n	80039c2 <BSP_ENV_SENSOR_Enable+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 80039cc:	f06f 0301 	mvn.w	r3, #1
 80039d0:	e7f7      	b.n	80039c2 <BSP_ENV_SENSOR_Enable+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 80039d2:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80039d6:	e7f4      	b.n	80039c2 <BSP_ENV_SENSOR_Enable+0x36>
 80039d8:	2000026c 	.word	0x2000026c
 80039dc:	08009954 	.word	0x08009954
 80039e0:	200027a8 	.word	0x200027a8

080039e4 <BSP_ENV_SENSOR_GetValue>:
{
 80039e4:	b508      	push	{r3, lr}
  if (Instance >= ENV_INSTANCES_NBR)
 80039e6:	2801      	cmp	r0, #1
 80039e8:	d81e      	bhi.n	8003a28 <BSP_ENV_SENSOR_GetValue+0x44>
 80039ea:	460b      	mov	r3, r1
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <BSP_ENV_SENSOR_GetValue+0x50>)
 80039ee:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80039f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80039f4:	ea33 0101 	bics.w	r1, r3, r1
 80039f8:	d119      	bne.n	8003a2e <BSP_ENV_SENSOR_GetValue+0x4a>
 80039fa:	4611      	mov	r1, r2
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80039fc:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <BSP_ENV_SENSOR_GetValue+0x54>)
 80039fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003a06:	441a      	add	r2, r3
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <BSP_ENV_SENSOR_GetValue+0x50>)
 8003a0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <BSP_ENV_SENSOR_GetValue+0x58>)
 8003a14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003a18:	4798      	blx	r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	b908      	cbnz	r0, 8003a22 <BSP_ENV_SENSOR_GetValue+0x3e>
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a22:	f06f 0304 	mvn.w	r3, #4
 8003a26:	e7fa      	b.n	8003a1e <BSP_ENV_SENSOR_GetValue+0x3a>
    ret = BSP_ERROR_WRONG_PARAM;
 8003a28:	f06f 0301 	mvn.w	r3, #1
 8003a2c:	e7f7      	b.n	8003a1e <BSP_ENV_SENSOR_GetValue+0x3a>
      ret = BSP_ERROR_WRONG_PARAM;
 8003a2e:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8003a32:	e7f4      	b.n	8003a1e <BSP_ENV_SENSOR_GetValue+0x3a>
 8003a34:	2000026c 	.word	0x2000026c
 8003a38:	08009954 	.word	0x08009954
 8003a3c:	200027a8 	.word	0x200027a8

08003a40 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a40:	490f      	ldr	r1, [pc, #60]	; (8003a80 <SystemInit+0x40>)
 8003a42:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <SystemInit+0x44>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a58:	2000      	movs	r0, #0
 8003a5a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003a62:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003a66:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a74:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a76:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a7c:	608b      	str	r3, [r1, #8]
#endif
}
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_InitTick+0x44>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b90b      	cbnz	r3, 8003a96 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a92:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003a94:	4770      	bx	lr
{
 8003a96:	b510      	push	{r4, lr}
 8003a98:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <HAL_InitTick+0x48>)
 8003aa4:	6810      	ldr	r0, [r2, #0]
 8003aa6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003aaa:	f000 f8a1 	bl	8003bf0 <HAL_SYSTICK_Config>
 8003aae:	b968      	cbnz	r0, 8003acc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab0:	2c0f      	cmp	r4, #15
 8003ab2:	d901      	bls.n	8003ab8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	e00a      	b.n	8003ace <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4621      	mov	r1, r4
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	f000 f842 	bl	8003b48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <HAL_InitTick+0x44>)
 8003ac6:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e000      	b.n	8003ace <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003acc:	2001      	movs	r0, #1
}
 8003ace:	bd10      	pop	{r4, pc}
 8003ad0:	20000084 	.word	0x20000084
 8003ad4:	20000080 	.word	0x20000080

08003ad8 <HAL_Init>:
{
 8003ad8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ada:	2003      	movs	r0, #3
 8003adc:	f000 f822 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ae0:	200f      	movs	r0, #15
 8003ae2:	f7ff ffd3 	bl	8003a8c <HAL_InitTick>
 8003ae6:	b110      	cbz	r0, 8003aee <HAL_Init+0x16>
    status = HAL_ERROR;
 8003ae8:	2401      	movs	r4, #1
}
 8003aea:	4620      	mov	r0, r4
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	4604      	mov	r4, r0
    HAL_MspInit();
 8003af0:	f7ff ffca 	bl	8003a88 <HAL_MspInit>
 8003af4:	e7f9      	b.n	8003aea <HAL_Init+0x12>
	...

08003af8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_IncTick+0x10>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4a03      	ldr	r2, [pc, #12]	; (8003b0c <HAL_IncTick+0x14>)
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	440b      	add	r3, r1
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000084 	.word	0x20000084
 8003b0c:	200027b0 	.word	0x200027b0

08003b10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <HAL_GetTick+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200027b0 	.word	0x200027b0

08003b1c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8003b1c:	f04f 7086 	mov.w	r0, #17563648	; 0x10c0000
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b30:	0200      	lsls	r0, r0, #8
 8003b32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b36:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003b38:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003b3c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003b40:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_NVIC_SetPriority+0x60>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b52:	f1c3 0407 	rsb	r4, r3, #7
 8003b56:	2c04      	cmp	r4, #4
 8003b58:	bf28      	it	cs
 8003b5a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5c:	1d1d      	adds	r5, r3, #4
 8003b5e:	2d06      	cmp	r5, #6
 8003b60:	d918      	bls.n	8003b94 <HAL_NVIC_SetPriority+0x4c>
 8003b62:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	f04f 35ff 	mov.w	r5, #4294967295
 8003b68:	fa05 f404 	lsl.w	r4, r5, r4
 8003b6c:	ea21 0104 	bic.w	r1, r1, r4
 8003b70:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b72:	fa05 f303 	lsl.w	r3, r5, r3
 8003b76:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	db0b      	blt.n	8003b98 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	0109      	lsls	r1, r1, #4
 8003b82:	b2c9      	uxtb	r1, r1
 8003b84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003b88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003b8c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b90:	bc30      	pop	{r4, r5}
 8003b92:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b94:	2300      	movs	r3, #0
 8003b96:	e7e5      	b.n	8003b64 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	f000 000f 	and.w	r0, r0, #15
 8003b9c:	0109      	lsls	r1, r1, #4
 8003b9e:	b2c9      	uxtb	r1, r1
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <HAL_NVIC_SetPriority+0x64>)
 8003ba2:	5419      	strb	r1, [r3, r0]
 8003ba4:	e7f4      	b.n	8003b90 <HAL_NVIC_SetPriority+0x48>
 8003ba6:	bf00      	nop
 8003ba8:	e000ed00 	.word	0xe000ed00
 8003bac:	e000ed14 	.word	0xe000ed14

08003bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	db07      	blt.n	8003bc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb4:	f000 021f 	and.w	r2, r0, #31
 8003bb8:	0940      	lsrs	r0, r0, #5
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	4a02      	ldr	r2, [pc, #8]	; (8003bc8 <HAL_NVIC_EnableIRQ+0x18>)
 8003bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	db0c      	blt.n	8003bea <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd0:	f000 021f 	and.w	r2, r0, #31
 8003bd4:	0940      	lsrs	r0, r0, #5
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4093      	lsls	r3, r2
 8003bda:	3020      	adds	r0, #32
 8003bdc:	4a03      	ldr	r2, [pc, #12]	; (8003bec <HAL_NVIC_DisableIRQ+0x20>)
 8003bde:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003be6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf0:	3801      	subs	r0, #1
 8003bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003bf6:	d20a      	bcs.n	8003c0e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_SYSTICK_Config+0x24>)
 8003bfa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <HAL_SYSTICK_Config+0x28>)
 8003bfe:	21f0      	movs	r1, #240	; 0xf0
 8003c00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c04:	2000      	movs	r0, #0
 8003c06:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e010 	.word	0xe000e010
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003c1c:	4770      	bx	lr

08003c1e <HAL_SYSTICK_IRQHandler>:
{
 8003c1e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003c20:	f7ff fffc 	bl	8003c1c <HAL_SYSTICK_Callback>
}
 8003c24:	bd08      	pop	{r3, pc}

08003c26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c26:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c28:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d003      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c32:	2304      	movs	r3, #4
 8003c34:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003c38:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3a:	6802      	ldr	r2, [r0, #0]
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f023 030e 	bic.w	r3, r3, #14
 8003c42:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c44:	6802      	ldr	r2, [r0, #0]
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c50:	f003 031c 	and.w	r3, r3, #28
 8003c54:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003c56:	2201      	movs	r2, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003c62:	2300      	movs	r3, #0
 8003c64:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003c68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c6a:	b113      	cbz	r3, 8003c72 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8003c6c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2000      	movs	r0, #0
 8003c70:	e7e2      	b.n	8003c38 <HAL_DMA_Abort_IT+0x12>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e7e0      	b.n	8003c38 <HAL_DMA_Abort_IT+0x12>

08003c76 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8003c76:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003c7c:	b911      	cbnz	r1, 8003c84 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003c7e:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2000      	movs	r0, #0
      break;
 8003c82:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8003c84:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8003c86:	4770      	bx	lr

08003c88 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003c88:	b110      	cbz	r0, 8003c90 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003c8a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	4770      	bx	lr
    return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
  }
}
 8003c92:	4770      	bx	lr

08003c94 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003c94:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	f3c3 4200 	ubfx	r2, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003ca6:	0152      	lsls	r2, r2, #5
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_EXTI_IRQHandler+0x28>)
  regval = (*regaddr & maskline);
 8003caa:	5854      	ldr	r4, [r2, r1]

  if (regval != 0x00u)
 8003cac:	421c      	tst	r4, r3
 8003cae:	d003      	beq.n	8003cb8 <HAL_EXTI_IRQHandler+0x24>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003cb0:	5053      	str	r3, [r2, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003cb2:	6843      	ldr	r3, [r0, #4]
 8003cb4:	b103      	cbz	r3, 8003cb8 <HAL_EXTI_IRQHandler+0x24>
    {
      hexti->PendingCallback();
 8003cb6:	4798      	blx	r3
    }
  }
}
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	bf00      	nop
 8003cbc:	40010414 	.word	0x40010414

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003cc4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc6:	e03f      	b.n	8003d48 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cc8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cca:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003cce:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 8003cd2:	409c      	lsls	r4, r3
 8003cd4:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 8003cd6:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003cd8:	e05f      	b.n	8003d9a <HAL_GPIO_Init+0xda>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cda:	2406      	movs	r4, #6
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003cde:	2400      	movs	r4, #0
 8003ce0:	40b4      	lsls	r4, r6
 8003ce2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ce4:	3502      	adds	r5, #2
 8003ce6:	4e64      	ldr	r6, [pc, #400]	; (8003e78 <HAL_GPIO_Init+0x1b8>)
 8003ce8:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cec:	4c63      	ldr	r4, [pc, #396]	; (8003e7c <HAL_GPIO_Init+0x1bc>)
 8003cee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003cf0:	43d4      	mvns	r4, r2
 8003cf2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf6:	684f      	ldr	r7, [r1, #4]
 8003cf8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003cfc:	d001      	beq.n	8003d02 <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8003cfe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8003d02:	4d5e      	ldr	r5, [pc, #376]	; (8003e7c <HAL_GPIO_Init+0x1bc>)
 8003d04:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003d06:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003d08:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d0c:	684f      	ldr	r7, [r1, #4]
 8003d0e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003d12:	d001      	beq.n	8003d18 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8003d14:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003d18:	4d58      	ldr	r5, [pc, #352]	; (8003e7c <HAL_GPIO_Init+0x1bc>)
 8003d1a:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d1c:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8003d1e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d22:	684f      	ldr	r7, [r1, #4]
 8003d24:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003d28:	d001      	beq.n	8003d2e <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8003d2a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003d2e:	4d53      	ldr	r5, [pc, #332]	; (8003e7c <HAL_GPIO_Init+0x1bc>)
 8003d30:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003d32:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003d34:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d36:	684e      	ldr	r6, [r1, #4]
 8003d38:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003d3c:	d001      	beq.n	8003d42 <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8003d3e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003d42:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_GPIO_Init+0x1bc>)
 8003d44:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003d46:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d48:	680a      	ldr	r2, [r1, #0]
 8003d4a:	fa32 f403 	lsrs.w	r4, r2, r3
 8003d4e:	f000 8091 	beq.w	8003e74 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d52:	2401      	movs	r4, #1
 8003d54:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003d56:	4022      	ands	r2, r4
 8003d58:	d0f5      	beq.n	8003d46 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d5a:	684d      	ldr	r5, [r1, #4]
 8003d5c:	1e6e      	subs	r6, r5, #1
 8003d5e:	2e01      	cmp	r6, #1
 8003d60:	d903      	bls.n	8003d6a <HAL_GPIO_Init+0xaa>
 8003d62:	2d11      	cmp	r5, #17
 8003d64:	d001      	beq.n	8003d6a <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d66:	2d12      	cmp	r5, #18
 8003d68:	d112      	bne.n	8003d90 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8003d6a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d6c:	005f      	lsls	r7, r3, #1
 8003d6e:	2503      	movs	r5, #3
 8003d70:	40bd      	lsls	r5, r7
 8003d72:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d76:	68cd      	ldr	r5, [r1, #12]
 8003d78:	40bd      	lsls	r5, r7
 8003d7a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003d7c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d7e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d80:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d84:	684d      	ldr	r5, [r1, #4]
 8003d86:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8003d8a:	409d      	lsls	r5, r3
 8003d8c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003d8e:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d90:	684d      	ldr	r5, [r1, #4]
 8003d92:	f005 0603 	and.w	r6, r5, #3
 8003d96:	2e03      	cmp	r6, #3
 8003d98:	d096      	beq.n	8003cc8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8003d9a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d9c:	005f      	lsls	r7, r3, #1
 8003d9e:	2403      	movs	r4, #3
 8003da0:	40bc      	lsls	r4, r7
 8003da2:	43e4      	mvns	r4, r4
 8003da4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003da6:	688e      	ldr	r6, [r1, #8]
 8003da8:	40be      	lsls	r6, r7
 8003daa:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8003dac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dae:	684d      	ldr	r5, [r1, #4]
 8003db0:	2d02      	cmp	r5, #2
 8003db2:	d001      	beq.n	8003db8 <HAL_GPIO_Init+0xf8>
 8003db4:	2d12      	cmp	r5, #18
 8003db6:	d113      	bne.n	8003de0 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3u];
 8003db8:	08de      	lsrs	r6, r3, #3
 8003dba:	3608      	adds	r6, #8
 8003dbc:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dc0:	f003 0507 	and.w	r5, r3, #7
 8003dc4:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8003dc8:	250f      	movs	r5, #15
 8003dca:	fa05 f50c 	lsl.w	r5, r5, ip
 8003dce:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd2:	690d      	ldr	r5, [r1, #16]
 8003dd4:	fa05 f50c 	lsl.w	r5, r5, ip
 8003dd8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003ddc:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003de0:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003de2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003de4:	684d      	ldr	r5, [r1, #4]
 8003de6:	f005 0503 	and.w	r5, r5, #3
 8003dea:	40bd      	lsls	r5, r7
 8003dec:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003dee:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df0:	684c      	ldr	r4, [r1, #4]
 8003df2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003df6:	d0a6      	beq.n	8003d46 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df8:	4c21      	ldr	r4, [pc, #132]	; (8003e80 <HAL_GPIO_Init+0x1c0>)
 8003dfa:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003dfc:	f045 0501 	orr.w	r5, r5, #1
 8003e00:	6625      	str	r5, [r4, #96]	; 0x60
 8003e02:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003e04:	f004 0401 	and.w	r4, r4, #1
 8003e08:	9401      	str	r4, [sp, #4]
 8003e0a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e0c:	089d      	lsrs	r5, r3, #2
 8003e0e:	1cae      	adds	r6, r5, #2
 8003e10:	4c19      	ldr	r4, [pc, #100]	; (8003e78 <HAL_GPIO_Init+0x1b8>)
 8003e12:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e16:	f003 0403 	and.w	r4, r3, #3
 8003e1a:	00a6      	lsls	r6, r4, #2
 8003e1c:	240f      	movs	r4, #15
 8003e1e:	40b4      	lsls	r4, r6
 8003e20:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e24:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003e28:	f43f af59 	beq.w	8003cde <HAL_GPIO_Init+0x1e>
 8003e2c:	4c15      	ldr	r4, [pc, #84]	; (8003e84 <HAL_GPIO_Init+0x1c4>)
 8003e2e:	42a0      	cmp	r0, r4
 8003e30:	d016      	beq.n	8003e60 <HAL_GPIO_Init+0x1a0>
 8003e32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e36:	42a0      	cmp	r0, r4
 8003e38:	d014      	beq.n	8003e64 <HAL_GPIO_Init+0x1a4>
 8003e3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e3e:	42a0      	cmp	r0, r4
 8003e40:	d012      	beq.n	8003e68 <HAL_GPIO_Init+0x1a8>
 8003e42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e46:	42a0      	cmp	r0, r4
 8003e48:	d010      	beq.n	8003e6c <HAL_GPIO_Init+0x1ac>
 8003e4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e4e:	42a0      	cmp	r0, r4
 8003e50:	d00e      	beq.n	8003e70 <HAL_GPIO_Init+0x1b0>
 8003e52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e56:	42a0      	cmp	r0, r4
 8003e58:	f43f af3f 	beq.w	8003cda <HAL_GPIO_Init+0x1a>
 8003e5c:	2407      	movs	r4, #7
 8003e5e:	e73f      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003e60:	2401      	movs	r4, #1
 8003e62:	e73d      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003e64:	2402      	movs	r4, #2
 8003e66:	e73b      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003e68:	2403      	movs	r4, #3
 8003e6a:	e739      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003e6c:	2404      	movs	r4, #4
 8003e6e:	e737      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
 8003e70:	2405      	movs	r4, #5
 8003e72:	e735      	b.n	8003ce0 <HAL_GPIO_Init+0x20>
  }
}
 8003e74:	b003      	add	sp, #12
 8003e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40021000 	.word	0x40021000
 8003e84:	48000400 	.word	0x48000400

08003e88 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003e88:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e8a:	fa31 f302 	lsrs.w	r3, r1, r2
 8003e8e:	f000 8083 	beq.w	8003f98 <HAL_GPIO_DeInit+0x110>
{
 8003e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e94:	e02f      	b.n	8003ef6 <HAL_GPIO_DeInit+0x6e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e96:	2606      	movs	r6, #6
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	fa06 f404 	lsl.w	r4, r6, r4
 8003ea0:	42ac      	cmp	r4, r5
 8003ea2:	d060      	beq.n	8003f66 <HAL_GPIO_DeInit+0xde>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ea4:	6805      	ldr	r5, [r0, #0]
 8003ea6:	0054      	lsls	r4, r2, #1
 8003ea8:	2603      	movs	r6, #3
 8003eaa:	fa06 f404 	lsl.w	r4, r6, r4
 8003eae:	4325      	orrs	r5, r4
 8003eb0:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003eb2:	fa22 f506 	lsr.w	r5, r2, r6
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8003ebc:	f002 0707 	and.w	r7, r2, #7
 8003ec0:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003ec4:	270f      	movs	r7, #15
 8003ec6:	fa07 f70c 	lsl.w	r7, r7, ip
 8003eca:	ea26 0607 	bic.w	r6, r6, r7
 8003ece:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ed2:	6885      	ldr	r5, [r0, #8]
 8003ed4:	43e4      	mvns	r4, r4
 8003ed6:	4025      	ands	r5, r4
 8003ed8:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eda:	6845      	ldr	r5, [r0, #4]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	401d      	ands	r5, r3
 8003ee0:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ee2:	68c5      	ldr	r5, [r0, #12]
 8003ee4:	402c      	ands	r4, r5
 8003ee6:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003ee8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003eea:	4023      	ands	r3, r4
 8003eec:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003eee:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003ef0:	fa31 f302 	lsrs.w	r3, r1, r2
 8003ef4:	d04f      	beq.n	8003f96 <HAL_GPIO_DeInit+0x10e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4093      	lsls	r3, r2
    if (iocurrent != 0x00u)
 8003efa:	ea13 0e01 	ands.w	lr, r3, r1
 8003efe:	d0f6      	beq.n	8003eee <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f00:	0897      	lsrs	r7, r2, #2
 8003f02:	1cbd      	adds	r5, r7, #2
 8003f04:	4c25      	ldr	r4, [pc, #148]	; (8003f9c <HAL_GPIO_DeInit+0x114>)
 8003f06:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f0a:	f002 0403 	and.w	r4, r2, #3
 8003f0e:	00a4      	lsls	r4, r4, #2
 8003f10:	260f      	movs	r6, #15
 8003f12:	fa06 fc04 	lsl.w	ip, r6, r4
 8003f16:	ea0c 0505 	and.w	r5, ip, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f1a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f1e:	d0bc      	beq.n	8003e9a <HAL_GPIO_DeInit+0x12>
 8003f20:	4e1f      	ldr	r6, [pc, #124]	; (8003fa0 <HAL_GPIO_DeInit+0x118>)
 8003f22:	42b0      	cmp	r0, r6
 8003f24:	d015      	beq.n	8003f52 <HAL_GPIO_DeInit+0xca>
 8003f26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f2a:	42b0      	cmp	r0, r6
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_DeInit+0xce>
 8003f2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f32:	42b0      	cmp	r0, r6
 8003f34:	d011      	beq.n	8003f5a <HAL_GPIO_DeInit+0xd2>
 8003f36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f3a:	42b0      	cmp	r0, r6
 8003f3c:	d00f      	beq.n	8003f5e <HAL_GPIO_DeInit+0xd6>
 8003f3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f42:	42b0      	cmp	r0, r6
 8003f44:	d00d      	beq.n	8003f62 <HAL_GPIO_DeInit+0xda>
 8003f46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f4a:	42b0      	cmp	r0, r6
 8003f4c:	d0a3      	beq.n	8003e96 <HAL_GPIO_DeInit+0xe>
 8003f4e:	2607      	movs	r6, #7
 8003f50:	e7a4      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003f52:	2601      	movs	r6, #1
 8003f54:	e7a2      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003f56:	2602      	movs	r6, #2
 8003f58:	e7a0      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003f5a:	2603      	movs	r6, #3
 8003f5c:	e79e      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003f5e:	2604      	movs	r6, #4
 8003f60:	e79c      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
 8003f62:	2605      	movs	r6, #5
 8003f64:	e79a      	b.n	8003e9c <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8003f66:	4c0f      	ldr	r4, [pc, #60]	; (8003fa4 <HAL_GPIO_DeInit+0x11c>)
 8003f68:	6826      	ldr	r6, [r4, #0]
 8003f6a:	ea6f 050e 	mvn.w	r5, lr
 8003f6e:	402e      	ands	r6, r5
 8003f70:	6026      	str	r6, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f72:	6866      	ldr	r6, [r4, #4]
 8003f74:	402e      	ands	r6, r5
 8003f76:	6066      	str	r6, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f78:	68a6      	ldr	r6, [r4, #8]
 8003f7a:	402e      	ands	r6, r5
 8003f7c:	60a6      	str	r6, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003f7e:	68e6      	ldr	r6, [r4, #12]
 8003f80:	4035      	ands	r5, r6
 8003f82:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f84:	4d05      	ldr	r5, [pc, #20]	; (8003f9c <HAL_GPIO_DeInit+0x114>)
 8003f86:	1cbc      	adds	r4, r7, #2
 8003f88:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8003f8c:	ea26 060c 	bic.w	r6, r6, ip
 8003f90:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8003f94:	e786      	b.n	8003ea4 <HAL_GPIO_DeInit+0x1c>
  }
}
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	48000400 	.word	0x48000400
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fa8:	6903      	ldr	r3, [r0, #16]
 8003faa:	4219      	tst	r1, r3
 8003fac:	d101      	bne.n	8003fb2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fae:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003fb0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb6:	b90a      	cbnz	r2, 8003fbc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003fba:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fbc:	6181      	str	r1, [r0, #24]
 8003fbe:	4770      	bx	lr

08003fc0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	f012 0f02 	tst.w	r2, #2
 8003fc8:	d001      	beq.n	8003fce <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fca:	2200      	movs	r2, #0
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	f012 0f01 	tst.w	r2, #1
 8003fd6:	d103      	bne.n	8003fe0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	619a      	str	r2, [r3, #24]
  }
}
 8003fe0:	4770      	bx	lr

08003fe2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe2:	b470      	push	{r4, r5, r6}
 8003fe4:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003fe6:	6805      	ldr	r5, [r0, #0]
 8003fe8:	6868      	ldr	r0, [r5, #4]
 8003fea:	0d74      	lsrs	r4, r6, #21
 8003fec:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003ff0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003ff4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003ff8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003ffc:	f044 0403 	orr.w	r4, r4, #3
 8004000:	ea20 0004 	bic.w	r0, r0, r4
 8004004:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800400c:	4319      	orrs	r1, r3
 800400e:	4331      	orrs	r1, r6
 8004010:	4301      	orrs	r1, r0
 8004012:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004014:	bc70      	pop	{r4, r5, r6}
 8004016:	4770      	bx	lr

08004018 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004018:	f011 0f01 	tst.w	r1, #1
 800401c:	d009      	beq.n	8004032 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800401e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004022:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004026:	2b28      	cmp	r3, #40	; 0x28
 8004028:	d001      	beq.n	800402e <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800402a:	23f2      	movs	r3, #242	; 0xf2
 800402c:	e002      	b.n	8004034 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800402e:	2342      	movs	r3, #66	; 0x42
 8004030:	e000      	b.n	8004034 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004032:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004034:	f011 0f02 	tst.w	r1, #2
 8004038:	d029      	beq.n	800408e <I2C_Disable_IRQ+0x76>
{
 800403a:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800403c:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004040:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004044:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004048:	2a28      	cmp	r2, #40	; 0x28
 800404a:	d012      	beq.n	8004072 <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800404c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004050:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004054:	d10f      	bne.n	8004076 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004056:	2910      	cmp	r1, #16
 8004058:	d010      	beq.n	800407c <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800405a:	2920      	cmp	r1, #32
 800405c:	d011      	beq.n	8004082 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800405e:	2940      	cmp	r1, #64	; 0x40
 8004060:	d012      	beq.n	8004088 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004062:	6801      	ldr	r1, [r0, #0]
 8004064:	680a      	ldr	r2, [r1, #0]
 8004066:	ea22 0303 	bic.w	r3, r2, r3
 800406a:	600b      	str	r3, [r1, #0]
}
 800406c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004070:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004072:	4623      	mov	r3, r4
 8004074:	e7ec      	b.n	8004050 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004076:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800407a:	e7ec      	b.n	8004056 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800407c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004080:	e7eb      	b.n	800405a <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	e7ea      	b.n	800405e <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	e7e9      	b.n	8004062 <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800408e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004092:	d10b      	bne.n	80040ac <I2C_Disable_IRQ+0x94>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004094:	2910      	cmp	r1, #16
 8004096:	d00c      	beq.n	80040b2 <I2C_Disable_IRQ+0x9a>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004098:	2920      	cmp	r1, #32
 800409a:	d00d      	beq.n	80040b8 <I2C_Disable_IRQ+0xa0>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800409c:	2940      	cmp	r1, #64	; 0x40
 800409e:	d00e      	beq.n	80040be <I2C_Disable_IRQ+0xa6>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80040a0:	6801      	ldr	r1, [r0, #0]
 80040a2:	680a      	ldr	r2, [r1, #0]
 80040a4:	ea22 0303 	bic.w	r3, r2, r3
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040ac:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80040b0:	e7f0      	b.n	8004094 <I2C_Disable_IRQ+0x7c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80040b6:	e7ef      	b.n	8004098 <I2C_Disable_IRQ+0x80>
    tmpisr |= I2C_IT_STOPI;
 80040b8:	f043 0320 	orr.w	r3, r3, #32
 80040bc:	e7ee      	b.n	800409c <I2C_Disable_IRQ+0x84>
    tmpisr |= I2C_IT_TCI;
 80040be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c2:	e7ed      	b.n	80040a0 <I2C_Disable_IRQ+0x88>

080040c4 <I2C_IsAcknowledgeFailed>:
{
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4604      	mov	r4, r0
 80040c8:	460d      	mov	r5, r1
 80040ca:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040cc:	6803      	ldr	r3, [r0, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f013 0f10 	tst.w	r3, #16
 80040d4:	d01c      	beq.n	8004110 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	f012 0f20 	tst.w	r2, #32
 80040de:	d119      	bne.n	8004114 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80040e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040e4:	d0f7      	beq.n	80040d6 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7ff fd13 	bl	8003b10 <HAL_GetTick>
 80040ea:	1b80      	subs	r0, r0, r6
 80040ec:	42a8      	cmp	r0, r5
 80040ee:	d801      	bhi.n	80040f4 <I2C_IsAcknowledgeFailed+0x30>
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	d1f0      	bne.n	80040d6 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040f6:	f043 0320 	orr.w	r3, r3, #32
 80040fa:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	2320      	movs	r3, #32
 80040fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	2300      	movs	r3, #0
 8004104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004108:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
 800410e:	e020      	b.n	8004152 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8004110:	2000      	movs	r0, #0
 8004112:	e01e      	b.n	8004152 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	2210      	movs	r2, #16
 8004116:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	2520      	movs	r5, #32
 800411c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800411e:	4620      	mov	r0, r4
 8004120:	f7ff ff4e 	bl	8003fc0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	6853      	ldr	r3, [r2, #4]
 8004128:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800412c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004130:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800413a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004142:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	2300      	movs	r3, #0
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800414c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004150:	2001      	movs	r0, #1
}
 8004152:	bd70      	pop	{r4, r5, r6, pc}

08004154 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
 800415a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f013 0f02 	tst.w	r3, #2
 8004164:	d11d      	bne.n	80041a2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f7ff ffaa 	bl	80040c4 <I2C_IsAcknowledgeFailed>
 8004170:	b9c8      	cbnz	r0, 80041a6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004172:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004176:	d0f1      	beq.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004178:	f7ff fcca 	bl	8003b10 <HAL_GetTick>
 800417c:	1b80      	subs	r0, r0, r6
 800417e:	42a8      	cmp	r0, r5
 8004180:	d801      	bhi.n	8004186 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004182:	2d00      	cmp	r5, #0
 8004184:	d1ea      	bne.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800418e:	2320      	movs	r3, #32
 8004190:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	2300      	movs	r3, #0
 8004196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800419a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800419e:	2001      	movs	r0, #1
 80041a0:	e000      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80041a2:	2000      	movs	r0, #0
}
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
 80041a8:	e7fc      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080041aa <I2C_WaitOnFlagUntilTimeout>:
{
 80041aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ac:	4605      	mov	r5, r0
 80041ae:	460f      	mov	r7, r1
 80041b0:	4616      	mov	r6, r2
 80041b2:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	ea37 0303 	bics.w	r3, r7, r3
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	42b3      	cmp	r3, r6
 80041c4:	d118      	bne.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80041ca:	d0f3      	beq.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7ff fca0 	bl	8003b10 <HAL_GetTick>
 80041d0:	9b06      	ldr	r3, [sp, #24]
 80041d2:	1ac0      	subs	r0, r0, r3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d801      	bhi.n	80041dc <I2C_WaitOnFlagUntilTimeout+0x32>
 80041d8:	2c00      	cmp	r4, #0
 80041da:	d1eb      	bne.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80041de:	f043 0320 	orr.w	r3, r3, #32
 80041e2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	2320      	movs	r3, #32
 80041e6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80041f0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80041f4:	2001      	movs	r0, #1
 80041f6:	e000      	b.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80041f8:	2000      	movs	r0, #0
}
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041fc <I2C_RequestMemoryWrite>:
{
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	4604      	mov	r4, r0
 8004202:	4616      	mov	r6, r2
 8004204:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <I2C_RequestMemoryWrite+0x6c>)
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800420e:	b2ea      	uxtb	r2, r5
 8004210:	f7ff fee7 	bl	8003fe2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004214:	9a07      	ldr	r2, [sp, #28]
 8004216:	9906      	ldr	r1, [sp, #24]
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff ff9b 	bl	8004154 <I2C_WaitOnTXISFlagUntilTimeout>
 800421e:	b9e8      	cbnz	r0, 800425c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004220:	2d01      	cmp	r5, #1
 8004222:	d10e      	bne.n	8004242 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	b2f6      	uxtb	r6, r6
 8004228:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800422a:	9b07      	ldr	r3, [sp, #28]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	9b06      	ldr	r3, [sp, #24]
 8004230:	2200      	movs	r2, #0
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff ffb8 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	b178      	cbz	r0, 800425e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e00d      	b.n	800425e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0a32      	lsrs	r2, r6, #8
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004248:	9a07      	ldr	r2, [sp, #28]
 800424a:	9906      	ldr	r1, [sp, #24]
 800424c:	4620      	mov	r0, r4
 800424e:	f7ff ff81 	bl	8004154 <I2C_WaitOnTXISFlagUntilTimeout>
 8004252:	b938      	cbnz	r0, 8004264 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	b2f6      	uxtb	r6, r6
 8004258:	629e      	str	r6, [r3, #40]	; 0x28
 800425a:	e7e6      	b.n	800422a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
}
 800425e:	4618      	mov	r0, r3
 8004260:	b002      	add	sp, #8
 8004262:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e7fa      	b.n	800425e <I2C_RequestMemoryWrite+0x62>
 8004268:	80002000 	.word	0x80002000

0800426c <I2C_RequestMemoryRead>:
{
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	4604      	mov	r4, r0
 8004272:	4616      	mov	r6, r2
 8004274:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <I2C_RequestMemoryRead+0x6c>)
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	b2ea      	uxtb	r2, r5
 800427e:	f7ff feb0 	bl	8003fe2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004282:	9a07      	ldr	r2, [sp, #28]
 8004284:	9906      	ldr	r1, [sp, #24]
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff ff64 	bl	8004154 <I2C_WaitOnTXISFlagUntilTimeout>
 800428c:	b9e8      	cbnz	r0, 80042ca <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800428e:	2d01      	cmp	r5, #1
 8004290:	d10e      	bne.n	80042b0 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	b2f6      	uxtb	r6, r6
 8004296:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004298:	9b07      	ldr	r3, [sp, #28]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	9b06      	ldr	r3, [sp, #24]
 800429e:	2200      	movs	r2, #0
 80042a0:	2140      	movs	r1, #64	; 0x40
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff ff81 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	b178      	cbz	r0, 80042cc <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e00d      	b.n	80042cc <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	0a32      	lsrs	r2, r6, #8
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	9a07      	ldr	r2, [sp, #28]
 80042b8:	9906      	ldr	r1, [sp, #24]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff ff4a 	bl	8004154 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c0:	b938      	cbnz	r0, 80042d2 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	b2f6      	uxtb	r6, r6
 80042c6:	629e      	str	r6, [r3, #40]	; 0x28
 80042c8:	e7e6      	b.n	8004298 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	b002      	add	sp, #8
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e7fa      	b.n	80042cc <I2C_RequestMemoryRead+0x60>
 80042d6:	bf00      	nop
 80042d8:	80002000 	.word	0x80002000

080042dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4605      	mov	r5, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f013 0f20 	tst.w	r3, #32
 80042ec:	d11a      	bne.n	8004324 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	4632      	mov	r2, r6
 80042f0:	4621      	mov	r1, r4
 80042f2:	4628      	mov	r0, r5
 80042f4:	f7ff fee6 	bl	80040c4 <I2C_IsAcknowledgeFailed>
 80042f8:	b9b0      	cbnz	r0, 8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7ff fc09 	bl	8003b10 <HAL_GetTick>
 80042fe:	1b80      	subs	r0, r0, r6
 8004300:	42a0      	cmp	r0, r4
 8004302:	d801      	bhi.n	8004308 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004304:	2c00      	cmp	r4, #0
 8004306:	d1ed      	bne.n	80042e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800430a:	f043 0320 	orr.w	r3, r3, #32
 800430e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004310:	2320      	movs	r3, #32
 8004312:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004316:	2300      	movs	r3, #0
 8004318:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800431c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004320:	2001      	movs	r0, #1
}
 8004322:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004324:	2000      	movs	r0, #0
 8004326:	e7fc      	b.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004328:	2001      	movs	r0, #1
 800432a:	e7fa      	b.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800432c <HAL_I2C_MspInit>:
}
 800432c:	4770      	bx	lr

0800432e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800432e:	2800      	cmp	r0, #0
 8004330:	d059      	beq.n	80043e6 <HAL_I2C_Init+0xb8>
{
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004336:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800433a:	2b00      	cmp	r3, #0
 800433c:	d043      	beq.n	80043c6 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800433e:	2324      	movs	r3, #36	; 0x24
 8004340:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004356:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	6893      	ldr	r3, [r2, #8]
 800435c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004360:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d033      	beq.n	80043d0 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004370:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d031      	beq.n	80043dc <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004378:	6822      	ldr	r2, [r4, #0]
 800437a:	6853      	ldr	r3, [r2, #4]
 800437c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004384:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	68d3      	ldr	r3, [r2, #12]
 800438a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800438e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	6962      	ldr	r2, [r4, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	69a1      	ldr	r1, [r4, #24]
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800439e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043a0:	69e3      	ldr	r3, [r4, #28]
 80043a2:	6a21      	ldr	r1, [r4, #32]
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b4:	2000      	movs	r0, #0
 80043b6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	2320      	movs	r3, #32
 80043ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043be:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80043c4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80043c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80043ca:	f7ff ffaf 	bl	800432c <HAL_I2C_MspInit>
 80043ce:	e7b6      	b.n	800433e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d8:	6093      	str	r3, [r2, #8]
 80043da:	e7ca      	b.n	8004372 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	e7c8      	b.n	8004378 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80043e6:	2001      	movs	r0, #1
}
 80043e8:	4770      	bx	lr

080043ea <HAL_I2C_MspDeInit>:
}
 80043ea:	4770      	bx	lr

080043ec <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80043ec:	b1a8      	cbz	r0, 800441a <HAL_I2C_DeInit+0x2e>
{
 80043ee:	b510      	push	{r4, lr}
 80043f0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f2:	2324      	movs	r3, #36	; 0x24
 80043f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80043f8:	6802      	ldr	r2, [r0, #0]
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004402:	f7ff fff2 	bl	80043ea <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004406:	2000      	movs	r0, #0
 8004408:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800440a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800440e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8004414:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004418:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800441a:	2001      	movs	r0, #1
}
 800441c:	4770      	bx	lr

0800441e <HAL_I2C_Mem_Write>:
{
 800441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800442c:	b2ed      	uxtb	r5, r5
 800442e:	2d20      	cmp	r5, #32
 8004430:	f040 80ba 	bne.w	80045a8 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 8004434:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004436:	b1dc      	cbz	r4, 8004470 <HAL_I2C_Mem_Write+0x52>
 8004438:	b1d7      	cbz	r7, 8004470 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 800443a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800443e:	2c01      	cmp	r4, #1
 8004440:	f000 80b7 	beq.w	80045b2 <HAL_I2C_Mem_Write+0x194>
 8004444:	4698      	mov	r8, r3
 8004446:	4691      	mov	r9, r2
 8004448:	460d      	mov	r5, r1
 800444a:	4604      	mov	r4, r0
 800444c:	f04f 0a01 	mov.w	sl, #1
 8004450:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004454:	f7ff fb5c 	bl	8003b10 <HAL_GetTick>
 8004458:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800445a:	9000      	str	r0, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	4652      	mov	r2, sl
 8004460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff fea0 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 800446a:	b130      	cbz	r0, 800447a <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e09c      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004474:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e097      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800447a:	2321      	movs	r3, #33	; 0x21
 800447c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800448a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800448c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800448e:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004490:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004492:	9601      	str	r6, [sp, #4]
 8004494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4643      	mov	r3, r8
 800449a:	464a      	mov	r2, r9
 800449c:	4629      	mov	r1, r5
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff feac 	bl	80041fc <I2C_RequestMemoryWrite>
 80044a4:	b970      	cbnz	r0, 80044c4 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2bff      	cmp	r3, #255	; 0xff
 80044ac:	d90f      	bls.n	80044ce <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ba:	4629      	mov	r1, r5
 80044bc:	4620      	mov	r0, r4
 80044be:	f7ff fd90 	bl	8003fe2 <I2C_TransferConfig>
 80044c2:	e021      	b.n	8004508 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 80044c4:	2300      	movs	r3, #0
 80044c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80044ca:	4653      	mov	r3, sl
 80044cc:	e06d      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 80044ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80044d0:	b292      	uxth	r2, r2
 80044d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	4629      	mov	r1, r5
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7ff fd7e 	bl	8003fe2 <I2C_TransferConfig>
 80044e6:	e00f      	b.n	8004508 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 80044e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80044ea:	b292      	uxth	r2, r2
 80044ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	4629      	mov	r1, r5
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff fd71 	bl	8003fe2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d032      	beq.n	800456e <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004508:	4632      	mov	r2, r6
 800450a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fe21 	bl	8004154 <I2C_WaitOnTXISFlagUntilTimeout>
 8004512:	2800      	cmp	r0, #0
 8004514:	d14f      	bne.n	80045b6 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004516:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800451e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004520:	3301      	adds	r3, #1
 8004522:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004524:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004526:	3b01      	subs	r3, #1
 8004528:	b29b      	uxth	r3, r3
 800452a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800452c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29b      	uxth	r3, r3
 8004532:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004534:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004536:	b292      	uxth	r2, r2
 8004538:	2a00      	cmp	r2, #0
 800453a:	d0e1      	beq.n	8004500 <HAL_I2C_Mem_Write+0xe2>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1df      	bne.n	8004500 <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004540:	9600      	str	r6, [sp, #0]
 8004542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	4620      	mov	r0, r4
 800454a:	f7ff fe2e 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 800454e:	bba0      	cbnz	r0, 80045ba <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d9c7      	bls.n	80044e8 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004564:	4629      	mov	r1, r5
 8004566:	4620      	mov	r0, r4
 8004568:	f7ff fd3b 	bl	8003fe2 <I2C_TransferConfig>
 800456c:	e7c8      	b.n	8004500 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456e:	4632      	mov	r2, r6
 8004570:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004572:	4620      	mov	r0, r4
 8004574:	f7ff feb2 	bl	80042dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	bb00      	cbnz	r0, 80045be <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457c:	6822      	ldr	r2, [r4, #0]
 800457e:	2120      	movs	r1, #32
 8004580:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	6842      	ldr	r2, [r0, #4]
 8004586:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800458a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800458e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800459c:	2200      	movs	r2, #0
 800459e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80045a2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80045a6:	e000      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	b002      	add	sp, #8
 80045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80045b2:	2302      	movs	r3, #2
 80045b4:	e7f9      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e7f7      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7f5      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e7f3      	b.n	80045aa <HAL_I2C_Mem_Write+0x18c>
	...

080045c4 <HAL_I2C_Mem_Read>:
{
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ce:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80045d2:	b2ed      	uxtb	r5, r5
 80045d4:	2d20      	cmp	r5, #32
 80045d6:	f040 80bc 	bne.w	8004752 <HAL_I2C_Mem_Read+0x18e>
    if ((pData == NULL) || (Size == 0U))
 80045da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045dc:	b1dc      	cbz	r4, 8004616 <HAL_I2C_Mem_Read+0x52>
 80045de:	b1d7      	cbz	r7, 8004616 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 80045e0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80045e4:	2c01      	cmp	r4, #1
 80045e6:	f000 80b9 	beq.w	800475c <HAL_I2C_Mem_Read+0x198>
 80045ea:	4698      	mov	r8, r3
 80045ec:	4691      	mov	r9, r2
 80045ee:	460d      	mov	r5, r1
 80045f0:	4604      	mov	r4, r0
 80045f2:	f04f 0a01 	mov.w	sl, #1
 80045f6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80045fa:	f7ff fa89 	bl	8003b10 <HAL_GetTick>
 80045fe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004600:	9000      	str	r0, [sp, #0]
 8004602:	2319      	movs	r3, #25
 8004604:	4652      	mov	r2, sl
 8004606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff fdcd 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 8004610:	b130      	cbz	r0, 8004620 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e09e      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800461a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e099      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004620:	2322      	movs	r3, #34	; 0x22
 8004622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462c:	2300      	movs	r3, #0
 800462e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004632:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004634:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004636:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004638:	9601      	str	r6, [sp, #4]
 800463a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4643      	mov	r3, r8
 8004640:	464a      	mov	r2, r9
 8004642:	4629      	mov	r1, r5
 8004644:	4620      	mov	r0, r4
 8004646:	f7ff fe11 	bl	800426c <I2C_RequestMemoryRead>
 800464a:	b970      	cbnz	r0, 800466a <HAL_I2C_Mem_Read+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800464c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	2bff      	cmp	r3, #255	; 0xff
 8004652:	d90f      	bls.n	8004674 <HAL_I2C_Mem_Read+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004658:	4b44      	ldr	r3, [pc, #272]	; (800476c <HAL_I2C_Mem_Read+0x1a8>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004660:	4629      	mov	r1, r5
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff fcbd 	bl	8003fe2 <I2C_TransferConfig>
 8004668:	e021      	b.n	80046ae <HAL_I2C_Mem_Read+0xea>
      __HAL_UNLOCK(hi2c);
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004670:	4653      	mov	r3, sl
 8004672:	e06f      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8004674:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004676:	b292      	uxth	r2, r2
 8004678:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800467a:	4b3c      	ldr	r3, [pc, #240]	; (800476c <HAL_I2C_Mem_Read+0x1a8>)
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	4629      	mov	r1, r5
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff fcab 	bl	8003fe2 <I2C_TransferConfig>
 800468c:	e00f      	b.n	80046ae <HAL_I2C_Mem_Read+0xea>
          hi2c->XferSize = hi2c->XferCount;
 800468e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004690:	b292      	uxth	r2, r2
 8004692:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4629      	mov	r1, r5
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff fc9e 	bl	8003fe2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80046a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d034      	beq.n	8004718 <HAL_I2C_Mem_Read+0x154>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	9600      	str	r6, [sp, #0]
 80046b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046b2:	2200      	movs	r2, #0
 80046b4:	2104      	movs	r1, #4
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fd77 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d14f      	bne.n	8004760 <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ca:	3301      	adds	r3, #1
 80046cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80046ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80046d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046d8:	3a01      	subs	r2, #1
 80046da:	b292      	uxth	r2, r2
 80046dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046e0:	b292      	uxth	r2, r2
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d0df      	beq.n	80046a6 <HAL_I2C_Mem_Read+0xe2>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1dd      	bne.n	80046a6 <HAL_I2C_Mem_Read+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ea:	9600      	str	r6, [sp, #0]
 80046ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ee:	2200      	movs	r2, #0
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff fd59 	bl	80041aa <I2C_WaitOnFlagUntilTimeout>
 80046f8:	bba0      	cbnz	r0, 8004764 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2bff      	cmp	r3, #255	; 0xff
 8004700:	d9c5      	bls.n	800468e <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004702:	22ff      	movs	r2, #255	; 0xff
 8004704:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800470e:	4629      	mov	r1, r5
 8004710:	4620      	mov	r0, r4
 8004712:	f7ff fc66 	bl	8003fe2 <I2C_TransferConfig>
 8004716:	e7c6      	b.n	80046a6 <HAL_I2C_Mem_Read+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004718:	4632      	mov	r2, r6
 800471a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fddd 	bl	80042dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	bb00      	cbnz	r0, 8004768 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	2120      	movs	r1, #32
 800472a:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	6842      	ldr	r2, [r0, #4]
 8004730:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004734:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004738:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004746:	2200      	movs	r2, #0
 8004748:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800474c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004750:	e000      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
}
 8004754:	4618      	mov	r0, r3
 8004756:	b002      	add	sp, #8
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800475c:	2302      	movs	r3, #2
 800475e:	e7f9      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e7f7      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e7f5      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e7f3      	b.n	8004754 <HAL_I2C_Mem_Read+0x190>
 800476c:	80002400 	.word	0x80002400

08004770 <HAL_I2C_EV_IRQHandler>:
{
 8004770:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004772:	6803      	ldr	r3, [r0, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004776:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004778:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800477a:	b103      	cbz	r3, 800477e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800477c:	4798      	blx	r3
}
 800477e:	bd08      	pop	{r3, pc}

08004780 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004780:	4770      	bx	lr

08004782 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004782:	4770      	bx	lr

08004784 <I2C_ITSlaveSeqCplt>:
{
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004788:	6803      	ldr	r3, [r0, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	2100      	movs	r1, #0
 800478e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004792:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004796:	d00e      	beq.n	80047b6 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800479e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b29      	cmp	r3, #41	; 0x29
 80047a8:	d00d      	beq.n	80047c6 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b2a      	cmp	r3, #42	; 0x2a
 80047b2:	d018      	beq.n	80047e6 <I2C_ITSlaveSeqCplt+0x62>
}
 80047b4:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047b6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80047ba:	d0f1      	beq.n	80047a0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e7ec      	b.n	80047a0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047c6:	2328      	movs	r3, #40	; 0x28
 80047c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047cc:	2321      	movs	r3, #33	; 0x21
 80047ce:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047d0:	2101      	movs	r1, #1
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff fc20 	bl	8004018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047de:	4620      	mov	r0, r4
 80047e0:	f7ff ffce 	bl	8004780 <HAL_I2C_SlaveTxCpltCallback>
 80047e4:	e7e6      	b.n	80047b4 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047e6:	2328      	movs	r3, #40	; 0x28
 80047e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047ec:	2322      	movs	r3, #34	; 0x22
 80047ee:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047f0:	2102      	movs	r1, #2
 80047f2:	4620      	mov	r0, r4
 80047f4:	f7ff fc10 	bl	8004018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047f8:	2300      	movs	r3, #0
 80047fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff ffbf 	bl	8004782 <HAL_I2C_SlaveRxCpltCallback>
}
 8004804:	e7d6      	b.n	80047b4 <I2C_ITSlaveSeqCplt+0x30>

08004806 <HAL_I2C_AddrCallback>:
}
 8004806:	4770      	bx	lr

08004808 <I2C_ITAddrCplt>:
{
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800480a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800480e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004812:	2b28      	cmp	r3, #40	; 0x28
 8004814:	d006      	beq.n	8004824 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004816:	6803      	ldr	r3, [r0, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800481c:	2300      	movs	r3, #0
 800481e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004824:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	699e      	ldr	r6, [r3, #24]
 800482a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	0c12      	lsrs	r2, r2, #16
 8004832:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800483c:	68df      	ldr	r7, [r3, #12]
 800483e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004842:	68c1      	ldr	r1, [r0, #12]
 8004844:	2902      	cmp	r1, #2
 8004846:	d122      	bne.n	800488e <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004848:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800484c:	f015 0f06 	tst.w	r5, #6
 8004850:	d110      	bne.n	8004874 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004852:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004854:	3101      	adds	r1, #1
 8004856:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004858:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800485a:	2902      	cmp	r1, #2
 800485c:	d1e1      	bne.n	8004822 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 800485e:	2100      	movs	r1, #0
 8004860:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004862:	2008      	movs	r0, #8
 8004864:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004866:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800486a:	4631      	mov	r1, r6
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff ffca 	bl	8004806 <HAL_I2C_AddrCallback>
 8004872:	e7d6      	b.n	8004822 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	f7ff fbce 	bl	8004018 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800487c:	2300      	movs	r3, #0
 800487e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004882:	463a      	mov	r2, r7
 8004884:	4631      	mov	r1, r6
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff ffbd 	bl	8004806 <HAL_I2C_AddrCallback>
 800488c:	e7c9      	b.n	8004822 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800488e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004892:	f7ff fbc1 	bl	8004018 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800489c:	462a      	mov	r2, r5
 800489e:	4631      	mov	r1, r6
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7ff ffb0 	bl	8004806 <HAL_I2C_AddrCallback>
 80048a6:	e7bc      	b.n	8004822 <I2C_ITAddrCplt+0x1a>

080048a8 <HAL_I2C_ListenCpltCallback>:
}
 80048a8:	4770      	bx	lr
	...

080048ac <I2C_ITListenCplt>:
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <I2C_ITListenCplt+0x64>)
 80048b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	2220      	movs	r2, #32
 80048ba:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80048c2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048c4:	f011 0f04 	tst.w	r1, #4
 80048c8:	d012      	beq.n	80048f0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ca:	6803      	ldr	r3, [r0, #0]
 80048cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048d4:	3301      	adds	r3, #1
 80048d6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80048d8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80048da:	b14b      	cbz	r3, 80048f0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80048dc:	3b01      	subs	r3, #1
 80048de:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80048e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff fb8f 	bl	8004018 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004900:	2300      	movs	r3, #0
 8004902:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff ffce 	bl	80048a8 <HAL_I2C_ListenCpltCallback>
}
 800490c:	bd10      	pop	{r4, pc}
 800490e:	bf00      	nop
 8004910:	ffff0000 	.word	0xffff0000

08004914 <HAL_I2C_ErrorCallback>:
}
 8004914:	4770      	bx	lr

08004916 <HAL_I2C_AbortCpltCallback>:
}
 8004916:	4770      	bx	lr

08004918 <I2C_TreatErrorCallback>:
{
 8004918:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800491a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d006      	beq.n	8004932 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004924:	2300      	movs	r3, #0
 8004926:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004928:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800492c:	f7ff fff2 	bl	8004914 <HAL_I2C_ErrorCallback>
}
 8004930:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	2320      	movs	r3, #32
 8004934:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	2300      	movs	r3, #0
 800493a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800493c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004940:	f7ff ffe9 	bl	8004916 <HAL_I2C_AbortCpltCallback>
 8004944:	e7f4      	b.n	8004930 <I2C_TreatErrorCallback+0x18>
	...

08004948 <I2C_ITError>:
{
 8004948:	b510      	push	{r4, lr}
 800494a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800494c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004950:	2200      	movs	r2, #0
 8004952:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004956:	483b      	ldr	r0, [pc, #236]	; (8004a44 <I2C_ITError+0xfc>)
 8004958:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800495a:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800495c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800495e:	4311      	orrs	r1, r2
 8004960:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004962:	3b28      	subs	r3, #40	; 0x28
 8004964:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004966:	2b02      	cmp	r3, #2
 8004968:	d819      	bhi.n	800499e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800496a:	2103      	movs	r1, #3
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff fb53 	bl	8004018 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004972:	2328      	movs	r3, #40	; 0x28
 8004974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004978:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <I2C_ITError+0x100>)
 800497a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800497c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800497e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004980:	b11a      	cbz	r2, 800498a <I2C_ITError+0x42>
 8004982:	2b11      	cmp	r3, #17
 8004984:	d01b      	beq.n	80049be <I2C_ITError+0x76>
 8004986:	2b21      	cmp	r3, #33	; 0x21
 8004988:	d019      	beq.n	80049be <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800498a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800498c:	b11a      	cbz	r2, 8004996 <I2C_ITError+0x4e>
 800498e:	2b12      	cmp	r3, #18
 8004990:	d036      	beq.n	8004a00 <I2C_ITError+0xb8>
 8004992:	2b22      	cmp	r3, #34	; 0x22
 8004994:	d034      	beq.n	8004a00 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff ffbe 	bl	8004918 <I2C_TreatErrorCallback>
}
 800499c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800499e:	f248 0103 	movw	r1, #32771	; 0x8003
 80049a2:	4620      	mov	r0, r4
 80049a4:	f7ff fb38 	bl	8004018 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80049a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b60      	cmp	r3, #96	; 0x60
 80049b0:	d002      	beq.n	80049b8 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80049b2:	2320      	movs	r3, #32
 80049b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	6363      	str	r3, [r4, #52]	; 0x34
 80049bc:	e7de      	b.n	800497c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80049c6:	d003      	beq.n	80049d0 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ce:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049d2:	f7ff f950 	bl	8003c76 <HAL_DMA_GetState>
 80049d6:	2801      	cmp	r0, #1
 80049d8:	d00e      	beq.n	80049f8 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <I2C_ITError+0x104>)
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049e8:	f7ff f91d 	bl	8003c26 <HAL_DMA_Abort_IT>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d0d5      	beq.n	800499c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049f4:	4798      	blx	r3
 80049f6:	e7d1      	b.n	800499c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff ff8d 	bl	8004918 <I2C_TreatErrorCallback>
 80049fe:	e7cd      	b.n	800499c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004a08:	d003      	beq.n	8004a12 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a10:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a14:	f7ff f92f 	bl	8003c76 <HAL_DMA_GetState>
 8004a18:	2801      	cmp	r0, #1
 8004a1a:	d00e      	beq.n	8004a3a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a1e:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <I2C_ITError+0x104>)
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004a22:	2300      	movs	r3, #0
 8004a24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a28:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a2a:	f7ff f8fc 	bl	8003c26 <HAL_DMA_Abort_IT>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0b4      	beq.n	800499c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a36:	4798      	blx	r3
 8004a38:	e7b0      	b.n	800499c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f7ff ff6c 	bl	8004918 <I2C_TreatErrorCallback>
 8004a40:	e7ac      	b.n	800499c <I2C_ITError+0x54>
 8004a42:	bf00      	nop
 8004a44:	ffff0000 	.word	0xffff0000
 8004a48:	08004bb5 	.word	0x08004bb5
 8004a4c:	08004d69 	.word	0x08004d69

08004a50 <I2C_ITSlaveCplt>:
{
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a56:	6802      	ldr	r2, [r0, #0]
 8004a58:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a60:	2120      	movs	r1, #32
 8004a62:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a64:	2b21      	cmp	r3, #33	; 0x21
 8004a66:	d00d      	beq.n	8004a84 <I2C_ITSlaveCplt+0x34>
 8004a68:	2b29      	cmp	r3, #41	; 0x29
 8004a6a:	d00b      	beq.n	8004a84 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a6c:	2b22      	cmp	r3, #34	; 0x22
 8004a6e:	d001      	beq.n	8004a74 <I2C_ITSlaveCplt+0x24>
 8004a70:	2b2a      	cmp	r3, #42	; 0x2a
 8004a72:	d10e      	bne.n	8004a92 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a74:	f248 0102 	movw	r1, #32770	; 0x8002
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff facd 	bl	8004018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a7e:	2322      	movs	r3, #34	; 0x22
 8004a80:	6323      	str	r3, [r4, #48]	; 0x30
 8004a82:	e006      	b.n	8004a92 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a84:	f248 0101 	movw	r1, #32769	; 0x8001
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f7ff fac5 	bl	8004018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a8e:	2321      	movs	r3, #33	; 0x21
 8004a90:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6853      	ldr	r3, [r2, #4]
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	6853      	ldr	r3, [r2, #4]
 8004aa0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004aa4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004aa8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7ff fa84 	bl	8003fc0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ab8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004abc:	d03f      	beq.n	8004b3e <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	6813      	ldr	r3, [r2, #0]
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004ac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aca:	b11b      	cbz	r3, 8004ad4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ad4:	f015 0f04 	tst.w	r5, #4
 8004ad8:	d010      	beq.n	8004afc <I2C_ITSlaveCplt+0xac>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ada:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae8:	3301      	adds	r3, #1
 8004aea:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004aec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004aee:	b12b      	cbz	r3, 8004afc <I2C_ITSlaveCplt+0xac>
      hi2c->XferSize--;
 8004af0:	3b01      	subs	r3, #1
 8004af2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004afc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	b11b      	cbz	r3, 8004b0a <I2C_ITSlaveCplt+0xba>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b10:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b14:	bb1b      	cbnz	r3, 8004b5e <I2C_ITSlaveCplt+0x10e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b1c:	d12d      	bne.n	8004b7a <I2C_ITSlaveCplt+0x12a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b1e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	d038      	beq.n	8004b9a <I2C_ITSlaveCplt+0x14a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff fe22 	bl	8004780 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b3c:	e02c      	b.n	8004b98 <I2C_ITSlaveCplt+0x148>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b3e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004b42:	d0c7      	beq.n	8004ad4 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b4c:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0bf      	beq.n	8004ad4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004b5c:	e7ba      	b.n	8004ad4 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7ff fef1 	bl	8004948 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b66:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	d113      	bne.n	8004b98 <I2C_ITSlaveCplt+0x148>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fe9a 	bl	80048ac <I2C_ITListenCplt>
 8004b78:	e00e      	b.n	8004b98 <I2C_ITSlaveCplt+0x148>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7ff fe02 	bl	8004784 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <I2C_ITSlaveCplt+0x160>)
 8004b82:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	2320      	movs	r3, #32
 8004b86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fe88 	bl	80048a8 <HAL_I2C_ListenCpltCallback>
}
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ba4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff fdea 	bl	8004782 <HAL_I2C_SlaveRxCpltCallback>
 8004bae:	e7f3      	b.n	8004b98 <I2C_ITSlaveCplt+0x148>
 8004bb0:	ffff0000 	.word	0xffff0000

08004bb4 <I2C_Slave_ISR_IT>:
{
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004bb6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004bb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	f000 809c 	beq.w	8004cfa <I2C_Slave_ISR_IT+0x146>
 8004bc2:	4616      	mov	r6, r2
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bce:	f011 0f20 	tst.w	r1, #32
 8004bd2:	d002      	beq.n	8004bda <I2C_Slave_ISR_IT+0x26>
 8004bd4:	f012 0f20 	tst.w	r2, #32
 8004bd8:	d119      	bne.n	8004c0e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004bda:	f015 0f10 	tst.w	r5, #16
 8004bde:	d03e      	beq.n	8004c5e <I2C_Slave_ISR_IT+0xaa>
 8004be0:	f016 0f10 	tst.w	r6, #16
 8004be4:	d03b      	beq.n	8004c5e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8004be6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	bb43      	cbnz	r3, 8004c3e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004bec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b28      	cmp	r3, #40	; 0x28
 8004bf4:	d00e      	beq.n	8004c14 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004bf6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b29      	cmp	r3, #41	; 0x29
 8004bfe:	d011      	beq.n	8004c24 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	2210      	movs	r2, #16
 8004c04:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004c0e:	f7ff ff1f 	bl	8004a50 <I2C_ITSlaveCplt>
 8004c12:	e7e2      	b.n	8004bda <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c14:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8004c18:	d1ed      	bne.n	8004bf6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7ff fe45 	bl	80048ac <I2C_ITListenCplt>
 8004c22:	e7f0      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c24:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004c28:	d0ea      	beq.n	8004c00 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff f9c5 	bl	8003fc0 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fda4 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8004c3c:	e7e3      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	2210      	movs	r2, #16
 8004c42:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c46:	f043 0304 	orr.w	r3, r3, #4
 8004c4a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c4c:	b117      	cbz	r7, 8004c54 <I2C_Slave_ISR_IT+0xa0>
 8004c4e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8004c52:	d1d8      	bne.n	8004c06 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c54:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff fe76 	bl	8004948 <I2C_ITError>
 8004c5c:	e7d3      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004c5e:	f015 0f04 	tst.w	r5, #4
 8004c62:	d01e      	beq.n	8004ca2 <I2C_Slave_ISR_IT+0xee>
 8004c64:	f016 0f04 	tst.w	r6, #4
 8004c68:	d01b      	beq.n	8004ca2 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 8004c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b16b      	cbz	r3, 8004c8c <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c76:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004c7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8004c8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1b8      	bne.n	8004c06 <I2C_Slave_ISR_IT+0x52>
 8004c94:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004c98:	d0b5      	beq.n	8004c06 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7ff fd72 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8004ca0:	e7b1      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ca2:	f015 0f08 	tst.w	r5, #8
 8004ca6:	d002      	beq.n	8004cae <I2C_Slave_ISR_IT+0xfa>
 8004ca8:	f016 0f08 	tst.w	r6, #8
 8004cac:	d117      	bne.n	8004cde <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004cae:	f015 0f02 	tst.w	r5, #2
 8004cb2:	d0a8      	beq.n	8004c06 <I2C_Slave_ISR_IT+0x52>
 8004cb4:	f016 0f02 	tst.w	r6, #2
 8004cb8:	d0a5      	beq.n	8004c06 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8004cba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b19b      	cbz	r3, 8004ce8 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cca:	3301      	adds	r3, #1
 8004ccc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	8523      	strh	r3, [r4, #40]	; 0x28
 8004cdc:	e793      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7ff fd91 	bl	8004808 <I2C_ITAddrCplt>
 8004ce6:	e78e      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ce8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8004cec:	d001      	beq.n	8004cf2 <I2C_Slave_ISR_IT+0x13e>
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	d189      	bne.n	8004c06 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7ff fd46 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8004cf8:	e785      	b.n	8004c06 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8004cfa:	2002      	movs	r0, #2
 8004cfc:	e786      	b.n	8004c0c <I2C_Slave_ISR_IT+0x58>

08004cfe <HAL_I2C_ER_IRQHandler>:
{
 8004cfe:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d00:	6802      	ldr	r2, [r0, #0]
 8004d02:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d04:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d0a:	d009      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x22>
 8004d0c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d10:	d006      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004d14:	f044 0401 	orr.w	r4, r4, #1
 8004d18:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d1a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004d1e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d20:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d24:	d00a      	beq.n	8004d3c <HAL_I2C_ER_IRQHandler+0x3e>
 8004d26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d2a:	d007      	beq.n	8004d3c <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d2e:	f042 0208 	orr.w	r2, r2, #8
 8004d32:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d34:	6802      	ldr	r2, [r0, #0]
 8004d36:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d3a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d40:	d00a      	beq.n	8004d58 <HAL_I2C_ER_IRQHandler+0x5a>
 8004d42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d46:	d007      	beq.n	8004d58 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004d48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d4a:	f043 0302 	orr.w	r3, r3, #2
 8004d4e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d50:	6803      	ldr	r3, [r0, #0]
 8004d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d56:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8004d58:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004d5a:	f011 0f0b 	tst.w	r1, #11
 8004d5e:	d100      	bne.n	8004d62 <HAL_I2C_ER_IRQHandler+0x64>
}
 8004d60:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8004d62:	f7ff fdf1 	bl	8004948 <I2C_ITError>
}
 8004d66:	e7fb      	b.n	8004d60 <HAL_I2C_ER_IRQHandler+0x62>

08004d68 <I2C_DMAAbort>:
{
 8004d68:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8004d6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d6e:	b10b      	cbz	r3, 8004d74 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d70:	2200      	movs	r2, #0
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8004d74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d76:	b10b      	cbz	r3, 8004d7c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d78:	2200      	movs	r2, #0
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8004d7c:	f7ff fdcc 	bl	8004918 <I2C_TreatErrorCallback>
}
 8004d80:	bd08      	pop	{r3, pc}

08004d82 <HAL_I2C_GetState>:
  return hi2c->State;
 8004d82:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004d86:	4770      	bx	lr

08004d88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d8c:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8004d8e:	00ca      	lsls	r2, r1, #3
 8004d90:	1a52      	subs	r2, r2, r1
 8004d92:	0093      	lsls	r3, r2, #2
 8004d94:	4403      	add	r3, r0
 8004d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d855      	bhi.n	8004e4a <PCD_WriteEmptyTxFifo+0xc2>
 8004d9e:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8004da0:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8004da2:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8004da6:	00a2      	lsls	r2, r4, #2
 8004da8:	4402      	add	r2, r0
 8004daa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d300      	bcc.n	8004db2 <PCD_WriteEmptyTxFifo+0x2a>
  len = ep->xfer_len - ep->xfer_count;
 8004db0:	461a      	mov	r2, r3
 8004db2:	460c      	mov	r4, r1
 8004db4:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8004db6:	f102 0a03 	add.w	sl, r2, #3
 8004dba:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dbe:	e014      	b.n	8004dea <PCD_WriteEmptyTxFifo+0x62>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8004dc0:	f109 0a03 	add.w	sl, r9, #3
 8004dc4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004dc8:	00e3      	lsls	r3, r4, #3
 8004dca:	1b1b      	subs	r3, r3, r4
 8004dcc:	009d      	lsls	r5, r3, #2
 8004dce:	4435      	add	r5, r6
 8004dd0:	fa1f f389 	uxth.w	r3, r9
 8004dd4:	b2e2      	uxtb	r2, r4
 8004dd6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f002 fddf 	bl	800799c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dde:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004de0:	444b      	add	r3, r9
 8004de2:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8004de4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8004de6:	444b      	add	r3, r9
 8004de8:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dea:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4553      	cmp	r3, sl
 8004df8:	d313      	bcc.n	8004e22 <PCD_WriteEmptyTxFifo+0x9a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dfa:	00e3      	lsls	r3, r4, #3
 8004dfc:	1b1b      	subs	r3, r3, r4
 8004dfe:	009a      	lsls	r2, r3, #2
 8004e00:	4432      	add	r2, r6
 8004e02:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004e04:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e06:	4299      	cmp	r1, r3
 8004e08:	d20b      	bcs.n	8004e22 <PCD_WriteEmptyTxFifo+0x9a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0a:	b153      	cbz	r3, 8004e22 <PCD_WriteEmptyTxFifo+0x9a>
    len = ep->xfer_len - ep->xfer_count;
 8004e0c:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8004e0e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8004e12:	008a      	lsls	r2, r1, #2
 8004e14:	4432      	add	r2, r6
 8004e16:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8004e1a:	4599      	cmp	r9, r3
 8004e1c:	d3d0      	bcc.n	8004dc0 <PCD_WriteEmptyTxFifo+0x38>
    len = ep->xfer_len - ep->xfer_count;
 8004e1e:	4699      	mov	r9, r3
 8004e20:	e7ce      	b.n	8004dc0 <PCD_WriteEmptyTxFifo+0x38>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e22:	00e3      	lsls	r3, r4, #3
 8004e24:	1b1b      	subs	r3, r3, r4
 8004e26:	0098      	lsls	r0, r3, #2
 8004e28:	4406      	add	r6, r0
 8004e2a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8004e2c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d80e      	bhi.n	8004e50 <PCD_WriteEmptyTxFifo+0xc8>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e32:	f004 040f 	and.w	r4, r4, #15
 8004e36:	2101      	movs	r1, #1
 8004e38:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e3a:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 8004e3e:	ea24 0401 	bic.w	r4, r4, r1
 8004e42:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8004e46:	2000      	movs	r0, #0
 8004e48:	e000      	b.n	8004e4c <PCD_WriteEmptyTxFifo+0xc4>
    return HAL_ERROR;
 8004e4a:	2001      	movs	r0, #1
}
 8004e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8004e50:	2000      	movs	r0, #0
 8004e52:	e7fb      	b.n	8004e4c <PCD_WriteEmptyTxFifo+0xc4>

08004e54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e54:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e56:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e58:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <PCD_EP_OutXfrComplete_int+0x40>)
 8004e66:	4294      	cmp	r4, r2
 8004e68:	d10f      	bne.n	8004e8a <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e6a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 8004e6e:	d108      	bne.n	8004e82 <PCD_EP_OutXfrComplete_int+0x2e>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e70:	f015 0f20 	tst.w	r5, #32
 8004e74:	d001      	beq.n	8004e7a <PCD_EP_OutXfrComplete_int+0x26>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e76:	2220      	movs	r2, #32
 8004e78:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e7a:	b2c9      	uxtb	r1, r1
 8004e7c:	f7fd f858 	bl	8001f30 <HAL_PCD_DataOutStageCallback>
 8004e80:	e006      	b.n	8004e90 <PCD_EP_OutXfrComplete_int+0x3c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	e002      	b.n	8004e90 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	f7fd f850 	bl	8001f30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 8004e90:	2000      	movs	r0, #0
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	4f54310a 	.word	0x4f54310a

08004e98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e98:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e9e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004ea2:	f8d1 4b08 	ldr.w	r4, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <PCD_EP_OutSetupPacket_int+0x2c>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d907      	bls.n	8004ebc <PCD_EP_OutSetupPacket_int+0x24>
 8004eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eb0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004eb4:	d002      	beq.n	8004ebc <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ebc:	f7fd f830 	bl	8001f20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	bd10      	pop	{r4, pc}
 8004ec4:	4f54300a 	.word	0x4f54300a

08004ec8 <HAL_PCD_IRQHandler>:
{
 8004ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ece:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f002 fef9 	bl	8007cc8 <USB_GetMode>
 8004ed6:	b108      	cbz	r0, 8004edc <HAL_PCD_IRQHandler+0x14>
}
 8004ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	462f      	mov	r7, r5
 8004ede:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	f002 fec0 	bl	8007c66 <USB_ReadInterrupts>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0f6      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	f002 febb 	bl	8007c66 <USB_ReadInterrupts>
 8004ef0:	f010 0f02 	tst.w	r0, #2
 8004ef4:	d004      	beq.n	8004f00 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	6953      	ldr	r3, [r2, #20]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	f002 feb0 	bl	8007c66 <USB_ReadInterrupts>
 8004f06:	f010 0f10 	tst.w	r0, #16
 8004f0a:	d015      	beq.n	8004f38 <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	6993      	ldr	r3, [r2, #24]
 8004f10:	f023 0310 	bic.w	r3, r3, #16
 8004f14:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8004f16:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004f1a:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f1e:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	f000 8085 	beq.w	8005032 <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004f28:	2b06      	cmp	r3, #6
 8004f2a:	f000 80a5 	beq.w	8005078 <HAL_PCD_IRQHandler+0x1b0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	6993      	ldr	r3, [r2, #24]
 8004f32:	f043 0310 	orr.w	r3, r3, #16
 8004f36:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	f002 fe94 	bl	8007c66 <USB_ReadInterrupts>
 8004f3e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8004f42:	f040 80ad 	bne.w	80050a0 <HAL_PCD_IRQHandler+0x1d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	f002 fe8d 	bl	8007c66 <USB_ReadInterrupts>
 8004f4c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8004f50:	f040 80f1 	bne.w	8005136 <HAL_PCD_IRQHandler+0x26e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	f002 fe86 	bl	8007c66 <USB_ReadInterrupts>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f2c0 8143 	blt.w	80051e6 <HAL_PCD_IRQHandler+0x31e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	f002 fe80 	bl	8007c66 <USB_ReadInterrupts>
 8004f66:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8004f6a:	d00a      	beq.n	8004f82 <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f6c:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8004f70:	f013 0f01 	tst.w	r3, #1
 8004f74:	f040 8151 	bne.w	800521a <HAL_PCD_IRQHandler+0x352>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	6953      	ldr	r3, [r2, #20]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f80:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	f002 fe6f 	bl	8007c66 <USB_ReadInterrupts>
 8004f88:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8004f8c:	d015      	beq.n	8004fba <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	6953      	ldr	r3, [r2, #20]
 8004f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f96:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8004f98:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8140 	bne.w	8005222 <HAL_PCD_IRQHandler+0x35a>
        hpcd->LPM_State = LPM_L1;
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004fb0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 faec 	bl	8005592 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fba:	6820      	ldr	r0, [r4, #0]
 8004fbc:	f002 fe53 	bl	8007c66 <USB_ReadInterrupts>
 8004fc0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8004fc4:	f040 8131 	bne.w	800522a <HAL_PCD_IRQHandler+0x362>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	f002 fe4c 	bl	8007c66 <USB_ReadInterrupts>
 8004fce:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004fd2:	f040 818f 	bne.w	80052f4 <HAL_PCD_IRQHandler+0x42c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fd6:	6820      	ldr	r0, [r4, #0]
 8004fd8:	f002 fe45 	bl	8007c66 <USB_ReadInterrupts>
 8004fdc:	f010 0f08 	tst.w	r0, #8
 8004fe0:	f040 81a0 	bne.w	8005324 <HAL_PCD_IRQHandler+0x45c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	f002 fe3e 	bl	8007c66 <USB_ReadInterrupts>
 8004fea:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8004fee:	f040 81a2 	bne.w	8005336 <HAL_PCD_IRQHandler+0x46e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	f002 fe37 	bl	8007c66 <USB_ReadInterrupts>
 8004ff8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004ffc:	f040 81a5 	bne.w	800534a <HAL_PCD_IRQHandler+0x482>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	f002 fe30 	bl	8007c66 <USB_ReadInterrupts>
 8005006:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800500a:	f040 81a8 	bne.w	800535e <HAL_PCD_IRQHandler+0x496>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	f002 fe29 	bl	8007c66 <USB_ReadInterrupts>
 8005014:	f010 0f04 	tst.w	r0, #4
 8005018:	f43f af5e 	beq.w	8004ed8 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005020:	f015 0f04 	tst.w	r5, #4
 8005024:	f040 81a4 	bne.w	8005370 <HAL_PCD_IRQHandler+0x4a8>
      hpcd->Instance->GOTGINT |= temp;
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	6853      	ldr	r3, [r2, #4]
 800502c:	432b      	orrs	r3, r5
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e752      	b.n	8004ed8 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005032:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005036:	ea18 0f03 	tst.w	r8, r3
 800503a:	f43f af78 	beq.w	8004f2e <HAL_PCD_IRQHandler+0x66>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800503e:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 8005042:	ebab 0309 	sub.w	r3, fp, r9
 8005046:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800504a:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800504c:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005050:	f3c8 020a 	ubfx	r2, r8, #0, #11
 8005054:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8005058:	4628      	mov	r0, r5
 800505a:	f002 fd85 	bl	8007b68 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800505e:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8005062:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8005066:	4443      	add	r3, r8
 8005068:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800506c:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 8005070:	4443      	add	r3, r8
 8005072:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8005076:	e75a      	b.n	8004f2e <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005078:	2208      	movs	r2, #8
 800507a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800507e:	4628      	mov	r0, r5
 8005080:	f002 fd72 	bl	8007b68 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005084:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8005088:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508c:	eba3 0109 	sub.w	r1, r3, r9
 8005090:	008a      	lsls	r2, r1, #2
 8005092:	4422      	add	r2, r4
 8005094:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8005098:	4443      	add	r3, r8
 800509a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800509e:	e746      	b.n	8004f2e <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	f002 fde4 	bl	8007c6e <USB_ReadDevAllOutEpInterrupt>
 80050a6:	4680      	mov	r8, r0
      epnum = 0U;
 80050a8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80050aa:	e017      	b.n	80050dc <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050ac:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80050b0:	2201      	movs	r2, #1
 80050b2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050b6:	4649      	mov	r1, r9
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7ff fecb 	bl	8004e54 <PCD_EP_OutXfrComplete_int>
 80050be:	e01d      	b.n	80050fc <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050c0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80050c4:	2208      	movs	r2, #8
 80050c6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050ca:	4649      	mov	r1, r9
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff fee3 	bl	8004e98 <PCD_EP_OutSetupPacket_int>
 80050d2:	e016      	b.n	8005102 <HAL_PCD_IRQHandler+0x23a>
        epnum++;
 80050d4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80050d8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80050dc:	f1b8 0f00 	cmp.w	r8, #0
 80050e0:	f43f af31 	beq.w	8004f46 <HAL_PCD_IRQHandler+0x7e>
        if ((ep_intr & 0x1U) != 0U)
 80050e4:	f018 0f01 	tst.w	r8, #1
 80050e8:	d0f4      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050ea:	fa5f f189 	uxtb.w	r1, r9
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	f002 fdcd 	bl	8007c8e <USB_ReadDevOutEPInterrupt>
 80050f4:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050f6:	f010 0f01 	tst.w	r0, #1
 80050fa:	d1d7      	bne.n	80050ac <HAL_PCD_IRQHandler+0x1e4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050fc:	f01a 0f08 	tst.w	sl, #8
 8005100:	d1de      	bne.n	80050c0 <HAL_PCD_IRQHandler+0x1f8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005102:	f01a 0f10 	tst.w	sl, #16
 8005106:	d004      	beq.n	8005112 <HAL_PCD_IRQHandler+0x24a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005108:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800510c:	2210      	movs	r2, #16
 800510e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005112:	f01a 0f20 	tst.w	sl, #32
 8005116:	d004      	beq.n	8005122 <HAL_PCD_IRQHandler+0x25a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005118:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005122:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8005126:	d0d5      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x20c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005128:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800512c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005130:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8005134:	e7ce      	b.n	80050d4 <HAL_PCD_IRQHandler+0x20c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	f002 fda1 	bl	8007c7e <USB_ReadDevAllInEpInterrupt>
 800513c:	4680      	mov	r8, r0
      epnum = 0U;
 800513e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8005140:	e01a      	b.n	8005178 <HAL_PCD_IRQHandler+0x2b0>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005142:	f009 030f 	and.w	r3, r9, #15
 8005146:	2101      	movs	r1, #1
 8005148:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800514c:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8005150:	ea23 0302 	bic.w	r3, r3, r2
 8005154:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005158:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800515c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005160:	4659      	mov	r1, fp
 8005162:	4620      	mov	r0, r4
 8005164:	f7fc fef0 	bl	8001f48 <HAL_PCD_DataInStageCallback>
 8005168:	e017      	b.n	800519a <HAL_PCD_IRQHandler+0x2d2>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800516a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800516e:	d135      	bne.n	80051dc <HAL_PCD_IRQHandler+0x314>
        epnum++;
 8005170:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005174:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005178:	f1b8 0f00 	cmp.w	r8, #0
 800517c:	f43f aeea 	beq.w	8004f54 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005180:	f018 0f01 	tst.w	r8, #1
 8005184:	d0f4      	beq.n	8005170 <HAL_PCD_IRQHandler+0x2a8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005186:	fa5f fb89 	uxtb.w	fp, r9
 800518a:	4659      	mov	r1, fp
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	f002 fd87 	bl	8007ca0 <USB_ReadDevInEPInterrupt>
 8005192:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005194:	f010 0f01 	tst.w	r0, #1
 8005198:	d1d3      	bne.n	8005142 <HAL_PCD_IRQHandler+0x27a>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800519a:	f01a 0f08 	tst.w	sl, #8
 800519e:	d004      	beq.n	80051aa <HAL_PCD_IRQHandler+0x2e2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051a0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80051a4:	2208      	movs	r2, #8
 80051a6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051aa:	f01a 0f10 	tst.w	sl, #16
 80051ae:	d004      	beq.n	80051ba <HAL_PCD_IRQHandler+0x2f2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051b0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80051b4:	2210      	movs	r2, #16
 80051b6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80051be:	d004      	beq.n	80051ca <HAL_PCD_IRQHandler+0x302>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051c0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80051c4:	2240      	movs	r2, #64	; 0x40
 80051c6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051ca:	f01a 0f02 	tst.w	sl, #2
 80051ce:	d0cc      	beq.n	800516a <HAL_PCD_IRQHandler+0x2a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051d0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80051d4:	2202      	movs	r2, #2
 80051d6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80051da:	e7c6      	b.n	800516a <HAL_PCD_IRQHandler+0x2a2>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051dc:	4649      	mov	r1, r9
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff fdd2 	bl	8004d88 <PCD_WriteEmptyTxFifo>
 80051e4:	e7c4      	b.n	8005170 <HAL_PCD_IRQHandler+0x2a8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051e6:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80051f2:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d008      	beq.n	800520c <HAL_PCD_IRQHandler+0x344>
        HAL_PCD_ResumeCallback(hpcd);
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7fc fec7 	bl	8001f8e <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	6953      	ldr	r3, [r2, #20]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005208:	6153      	str	r3, [r2, #20]
 800520a:	e6a9      	b.n	8004f60 <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 800520c:	2100      	movs	r1, #0
 800520e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005212:	4620      	mov	r0, r4
 8005214:	f000 f9bd 	bl	8005592 <HAL_PCDEx_LPM_Callback>
 8005218:	e7f2      	b.n	8005200 <HAL_PCD_IRQHandler+0x338>
        HAL_PCD_SuspendCallback(hpcd);
 800521a:	4620      	mov	r0, r4
 800521c:	f7fc feb1 	bl	8001f82 <HAL_PCD_SuspendCallback>
 8005220:	e6aa      	b.n	8004f78 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 8005222:	4620      	mov	r0, r4
 8005224:	f7fc fead 	bl	8001f82 <HAL_PCD_SuspendCallback>
 8005228:	e6c7      	b.n	8004fba <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800522a:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 800522e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800523a:	2110      	movs	r1, #16
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	f002 facb 	bl	80077d8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005242:	e020      	b.n	8005286 <HAL_PCD_IRQHandler+0x3be>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005244:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8005248:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800524c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005250:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005254:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005258:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800525c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005260:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005264:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005268:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800526c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005270:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005274:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005278:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800527c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005280:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005284:	3601      	adds	r6, #1
 8005286:	6863      	ldr	r3, [r4, #4]
 8005288:	42b3      	cmp	r3, r6
 800528a:	d8db      	bhi.n	8005244 <HAL_PCD_IRQHandler+0x37c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800528c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005290:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005294:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005298:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800529a:	b1e3      	cbz	r3, 80052d6 <HAL_PCD_IRQHandler+0x40e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800529c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80052a0:	f043 030b 	orr.w	r3, r3, #11
 80052a4:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052a8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80052ac:	f043 030b 	orr.w	r3, r3, #11
 80052b0:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052b4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80052b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052bc:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80052c0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	f002 fd13 	bl	8007cf0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	6953      	ldr	r3, [r2, #20]
 80052ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d2:	6153      	str	r3, [r2, #20]
 80052d4:	e678      	b.n	8004fc8 <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80052da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80052e2:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80052e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80052ea:	f043 030b 	orr.w	r3, r3, #11
 80052ee:	f8c8 3010 	str.w	r3, [r8, #16]
 80052f2:	e7df      	b.n	80052b4 <HAL_PCD_IRQHandler+0x3ec>
      (void)USB_ActivateSetup(hpcd->Instance);
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	f002 fceb 	bl	8007cd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052fa:	6820      	ldr	r0, [r4, #0]
 80052fc:	f002 fa80 	bl	8007800 <USB_GetDevSpeed>
 8005300:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005302:	6825      	ldr	r5, [r4, #0]
 8005304:	f000 fdc8 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005308:	7b22      	ldrb	r2, [r4, #12]
 800530a:	4601      	mov	r1, r0
 800530c:	4628      	mov	r0, r5
 800530e:	f002 f9ed 	bl	80076ec <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005312:	4620      	mov	r0, r4
 8005314:	f7fc fe29 	bl	8001f6a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6953      	ldr	r3, [r2, #20]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	6153      	str	r3, [r2, #20]
 8005322:	e658      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 8005324:	4620      	mov	r0, r4
 8005326:	f7fc fe1a 	bl	8001f5e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	6953      	ldr	r3, [r2, #20]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	6153      	str	r3, [r2, #20]
 8005334:	e656      	b.n	8004fe4 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005336:	2100      	movs	r1, #0
 8005338:	4620      	mov	r0, r4
 800533a:	f7fc fe34 	bl	8001fa6 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	6953      	ldr	r3, [r2, #20]
 8005342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005346:	6153      	str	r3, [r2, #20]
 8005348:	e653      	b.n	8004ff2 <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800534a:	2100      	movs	r1, #0
 800534c:	4620      	mov	r0, r4
 800534e:	f7fc fe24 	bl	8001f9a <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	6953      	ldr	r3, [r2, #20]
 8005356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535a:	6153      	str	r3, [r2, #20]
 800535c:	e650      	b.n	8005000 <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 800535e:	4620      	mov	r0, r4
 8005360:	f7fc fe27 	bl	8001fb2 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	6953      	ldr	r3, [r2, #20]
 8005368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800536c:	6153      	str	r3, [r2, #20]
 800536e:	e64e      	b.n	800500e <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 8005370:	4620      	mov	r0, r4
 8005372:	f7fc fe24 	bl	8001fbe <HAL_PCD_DisconnectCallback>
 8005376:	e657      	b.n	8005028 <HAL_PCD_IRQHandler+0x160>

08005378 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005378:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800537c:	2b01      	cmp	r3, #1
 800537e:	d00d      	beq.n	800539c <HAL_PCD_SetAddress+0x24>
{
 8005380:	b510      	push	{r4, lr}
 8005382:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005384:	2301      	movs	r3, #1
 8005386:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800538a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800538e:	6800      	ldr	r0, [r0, #0]
 8005390:	f002 fc59 	bl	8007c46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005394:	2000      	movs	r0, #0
 8005396:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800539a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800539c:	2002      	movs	r0, #2
}
 800539e:	4770      	bx	lr

080053a0 <HAL_PCD_EP_Open>:
{
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80053a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80053a6:	d128      	bne.n	80053fa <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a8:	f001 060f 	and.w	r6, r1, #15
 80053ac:	00f5      	lsls	r5, r6, #3
 80053ae:	1baf      	subs	r7, r5, r6
 80053b0:	00bc      	lsls	r4, r7, #2
 80053b2:	4627      	mov	r7, r4
 80053b4:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80053b8:	4404      	add	r4, r0
 80053ba:	3404      	adds	r4, #4
    ep->is_in = 0U;
 80053bc:	463e      	mov	r6, r7
 80053be:	4406      	add	r6, r0
 80053c0:	2500      	movs	r5, #0
 80053c2:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c6:	f001 010f 	and.w	r1, r1, #15
 80053ca:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80053cc:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 80053ce:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80053d0:	7862      	ldrb	r2, [r4, #1]
 80053d2:	b102      	cbz	r2, 80053d6 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80053d4:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d01e      	beq.n	8005418 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 80053da:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d01d      	beq.n	800541e <HAL_PCD_EP_Open+0x7e>
 80053e2:	4605      	mov	r5, r0
 80053e4:	2301      	movs	r3, #1
 80053e6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053ea:	4621      	mov	r1, r4
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f002 fa15 	bl	800781c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053f2:	2000      	movs	r0, #0
 80053f4:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 80053f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fa:	f001 060f 	and.w	r6, r1, #15
 80053fe:	00f5      	lsls	r5, r6, #3
 8005400:	1baf      	subs	r7, r5, r6
 8005402:	00bc      	lsls	r4, r7, #2
 8005404:	4627      	mov	r7, r4
 8005406:	3438      	adds	r4, #56	; 0x38
 8005408:	4404      	add	r4, r0
 800540a:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800540c:	463e      	mov	r6, r7
 800540e:	4406      	add	r6, r0
 8005410:	2501      	movs	r5, #1
 8005412:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8005416:	e7d6      	b.n	80053c6 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	7123      	strb	r3, [r4, #4]
 800541c:	e7dd      	b.n	80053da <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 800541e:	2002      	movs	r0, #2
 8005420:	e7ea      	b.n	80053f8 <HAL_PCD_EP_Open+0x58>

08005422 <HAL_PCD_EP_Receive>:
{
 8005422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005424:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005428:	00ee      	lsls	r6, r5, #3
 800542a:	1b71      	subs	r1, r6, r5
 800542c:	008c      	lsls	r4, r1, #2
 800542e:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8005432:	4404      	add	r4, r0
 8005434:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8005436:	1b77      	subs	r7, r6, r5
 8005438:	00bc      	lsls	r4, r7, #2
 800543a:	4404      	add	r4, r0
 800543c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8005440:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800544a:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800544e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005452:	b125      	cbz	r5, 800545e <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005454:	6800      	ldr	r0, [r0, #0]
 8005456:	f002 fab3 	bl	80079c0 <USB_EPStartXfer>
}
 800545a:	2000      	movs	r0, #0
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800545e:	6800      	ldr	r0, [r0, #0]
 8005460:	f002 fa26 	bl	80078b0 <USB_EP0StartXfer>
 8005464:	e7f9      	b.n	800545a <HAL_PCD_EP_Receive+0x38>

08005466 <HAL_PCD_EP_Transmit>:
{
 8005466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005468:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546c:	00ee      	lsls	r6, r5, #3
 800546e:	1b71      	subs	r1, r6, r5
 8005470:	008c      	lsls	r4, r1, #2
 8005472:	3438      	adds	r4, #56	; 0x38
 8005474:	4404      	add	r4, r0
 8005476:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8005478:	1b77      	subs	r7, r6, r5
 800547a:	00bc      	lsls	r4, r7, #2
 800547c:	4404      	add	r4, r0
 800547e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8005480:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8005486:	2301      	movs	r3, #1
 8005488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800548c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005490:	b125      	cbz	r5, 800549c <HAL_PCD_EP_Transmit+0x36>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005492:	6800      	ldr	r0, [r0, #0]
 8005494:	f002 fa94 	bl	80079c0 <USB_EPStartXfer>
}
 8005498:	2000      	movs	r0, #0
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f002 fa07 	bl	80078b0 <USB_EP0StartXfer>
 80054a2:	e7f9      	b.n	8005498 <HAL_PCD_EP_Transmit+0x32>

080054a4 <HAL_PCD_EP_SetStall>:
{
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054aa:	6843      	ldr	r3, [r0, #4]
 80054ac:	429d      	cmp	r5, r3
 80054ae:	d835      	bhi.n	800551c <HAL_PCD_EP_SetStall+0x78>
  if ((0x80U & ep_addr) == 0x80U)
 80054b0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054b4:	d120      	bne.n	80054f8 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80054b6:	00ca      	lsls	r2, r1, #3
 80054b8:	1a54      	subs	r4, r2, r1
 80054ba:	00a3      	lsls	r3, r4, #2
 80054bc:	461c      	mov	r4, r3
 80054be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054c2:	4403      	add	r3, r0
 80054c4:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80054c6:	4622      	mov	r2, r4
 80054c8:	4402      	add	r2, r0
 80054ca:	2100      	movs	r1, #0
 80054cc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 80054d0:	2201      	movs	r2, #1
 80054d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80054d6:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80054da:	2a01      	cmp	r2, #1
 80054dc:	d020      	beq.n	8005520 <HAL_PCD_EP_SetStall+0x7c>
 80054de:	4604      	mov	r4, r0
 80054e0:	2201      	movs	r2, #1
 80054e2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054e6:	4619      	mov	r1, r3
 80054e8:	6800      	ldr	r0, [r0, #0]
 80054ea:	f002 fb51 	bl	8007b90 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ee:	b17d      	cbz	r5, 8005510 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80054f6:	e012      	b.n	800551e <HAL_PCD_EP_SetStall+0x7a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054f8:	00ea      	lsls	r2, r5, #3
 80054fa:	1b51      	subs	r1, r2, r5
 80054fc:	008b      	lsls	r3, r1, #2
 80054fe:	4619      	mov	r1, r3
 8005500:	3338      	adds	r3, #56	; 0x38
 8005502:	4403      	add	r3, r0
 8005504:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8005506:	4401      	add	r1, r0
 8005508:	2201      	movs	r2, #1
 800550a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 800550e:	e7df      	b.n	80054d0 <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005510:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	f002 fbeb 	bl	8007cf0 <USB_EP0_OutStart>
 800551a:	e7e9      	b.n	80054f0 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800551c:	2001      	movs	r0, #1
}
 800551e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005520:	2002      	movs	r0, #2
 8005522:	e7fc      	b.n	800551e <HAL_PCD_EP_SetStall+0x7a>

08005524 <HAL_PCD_EP_ClrStall>:
{
 8005524:	b510      	push	{r4, lr}
 8005526:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800552a:	6843      	ldr	r3, [r0, #4]
 800552c:	429c      	cmp	r4, r3
 800552e:	d82c      	bhi.n	800558a <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8005530:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005534:	d11d      	bne.n	8005572 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005536:	00e3      	lsls	r3, r4, #3
 8005538:	1b1a      	subs	r2, r3, r4
 800553a:	0091      	lsls	r1, r2, #2
 800553c:	460a      	mov	r2, r1
 800553e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8005542:	4401      	add	r1, r0
 8005544:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8005546:	4402      	add	r2, r0
 8005548:	2300      	movs	r3, #0
 800554a:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005552:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8005554:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005558:	2b01      	cmp	r3, #1
 800555a:	d018      	beq.n	800558e <HAL_PCD_EP_ClrStall+0x6a>
 800555c:	4604      	mov	r4, r0
 800555e:	2301      	movs	r3, #1
 8005560:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005564:	6800      	ldr	r0, [r0, #0]
 8005566:	f002 fb40 	bl	8007bea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800556a:	2000      	movs	r0, #0
 800556c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8005570:	e00c      	b.n	800558c <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005572:	00e3      	lsls	r3, r4, #3
 8005574:	1b1a      	subs	r2, r3, r4
 8005576:	0091      	lsls	r1, r2, #2
 8005578:	460a      	mov	r2, r1
 800557a:	3138      	adds	r1, #56	; 0x38
 800557c:	4401      	add	r1, r0
 800557e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8005580:	4402      	add	r2, r0
 8005582:	2301      	movs	r3, #1
 8005584:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8005588:	e7e1      	b.n	800554e <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 800558a:	2001      	movs	r0, #1
}
 800558c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800558e:	2002      	movs	r0, #2
 8005590:	e7fc      	b.n	800558c <HAL_PCD_EP_ClrStall+0x68>

08005592 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005592:	4770      	bx	lr

08005594 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005594:	4a02      	ldr	r2, [pc, #8]	; (80055a0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	4770      	bx	lr
 80055a0:	40007000 	.word	0x40007000

080055a4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <HAL_PWREx_GetVoltageRange+0xc>)
 80055a6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80055a8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40007000 	.word	0x40007000

080055b4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80055b4:	4a02      	ldr	r2, [pc, #8]	; (80055c0 <HAL_PWREx_EnableVddIO2+0xc>)
 80055b6:	6853      	ldr	r3, [r2, #4]
 80055b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055bc:	6053      	str	r3, [r2, #4]
}
 80055be:	4770      	bx	lr
 80055c0:	40007000 	.word	0x40007000

080055c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c4:	b530      	push	{r4, r5, lr}
 80055c6:	b083      	sub	sp, #12
 80055c8:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80055d2:	d00b      	beq.n	80055ec <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055d4:	f7ff ffe6 	bl	80055a4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80055dc:	d017      	beq.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055de:	2d80      	cmp	r5, #128	; 0x80
 80055e0:	d81f      	bhi.n	8005622 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055e2:	d02d      	beq.n	8005640 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055e4:	2d70      	cmp	r5, #112	; 0x70
 80055e6:	d02d      	beq.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055e8:	2100      	movs	r1, #0
 80055ea:	e01b      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80055ec:	4c17      	ldr	r4, [pc, #92]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80055ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80055f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005600:	f7ff ffd0 	bl	80055a4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	65a3      	str	r3, [r4, #88]	; 0x58
 800560c:	e7e4      	b.n	80055d8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800560e:	2d80      	cmp	r5, #128	; 0x80
 8005610:	d903      	bls.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8005612:	2da0      	cmp	r5, #160	; 0xa0
 8005614:	d903      	bls.n	800561e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005616:	2102      	movs	r1, #2
 8005618:	e004      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800561a:	2100      	movs	r1, #0
 800561c:	e002      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800561e:	2101      	movs	r1, #1
 8005620:	e000      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005622:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005624:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	f023 0307 	bic.w	r3, r3, #7
 800562c:	430b      	orrs	r3, r1
 800562e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	428b      	cmp	r3, r1
 8005638:	d006      	beq.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 800563a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800563c:	b003      	add	sp, #12
 800563e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8005640:	2102      	movs	r1, #2
 8005642:	e7ef      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005644:	2101      	movs	r1, #1
 8005646:	e7ed      	b.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8005648:	2000      	movs	r0, #0
 800564a:	e7f7      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800564c:	40021000 	.word	0x40021000
 8005650:	40022000 	.word	0x40022000

08005654 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005654:	4a28      	ldr	r2, [pc, #160]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005656:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005658:	68d2      	ldr	r2, [r2, #12]
 800565a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800565e:	f013 030c 	ands.w	r3, r3, #12
 8005662:	d00a      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x26>
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d006      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005668:	2b04      	cmp	r3, #4
 800566a:	d01f      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800566c:	2b08      	cmp	r3, #8
 800566e:	d020      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005670:	2000      	movs	r0, #0
 8005672:	4602      	mov	r2, r0
 8005674:	e010      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005676:	2a01      	cmp	r2, #1
 8005678:	d1f6      	bne.n	8005668 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800567a:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	f012 0f08 	tst.w	r2, #8
 8005682:	d10c      	bne.n	800569e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005686:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800568a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800568e:	491b      	ldr	r1, [pc, #108]	; (80056fc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005690:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005694:	b143      	cbz	r3, 80056a8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005696:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d00d      	beq.n	80056b8 <HAL_RCC_GetSysClockFreq+0x64>
}
 800569c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80056a6:	e7f2      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80056a8:	4610      	mov	r0, r2
 80056aa:	e7f5      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80056ac:	4814      	ldr	r0, [pc, #80]	; (8005700 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056ae:	2200      	movs	r2, #0
 80056b0:	e7f2      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80056b2:	4814      	ldr	r0, [pc, #80]	; (8005704 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056b4:	2200      	movs	r2, #0
 80056b6:	e7ef      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d015      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x9c>
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d015      	beq.n	80056f4 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056ca:	68d8      	ldr	r0, [r3, #12]
 80056cc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80056d0:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056d2:	68d9      	ldr	r1, [r3, #12]
 80056d4:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80056d8:	fb02 f201 	mul.w	r2, r2, r1
 80056dc:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056e0:	68d8      	ldr	r0, [r3, #12]
 80056e2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80056e6:	3001      	adds	r0, #1
 80056e8:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80056ea:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80056ee:	e7d5      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80056f0:	4a03      	ldr	r2, [pc, #12]	; (8005700 <HAL_RCC_GetSysClockFreq+0xac>)
 80056f2:	e7e9      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 80056f4:	4a03      	ldr	r2, [pc, #12]	; (8005704 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056f6:	e7e7      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x74>
 80056f8:	40021000 	.word	0x40021000
 80056fc:	08009968 	.word	0x08009968
 8005700:	00f42400 	.word	0x00f42400
 8005704:	007a1200 	.word	0x007a1200

08005708 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8005708:	2800      	cmp	r0, #0
 800570a:	f000 8300 	beq.w	8005d0e <HAL_RCC_OscConfig+0x606>
{
 800570e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005710:	b083      	sub	sp, #12
 8005712:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005714:	4baf      	ldr	r3, [pc, #700]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005716:	689d      	ldr	r5, [r3, #8]
 8005718:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800571c:	68de      	ldr	r6, [r3, #12]
 800571e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005722:	6803      	ldr	r3, [r0, #0]
 8005724:	f013 0f10 	tst.w	r3, #16
 8005728:	d05b      	beq.n	80057e2 <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800572a:	b1e5      	cbz	r5, 8005766 <HAL_RCC_OscConfig+0x5e>
 800572c:	2d0c      	cmp	r5, #12
 800572e:	d018      	beq.n	8005762 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005730:	69a3      	ldr	r3, [r4, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80bc 	beq.w	80058b0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8005738:	4aa6      	ldr	r2, [pc, #664]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005742:	f7fe f9e5 	bl	8003b10 <HAL_GetTick>
 8005746:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005748:	4ba2      	ldr	r3, [pc, #648]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f013 0f02 	tst.w	r3, #2
 8005750:	f040 809b 	bne.w	800588a <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005754:	f7fe f9dc 	bl	8003b10 <HAL_GetTick>
 8005758:	1bc0      	subs	r0, r0, r7
 800575a:	2802      	cmp	r0, #2
 800575c:	d9f4      	bls.n	8005748 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e2e1      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005762:	2e01      	cmp	r6, #1
 8005764:	d1e4      	bne.n	8005730 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005766:	4b9b      	ldr	r3, [pc, #620]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f013 0f02 	tst.w	r3, #2
 800576e:	d003      	beq.n	8005778 <HAL_RCC_OscConfig+0x70>
 8005770:	69a3      	ldr	r3, [r4, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 82ce 	beq.w	8005d14 <HAL_RCC_OscConfig+0x60c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005778:	6a20      	ldr	r0, [r4, #32]
 800577a:	4b96      	ldr	r3, [pc, #600]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f013 0f08 	tst.w	r3, #8
 8005782:	d05c      	beq.n	800583e <HAL_RCC_OscConfig+0x136>
 8005784:	4b93      	ldr	r3, [pc, #588]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578c:	4298      	cmp	r0, r3
 800578e:	d85d      	bhi.n	800584c <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005790:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	f042 0208 	orr.w	r2, r2, #8
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057a0:	6a21      	ldr	r1, [r4, #32]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80057ac:	69e1      	ldr	r1, [r4, #28]
 80057ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057b2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	d061      	beq.n	800587c <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057b8:	f7ff ff4c 	bl	8005654 <HAL_RCC_GetSysClockFreq>
 80057bc:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057c4:	4a84      	ldr	r2, [pc, #528]	; (80059d8 <HAL_RCC_OscConfig+0x2d0>)
 80057c6:	5cd3      	ldrb	r3, [r2, r3]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	40d8      	lsrs	r0, r3
 80057ce:	4b83      	ldr	r3, [pc, #524]	; (80059dc <HAL_RCC_OscConfig+0x2d4>)
 80057d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80057d2:	4b83      	ldr	r3, [pc, #524]	; (80059e0 <HAL_RCC_OscConfig+0x2d8>)
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	f7fe f959 	bl	8003a8c <HAL_InitTick>
        if(status != HAL_OK)
 80057da:	4603      	mov	r3, r0
 80057dc:	2800      	cmp	r0, #0
 80057de:	f040 82a2 	bne.w	8005d26 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f013 0f01 	tst.w	r3, #1
 80057e8:	f000 8081 	beq.w	80058ee <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057ec:	2d08      	cmp	r5, #8
 80057ee:	d075      	beq.n	80058dc <HAL_RCC_OscConfig+0x1d4>
 80057f0:	2d0c      	cmp	r5, #12
 80057f2:	d071      	beq.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	f000 8097 	beq.w	800592c <HAL_RCC_OscConfig+0x224>
 80057fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005802:	f000 8099 	beq.w	8005938 <HAL_RCC_OscConfig+0x230>
 8005806:	4b73      	ldr	r3, [pc, #460]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005816:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8099 	beq.w	8005952 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8005820:	f7fe f976 	bl	8003b10 <HAL_GetTick>
 8005824:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005826:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800582e:	d15e      	bne.n	80058ee <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005830:	f7fe f96e 	bl	8003b10 <HAL_GetTick>
 8005834:	1bc0      	subs	r0, r0, r7
 8005836:	2864      	cmp	r0, #100	; 0x64
 8005838:	d9f5      	bls.n	8005826 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e273      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800583e:	4b65      	ldr	r3, [pc, #404]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584a:	e79f      	b.n	800578c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800584c:	f7ff feba 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8005850:	2800      	cmp	r0, #0
 8005852:	f040 8261 	bne.w	8005d18 <HAL_RCC_OscConfig+0x610>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005856:	4b5f      	ldr	r3, [pc, #380]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	f042 0208 	orr.w	r2, r2, #8
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005866:	6a21      	ldr	r1, [r4, #32]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005872:	69e1      	ldr	r1, [r4, #28]
 8005874:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e79d      	b.n	80057b8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800587c:	6a20      	ldr	r0, [r4, #32]
 800587e:	f7ff fea1 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8005882:	2800      	cmp	r0, #0
 8005884:	d098      	beq.n	80057b8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e24d      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588a:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800589a:	6a21      	ldr	r1, [r4, #32]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80058a6:	69e1      	ldr	r1, [r4, #28]
 80058a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e798      	b.n	80057e2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 80058b0:	4a48      	ldr	r2, [pc, #288]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80058ba:	f7fe f929 	bl	8003b10 <HAL_GetTick>
 80058be:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058c0:	4b44      	ldr	r3, [pc, #272]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f013 0f02 	tst.w	r3, #2
 80058c8:	d08b      	beq.n	80057e2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ca:	f7fe f921 	bl	8003b10 <HAL_GetTick>
 80058ce:	1bc0      	subs	r0, r0, r7
 80058d0:	2802      	cmp	r0, #2
 80058d2:	d9f5      	bls.n	80058c0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e226      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058d8:	2e03      	cmp	r6, #3
 80058da:	d18b      	bne.n	80057f4 <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b3d      	ldr	r3, [pc, #244]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_OscConfig+0x1e6>
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8217 	beq.w	8005d1c <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f013 0f02 	tst.w	r3, #2
 80058f4:	d04f      	beq.n	8005996 <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058f6:	2d04      	cmp	r5, #4
 80058f8:	d03c      	beq.n	8005974 <HAL_RCC_OscConfig+0x26c>
 80058fa:	2d0c      	cmp	r5, #12
 80058fc:	d038      	beq.n	8005970 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d078      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 8005904:	4a33      	ldr	r2, [pc, #204]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800590e:	f7fe f8ff 	bl	8003b10 <HAL_GetTick>
 8005912:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005914:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800591c:	d162      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591e:	f7fe f8f7 	bl	8003b10 <HAL_GetTick>
 8005922:	1b80      	subs	r0, r0, r6
 8005924:	2802      	cmp	r0, #2
 8005926:	d9f5      	bls.n	8005914 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e1fc      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592c:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e76f      	b.n	8005818 <HAL_RCC_OscConfig+0x110>
 8005938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800593c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e762      	b.n	8005818 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8005952:	f7fe f8dd 	bl	8003b10 <HAL_GetTick>
 8005956:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005960:	d0c5      	beq.n	80058ee <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005962:	f7fe f8d5 	bl	8003b10 <HAL_GetTick>
 8005966:	1bc0      	subs	r0, r0, r7
 8005968:	2864      	cmp	r0, #100	; 0x64
 800596a:	d9f5      	bls.n	8005958 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1da      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005970:	2e02      	cmp	r6, #2
 8005972:	d1c4      	bne.n	80058fe <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800597c:	d003      	beq.n	8005986 <HAL_RCC_OscConfig+0x27e>
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 81cd 	beq.w	8005d20 <HAL_RCC_OscConfig+0x618>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 8005988:	6853      	ldr	r3, [r2, #4]
 800598a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800598e:	6921      	ldr	r1, [r4, #16]
 8005990:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005994:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	f013 0f08 	tst.w	r3, #8
 800599c:	d056      	beq.n	8005a4c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03c      	beq.n	8005a1e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80059a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80059b2:	f7fe f8ad 	bl	8003b10 <HAL_GetTick>
 80059b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_RCC_OscConfig+0x2cc>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059be:	f013 0f02 	tst.w	r3, #2
 80059c2:	d143      	bne.n	8005a4c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fe f8a4 	bl	8003b10 <HAL_GetTick>
 80059c8:	1b80      	subs	r0, r0, r6
 80059ca:	2802      	cmp	r0, #2
 80059cc:	d9f4      	bls.n	80059b8 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e1a9      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	08009998 	.word	0x08009998
 80059dc:	20000080 	.word	0x20000080
 80059e0:	20000088 	.word	0x20000088
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4ab8      	ldr	r2, [pc, #736]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 80059e6:	6853      	ldr	r3, [r2, #4]
 80059e8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80059ec:	6921      	ldr	r1, [r4, #16]
 80059ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7cf      	b.n	8005996 <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 80059f6:	4ab4      	ldr	r2, [pc, #720]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 80059f8:	6813      	ldr	r3, [r2, #0]
 80059fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a00:	f7fe f886 	bl	8003b10 <HAL_GetTick>
 8005a04:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a06:	4bb0      	ldr	r3, [pc, #704]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a0e:	d0c2      	beq.n	8005996 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a10:	f7fe f87e 	bl	8003b10 <HAL_GetTick>
 8005a14:	1b80      	subs	r0, r0, r6
 8005a16:	2802      	cmp	r0, #2
 8005a18:	d9f5      	bls.n	8005a06 <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e183      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_LSI_DISABLE();
 8005a1e:	4aaa      	ldr	r2, [pc, #680]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a20:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005a2c:	f7fe f870 	bl	8003b10 <HAL_GetTick>
 8005a30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a32:	4ba5      	ldr	r3, [pc, #660]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a38:	f013 0f02 	tst.w	r3, #2
 8005a3c:	d006      	beq.n	8005a4c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fe f867 	bl	8003b10 <HAL_GetTick>
 8005a42:	1b80      	subs	r0, r0, r6
 8005a44:	2802      	cmp	r0, #2
 8005a46:	d9f4      	bls.n	8005a32 <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e16c      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	f013 0f04 	tst.w	r3, #4
 8005a52:	d07a      	beq.n	8005b4a <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a54:	4b9c      	ldr	r3, [pc, #624]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005a5c:	d10b      	bne.n	8005a76 <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5e:	4b9a      	ldr	r3, [pc, #616]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a66:	659a      	str	r2, [r3, #88]	; 0x58
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a72:	2601      	movs	r6, #1
 8005a74:	e000      	b.n	8005a78 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a78:	4b94      	ldr	r3, [pc, #592]	; (8005ccc <HAL_RCC_OscConfig+0x5c4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a80:	d026      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d037      	beq.n	8005af8 <HAL_RCC_OscConfig+0x3f0>
 8005a88:	2b05      	cmp	r3, #5
 8005a8a:	d03d      	beq.n	8005b08 <HAL_RCC_OscConfig+0x400>
 8005a8c:	4b8e      	ldr	r3, [pc, #568]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005a8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005a9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005a9e:	f022 0204 	bic.w	r2, r2, #4
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aa6:	68a3      	ldr	r3, [r4, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d03b      	beq.n	8005b24 <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 8005aac:	f7fe f830 	bl	8003b10 <HAL_GetTick>
 8005ab0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab2:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f013 0f02 	tst.w	r3, #2
 8005abc:	d144      	bne.n	8005b48 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fe f827 	bl	8003b10 <HAL_GetTick>
 8005ac2:	1bc0      	subs	r0, r0, r7
 8005ac4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ac8:	4298      	cmp	r0, r3
 8005aca:	d9f2      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e12a      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad0:	4a7e      	ldr	r2, [pc, #504]	; (8005ccc <HAL_RCC_OscConfig+0x5c4>)
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ada:	f7fe f819 	bl	8003b10 <HAL_GetTick>
 8005ade:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae0:	4b7a      	ldr	r3, [pc, #488]	; (8005ccc <HAL_RCC_OscConfig+0x5c4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ae8:	d1cb      	bne.n	8005a82 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fe f811 	bl	8003b10 <HAL_GetTick>
 8005aee:	1bc0      	subs	r0, r0, r7
 8005af0:	2802      	cmp	r0, #2
 8005af2:	d9f5      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e116      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af8:	4a73      	ldr	r2, [pc, #460]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005afa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b06:	e7ce      	b.n	8005aa6 <HAL_RCC_OscConfig+0x39e>
 8005b08:	4b6f      	ldr	r3, [pc, #444]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b0e:	f042 0204 	orr.w	r2, r2, #4
 8005b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005b16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005b22:	e7c0      	b.n	8005aa6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8005b24:	f7fd fff4 	bl	8003b10 <HAL_GetTick>
 8005b28:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b2a:	4b67      	ldr	r3, [pc, #412]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	f013 0f02 	tst.w	r3, #2
 8005b34:	d008      	beq.n	8005b48 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b36:	f7fd ffeb 	bl	8003b10 <HAL_GetTick>
 8005b3a:	1bc0      	subs	r0, r0, r7
 8005b3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b40:	4298      	cmp	r0, r3
 8005b42:	d9f2      	bls.n	8005b2a <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e0ee      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
    if(pwrclkchanged == SET)
 8005b48:	bb6e      	cbnz	r6, 8005ba6 <HAL_RCC_OscConfig+0x49e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80e9 	beq.w	8005d24 <HAL_RCC_OscConfig+0x61c>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d02d      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x4aa>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b56:	2d0c      	cmp	r5, #12
 8005b58:	f000 80ee 	beq.w	8005d38 <HAL_RCC_OscConfig+0x630>
        __HAL_RCC_PLL_DISABLE();
 8005b5c:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005b64:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8005b6c:	d104      	bne.n	8005b78 <HAL_RCC_OscConfig+0x470>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b6e:	4a56      	ldr	r2, [pc, #344]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b70:	68d3      	ldr	r3, [r2, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b78:	4a53      	ldr	r2, [pc, #332]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b7a:	68d3      	ldr	r3, [r2, #12]
 8005b7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005b86:	f7fd ffc3 	bl	8003b10 <HAL_GetTick>
 8005b8a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b8c:	4b4e      	ldr	r3, [pc, #312]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b94:	f000 80b9 	beq.w	8005d0a <HAL_RCC_OscConfig+0x602>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fd ffba 	bl	8003b10 <HAL_GetTick>
 8005b9c:	1b00      	subs	r0, r0, r4
 8005b9e:	2802      	cmp	r0, #2
 8005ba0:	d9f4      	bls.n	8005b8c <HAL_RCC_OscConfig+0x484>
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0bf      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4a48      	ldr	r2, [pc, #288]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005ba8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb0:	e7cb      	b.n	8005b4a <HAL_RCC_OscConfig+0x442>
      pll_config = RCC->PLLCFGR;
 8005bb2:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb6:	f003 0103 	and.w	r1, r3, #3
 8005bba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005bbc:	4291      	cmp	r1, r2
 8005bbe:	d00f      	beq.n	8005be0 <HAL_RCC_OscConfig+0x4d8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bc0:	2d0c      	cmp	r5, #12
 8005bc2:	f000 80b3 	beq.w	8005d2c <HAL_RCC_OscConfig+0x624>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bc6:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005bce:	f040 80af 	bne.w	8005d30 <HAL_RCC_OscConfig+0x628>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005bda:	d02d      	beq.n	8005c38 <HAL_RCC_OscConfig+0x530>
            return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a2      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005be0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005be4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005be6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005bec:	d1e8      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bf4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005bf8:	d1e2      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bfa:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8005bfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c00:	3a07      	subs	r2, #7
 8005c02:	bf18      	it	ne
 8005c04:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c06:	4291      	cmp	r1, r2
 8005c08:	d1da      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c0a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005c0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005c10:	0852      	lsrs	r2, r2, #1
 8005c12:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c14:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005c18:	d1d2      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c1a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005c1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c20:	0852      	lsrs	r2, r2, #1
 8005c22:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c24:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005c28:	d1ca      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4b8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005c32:	d051      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x5d0>
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e076      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_DISABLE();
 8005c38:	4a23      	ldr	r2, [pc, #140]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005c3a:	6813      	ldr	r3, [r2, #0]
 8005c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c40:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8005c42:	f7fd ff65 	bl	8003b10 <HAL_GetTick>
 8005c46:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c48:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005c50:	d006      	beq.n	8005c60 <HAL_RCC_OscConfig+0x558>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c52:	f7fd ff5d 	bl	8003b10 <HAL_GetTick>
 8005c56:	1b40      	subs	r0, r0, r5
 8005c58:	2802      	cmp	r0, #2
 8005c5a:	d9f5      	bls.n	8005c48 <HAL_RCC_OscConfig+0x540>
                return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e062      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005c62:	68d3      	ldr	r3, [r2, #12]
 8005c64:	491a      	ldr	r1, [pc, #104]	; (8005cd0 <HAL_RCC_OscConfig+0x5c8>)
 8005c66:	4019      	ands	r1, r3
 8005c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005c6c:	3801      	subs	r0, #1
 8005c6e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005c72:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005c74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005c78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005c7a:	0840      	lsrs	r0, r0, #1
 8005c7c:	3801      	subs	r0, #1
 8005c7e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005c82:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005c84:	0840      	lsrs	r0, r0, #1
 8005c86:	3801      	subs	r0, #1
 8005c88:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005c8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c8e:	0900      	lsrs	r0, r0, #4
 8005c90:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8005c94:	430b      	orrs	r3, r1
 8005c96:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8005c98:	6813      	ldr	r3, [r2, #0]
 8005c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca0:	68d3      	ldr	r3, [r2, #12]
 8005ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ca6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8005ca8:	f7fd ff32 	bl	8003b10 <HAL_GetTick>
 8005cac:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_OscConfig+0x5c0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005cb6:	d10d      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5cc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fd ff2a 	bl	8003b10 <HAL_GetTick>
 8005cbc:	1b00      	subs	r0, r0, r4
 8005cbe:	2802      	cmp	r0, #2
 8005cc0:	d9f5      	bls.n	8005cae <HAL_RCC_OscConfig+0x5a6>
                return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e02f      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e026      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
          __HAL_RCC_PLL_ENABLE();
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_RCC_OscConfig+0x634>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005ce0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005ce8:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8005cea:	f7fd ff11 	bl	8003b10 <HAL_GetTick>
 8005cee:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf0:	e004      	b.n	8005cfc <HAL_RCC_OscConfig+0x5f4>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7fd ff0d 	bl	8003b10 <HAL_GetTick>
 8005cf6:	1b00      	subs	r0, r0, r4
 8005cf8:	2802      	cmp	r0, #2
 8005cfa:	d81b      	bhi.n	8005d34 <HAL_RCC_OscConfig+0x62c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HAL_RCC_OscConfig+0x634>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005d04:	d0f5      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x5ea>
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e00d      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e00b      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	4770      	bx	lr
        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e006      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e004      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e002      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e7fa      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e7f8      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
              return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e7f6      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e7f4      	b.n	8005d26 <HAL_RCC_OscConfig+0x61e>
 8005d3c:	40021000 	.word	0x40021000

08005d40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005d40:	2800      	cmp	r0, #0
 8005d42:	f000 809b 	beq.w	8005e7c <HAL_RCC_ClockConfig+0x13c>
{
 8005d46:	b570      	push	{r4, r5, r6, lr}
 8005d48:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4a:	4b4e      	ldr	r3, [pc, #312]	; (8005e84 <HAL_RCC_ClockConfig+0x144>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	428b      	cmp	r3, r1
 8005d54:	d20c      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4a4b      	ldr	r2, [pc, #300]	; (8005e84 <HAL_RCC_ClockConfig+0x144>)
 8005d58:	6813      	ldr	r3, [r2, #0]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8005d6c:	2001      	movs	r0, #1
}
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f013 0f01 	tst.w	r3, #1
 8005d78:	d039      	beq.n	8005dee <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d026      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d84:	bb63      	cbnz	r3, 8005de0 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d86:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	f012 0f02 	tst.w	r2, #2
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8005d90:	2001      	movs	r0, #1
 8005d92:	e7ec      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d94:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005d9c:	d070      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d9e:	493a      	ldr	r1, [pc, #232]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005da0:	688a      	ldr	r2, [r1, #8]
 8005da2:	f022 0203 	bic.w	r2, r2, #3
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005daa:	f7fd feb1 	bl	8003b10 <HAL_GetTick>
 8005dae:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db0:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	6862      	ldr	r2, [r4, #4]
 8005dba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005dbe:	d016      	beq.n	8005dee <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fd fea6 	bl	8003b10 <HAL_GetTick>
 8005dc4:	1b80      	subs	r0, r0, r6
 8005dc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dca:	4298      	cmp	r0, r3
 8005dcc:	d9f0      	bls.n	8005db0 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8005dce:	2003      	movs	r0, #3
 8005dd0:	e7cd      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005dda:	d1e0      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8005ddc:	2001      	movs	r0, #1
 8005dde:	e7c6      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de0:	4a29      	ldr	r2, [pc, #164]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005de8:	d1d9      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8005dea:	2001      	movs	r0, #1
 8005dec:	e7bf      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f013 0f02 	tst.w	r3, #2
 8005df4:	d006      	beq.n	8005e04 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df6:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005df8:	6893      	ldr	r3, [r2, #8]
 8005dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dfe:	68a1      	ldr	r1, [r4, #8]
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e04:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <HAL_RCC_ClockConfig+0x144>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	d90c      	bls.n	8005e2a <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e10:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_RCC_ClockConfig+0x144>)
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	f023 0307 	bic.w	r3, r3, #7
 8005e18:	432b      	orrs	r3, r5
 8005e1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1c:	6813      	ldr	r3, [r2, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	42ab      	cmp	r3, r5
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7a1      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f013 0f04 	tst.w	r3, #4
 8005e30:	d006      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005e34:	6893      	ldr	r3, [r2, #8]
 8005e36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e3a:	68e1      	ldr	r1, [r4, #12]
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	f013 0f08 	tst.w	r3, #8
 8005e46:	d007      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e48:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005e4a:	6893      	ldr	r3, [r2, #8]
 8005e4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005e50:	6921      	ldr	r1, [r4, #16]
 8005e52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005e56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e58:	f7ff fbfc 	bl	8005654 <HAL_RCC_GetSysClockFreq>
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <HAL_RCC_ClockConfig+0x148>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_ClockConfig+0x14c>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	40d8      	lsrs	r0, r3
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_RCC_ClockConfig+0x150>)
 8005e70:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <HAL_RCC_ClockConfig+0x154>)
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	f7fd fe09 	bl	8003a8c <HAL_InitTick>
  return status;
 8005e7a:	e778      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005e7c:	2001      	movs	r0, #1
}
 8005e7e:	4770      	bx	lr
        return HAL_ERROR;
 8005e80:	2001      	movs	r0, #1
 8005e82:	e774      	b.n	8005d6e <HAL_RCC_ClockConfig+0x2e>
 8005e84:	40022000 	.word	0x40022000
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	08009998 	.word	0x08009998
 8005e90:	20000080 	.word	0x20000080
 8005e94:	20000088 	.word	0x20000088

08005e98 <HAL_RCC_GetHCLKFreq>:
}
 8005e98:	4b01      	ldr	r3, [pc, #4]	; (8005ea0 <HAL_RCC_GetHCLKFreq+0x8>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000080 	.word	0x20000080

08005ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ea6:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f013 0f03 	tst.w	r3, #3
 8005eae:	d018      	beq.n	8005ee2 <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005eb0:	4b57      	ldr	r3, [pc, #348]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	6802      	ldr	r2, [r0, #0]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d002      	beq.n	8005ec4 <RCCEx_PLLSAI1_Config+0x20>
 8005ebe:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	f000 80a0 	beq.w	800600a <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6842      	ldr	r2, [r0, #4]
       ||
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d001      	beq.n	8005ede <RCCEx_PLLSAI1_Config+0x3a>
 8005eda:	2501      	movs	r5, #1
 8005edc:	e7f0      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8005ede:	2500      	movs	r5, #0
 8005ee0:	e01a      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d059      	beq.n	8005f9c <RCCEx_PLLSAI1_Config+0xf8>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d05e      	beq.n	8005faa <RCCEx_PLLSAI1_Config+0x106>
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d001      	beq.n	8005ef4 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8005ef0:	2501      	movs	r5, #1
 8005ef2:	e00f      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ef4:	4a46      	ldr	r2, [pc, #280]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f012 0f02 	tst.w	r2, #2
 8005efc:	d061      	beq.n	8005fc2 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005efe:	4d44      	ldr	r5, [pc, #272]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f00:	68ea      	ldr	r2, [r5, #12]
 8005f02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005f06:	6844      	ldr	r4, [r0, #4]
 8005f08:	3c01      	subs	r4, #1
 8005f0a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60eb      	str	r3, [r5, #12]
 8005f12:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	d1d3      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
 8005f18:	460f      	mov	r7, r1
 8005f1a:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f1c:	4a3c      	ldr	r2, [pc, #240]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f24:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005f26:	f7fd fdf3 	bl	8003b10 <HAL_GetTick>
 8005f2a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005f34:	d005      	beq.n	8005f42 <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f36:	f7fd fdeb 	bl	8003b10 <HAL_GetTick>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	2802      	cmp	r0, #2
 8005f3e:	d9f5      	bls.n	8005f2c <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8005f40:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	d1bc      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	d13d      	bne.n	8005fc6 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f4a:	4931      	ldr	r1, [pc, #196]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f4c:	690b      	ldr	r3, [r1, #16]
 8005f4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f56:	68a0      	ldr	r0, [r4, #8]
 8005f58:	68e2      	ldr	r2, [r4, #12]
 8005f5a:	0912      	lsrs	r2, r2, #4
 8005f5c:	0452      	lsls	r2, r2, #17
 8005f5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005f62:	4313      	orrs	r3, r2
 8005f64:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f68:	6813      	ldr	r3, [r2, #0]
 8005f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f6e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005f70:	f7fd fdce 	bl	8003b10 <HAL_GetTick>
 8005f74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f76:	4b26      	ldr	r3, [pc, #152]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005f7e:	d105      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f80:	f7fd fdc6 	bl	8003b10 <HAL_GetTick>
 8005f84:	1b80      	subs	r0, r0, r6
 8005f86:	2802      	cmp	r0, #2
 8005f88:	d9f5      	bls.n	8005f76 <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 8005f8a:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	d197      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f90:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f92:	6913      	ldr	r3, [r2, #16]
 8005f94:	69a1      	ldr	r1, [r4, #24]
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6113      	str	r3, [r2, #16]
 8005f9a:	e791      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005fa4:	d1ab      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8005fa6:	2501      	movs	r5, #1
 8005fa8:	e7b4      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005faa:	4a19      	ldr	r2, [pc, #100]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005fb2:	d1a4      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005fbc:	d19f      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8005fbe:	2501      	movs	r5, #1
 8005fc0:	e7a8      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 8005fc2:	2501      	movs	r5, #1
 8005fc4:	e7a6      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fc6:	2f01      	cmp	r7, #1
 8005fc8:	d00f      	beq.n	8005fea <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fca:	4811      	ldr	r0, [pc, #68]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005fcc:	6902      	ldr	r2, [r0, #16]
 8005fce:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005fd2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8005fd6:	68a1      	ldr	r1, [r4, #8]
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	065b      	lsls	r3, r3, #25
 8005fe0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	6103      	str	r3, [r0, #16]
 8005fe8:	e7bd      	b.n	8005f66 <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fea:	4809      	ldr	r0, [pc, #36]	; (8006010 <RCCEx_PLLSAI1_Config+0x16c>)
 8005fec:	6902      	ldr	r2, [r0, #16]
 8005fee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005ff2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8005ff6:	68a1      	ldr	r1, [r4, #8]
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	055b      	lsls	r3, r3, #21
 8006000:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006004:	4313      	orrs	r3, r2
 8006006:	6103      	str	r3, [r0, #16]
 8006008:	e7ad      	b.n	8005f66 <RCCEx_PLLSAI1_Config+0xc2>
 800600a:	2501      	movs	r5, #1
 800600c:	e758      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1c>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000

08006014 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006016:	4b51      	ldr	r3, [pc, #324]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f013 0f03 	tst.w	r3, #3
 800601e:	d018      	beq.n	8006052 <RCCEx_PLLSAI2_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006020:	4b4e      	ldr	r3, [pc, #312]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	4293      	cmp	r3, r2
 800602c:	d002      	beq.n	8006034 <RCCEx_PLLSAI2_Config+0x20>
 800602e:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8006030:	4628      	mov	r0, r5
 8006032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8006034:	2a00      	cmp	r2, #0
 8006036:	f000 808e 	beq.w	8006156 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800603a:	4b48      	ldr	r3, [pc, #288]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006042:	3301      	adds	r3, #1
 8006044:	6842      	ldr	r2, [r0, #4]
       ||
 8006046:	4293      	cmp	r3, r2
 8006048:	d001      	beq.n	800604e <RCCEx_PLLSAI2_Config+0x3a>
 800604a:	2501      	movs	r5, #1
 800604c:	e7f0      	b.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2500      	movs	r5, #0
 8006050:	e01a      	b.n	8006088 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 8006052:	6803      	ldr	r3, [r0, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d059      	beq.n	800610c <RCCEx_PLLSAI2_Config+0xf8>
 8006058:	2b03      	cmp	r3, #3
 800605a:	d05e      	beq.n	800611a <RCCEx_PLLSAI2_Config+0x106>
 800605c:	2b01      	cmp	r3, #1
 800605e:	d001      	beq.n	8006064 <RCCEx_PLLSAI2_Config+0x50>
      status = HAL_ERROR;
 8006060:	2501      	movs	r5, #1
 8006062:	e00f      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006064:	4a3d      	ldr	r2, [pc, #244]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	f012 0f02 	tst.w	r2, #2
 800606c:	d061      	beq.n	8006132 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800606e:	4d3b      	ldr	r5, [pc, #236]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006070:	68ea      	ldr	r2, [r5, #12]
 8006072:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006076:	6844      	ldr	r4, [r0, #4]
 8006078:	3c01      	subs	r4, #1
 800607a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800607e:	4313      	orrs	r3, r2
 8006080:	60eb      	str	r3, [r5, #12]
 8006082:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8006084:	2d00      	cmp	r5, #0
 8006086:	d1d3      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
 8006088:	460f      	mov	r7, r1
 800608a:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006094:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006096:	f7fd fd3b 	bl	8003b10 <HAL_GetTick>
 800609a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800609c:	4b2f      	ldr	r3, [pc, #188]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80060a4:	d005      	beq.n	80060b2 <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060a6:	f7fd fd33 	bl	8003b10 <HAL_GetTick>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	2802      	cmp	r0, #2
 80060ae:	d9f5      	bls.n	800609c <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 80060b0:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	d1bc      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 80060b6:	2f00      	cmp	r7, #0
 80060b8:	d13d      	bne.n	8006136 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ba:	4928      	ldr	r1, [pc, #160]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 80060bc:	694b      	ldr	r3, [r1, #20]
 80060be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c6:	68a0      	ldr	r0, [r4, #8]
 80060c8:	68e2      	ldr	r2, [r4, #12]
 80060ca:	0912      	lsrs	r2, r2, #4
 80060cc:	0452      	lsls	r2, r2, #17
 80060ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80060d2:	4313      	orrs	r3, r2
 80060d4:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80060d6:	4a21      	ldr	r2, [pc, #132]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80060e0:	f7fd fd16 	bl	8003b10 <HAL_GetTick>
 80060e4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060e6:	4b1d      	ldr	r3, [pc, #116]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80060ee:	d105      	bne.n	80060fc <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060f0:	f7fd fd0e 	bl	8003b10 <HAL_GetTick>
 80060f4:	1b80      	subs	r0, r0, r6
 80060f6:	2802      	cmp	r0, #2
 80060f8:	d9f5      	bls.n	80060e6 <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 80060fa:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	d197      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006100:	4a16      	ldr	r2, [pc, #88]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006102:	6953      	ldr	r3, [r2, #20]
 8006104:	6961      	ldr	r1, [r4, #20]
 8006106:	430b      	orrs	r3, r1
 8006108:	6153      	str	r3, [r2, #20]
 800610a:	e791      	b.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006114:	d1ab      	bne.n	800606e <RCCEx_PLLSAI2_Config+0x5a>
        status = HAL_ERROR;
 8006116:	2501      	movs	r5, #1
 8006118:	e7b4      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800611a:	4a10      	ldr	r2, [pc, #64]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006122:	d1a4      	bne.n	800606e <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006124:	4a0d      	ldr	r2, [pc, #52]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800612c:	d19f      	bne.n	800606e <RCCEx_PLLSAI2_Config+0x5a>
          status = HAL_ERROR;
 800612e:	2501      	movs	r5, #1
 8006130:	e7a8      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x70>
        status = HAL_ERROR;
 8006132:	2501      	movs	r5, #1
 8006134:	e7a6      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006136:	4809      	ldr	r0, [pc, #36]	; (800615c <RCCEx_PLLSAI2_Config+0x148>)
 8006138:	6942      	ldr	r2, [r0, #20]
 800613a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800613e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006142:	68a1      	ldr	r1, [r4, #8]
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	3b01      	subs	r3, #1
 800614a:	065b      	lsls	r3, r3, #25
 800614c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006150:	4313      	orrs	r3, r2
 8006152:	6143      	str	r3, [r0, #20]
 8006154:	e7bf      	b.n	80060d6 <RCCEx_PLLSAI2_Config+0xc2>
 8006156:	2501      	movs	r5, #1
 8006158:	e76a      	b.n	8006030 <RCCEx_PLLSAI2_Config+0x1c>
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000

08006160 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006168:	6803      	ldr	r3, [r0, #0]
 800616a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800616e:	d02f      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006170:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006176:	d025      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006178:	d908      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800617a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800617e:	d010      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006180:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006184:	f040 8099 	bne.w	80062ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006188:	2600      	movs	r6, #0
 800618a:	e010      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8094 	bne.w	80062ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006192:	2100      	movs	r1, #0
 8006194:	3004      	adds	r0, #4
 8006196:	f7ff fe85 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
 800619a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800619c:	b13e      	cbz	r6, 80061ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800619e:	4637      	mov	r7, r6
 80061a0:	e018      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061a4:	68d3      	ldr	r3, [r2, #12]
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061ac:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061ae:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80061b4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80061b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061c0:	2700      	movs	r7, #0
 80061c2:	e007      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061c4:	2100      	movs	r1, #0
 80061c6:	3020      	adds	r0, #32
 80061c8:	f7ff ff24 	bl	8006014 <RCCEx_PLLSAI2_Config>
 80061cc:	4606      	mov	r6, r0
      break;
 80061ce:	e7e5      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x3c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d0:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d2:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80061da:	d015      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch(PeriphClkInit->Sai2ClockSelection)
 80061dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80061de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061e2:	d07a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80061e4:	d96c      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80061e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ea:	d070      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80061ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061f0:	d17a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d17b      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061f6:	4a49      	ldr	r2, [pc, #292]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80061fc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006200:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006202:	430b      	orrs	r3, r1
 8006204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800620e:	f000 808e 	beq.w	800632e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006212:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800621a:	d16a      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PWR_CLK_ENABLE();
 800621c:	4b3f      	ldr	r3, [pc, #252]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800621e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006220:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006224:	659a      	str	r2, [r3, #88]	; 0x58
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006230:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006234:	4a3a      	ldr	r2, [pc, #232]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800623e:	f7fd fc67 	bl	8003b10 <HAL_GetTick>
 8006242:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006244:	4b36      	ldr	r3, [pc, #216]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f413 7f80 	tst.w	r3, #256	; 0x100
 800624c:	d105      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fd fc5f 	bl	8003b10 <HAL_GetTick>
 8006252:	1b40      	subs	r0, r0, r5
 8006254:	2802      	cmp	r0, #2
 8006256:	d9f5      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        ret = HAL_TIMEOUT;
 8006258:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800625a:	2e00      	cmp	r6, #0
 800625c:	d162      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800625e:	4b2f      	ldr	r3, [pc, #188]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006264:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006268:	d016      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800626a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800626e:	429a      	cmp	r2, r3
 8006270:	d012      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x138>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006272:	4a2a      	ldr	r2, [pc, #168]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006274:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800627c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006280:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006284:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006288:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800628c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006290:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006298:	f013 0f01 	tst.w	r3, #1
 800629c:	d12c      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      if(ret == HAL_OK)
 800629e:	2e00      	cmp	r6, #0
 80062a0:	f040 8143 	bne.w	800652a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80062aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ae:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80062b2:	430b      	orrs	r3, r1
 80062b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062b8:	e035      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      ret = HAL_ERROR;
 80062ba:	2701      	movs	r7, #1
 80062bc:	463e      	mov	r6, r7
 80062be:	e789      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 80062c0:	b993      	cbnz	r3, 80062e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062c2:	2100      	movs	r1, #0
 80062c4:	1d20      	adds	r0, r4, #4
 80062c6:	f7ff fded 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
 80062ca:	4606      	mov	r6, r0
      break;
 80062cc:	e791      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062d0:	68d3      	ldr	r3, [r2, #12]
 80062d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d6:	60d3      	str	r3, [r2, #12]
      break;
 80062d8:	e78b      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062da:	2100      	movs	r1, #0
 80062dc:	f104 0020 	add.w	r0, r4, #32
 80062e0:	f7ff fe98 	bl	8006014 <RCCEx_PLLSAI2_Config>
 80062e4:	4606      	mov	r6, r0
      break;
 80062e6:	e784      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = HAL_ERROR;
 80062e8:	2701      	movs	r7, #1
 80062ea:	463e      	mov	r6, r7
 80062ec:	e78c      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 80062ee:	4637      	mov	r7, r6
 80062f0:	e78a      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 80062f2:	f04f 0800 	mov.w	r8, #0
 80062f6:	e79d      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 80062f8:	f7fd fc0a 	bl	8003b10 <HAL_GetTick>
 80062fc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f013 0f02 	tst.w	r3, #2
 8006308:	d1c9      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f7fd fc01 	bl	8003b10 <HAL_GetTick>
 800630e:	1b40      	subs	r0, r0, r5
 8006310:	f241 3388 	movw	r3, #5000	; 0x1388
 8006314:	4298      	cmp	r0, r3
 8006316:	d9f2      	bls.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
            ret = HAL_TIMEOUT;
 8006318:	2603      	movs	r6, #3
 800631a:	e7c0      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000
      status = ret;
 8006324:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	f040 8100 	bne.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f013 0f01 	tst.w	r3, #1
 8006334:	d008      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006336:	4a9d      	ldr	r2, [pc, #628]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006338:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800633c:	f023 0303 	bic.w	r3, r3, #3
 8006340:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006342:	430b      	orrs	r3, r1
 8006344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	f013 0f02 	tst.w	r3, #2
 800634e:	d008      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006350:	4a96      	ldr	r2, [pc, #600]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006352:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006356:	f023 030c 	bic.w	r3, r3, #12
 800635a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800635c:	430b      	orrs	r3, r1
 800635e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f013 0f04 	tst.w	r3, #4
 8006368:	d008      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800636a:	4a90      	ldr	r2, [pc, #576]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800636c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006370:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006374:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006376:	430b      	orrs	r3, r1
 8006378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	f013 0f08 	tst.w	r3, #8
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006384:	4a89      	ldr	r2, [pc, #548]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006386:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800638a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800638e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006390:	430b      	orrs	r3, r1
 8006392:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f013 0f10 	tst.w	r3, #16
 800639c:	d008      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800639e:	4a83      	ldr	r2, [pc, #524]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80063a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063aa:	430b      	orrs	r3, r1
 80063ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	f013 0f20 	tst.w	r3, #32
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b8:	4a7c      	ldr	r2, [pc, #496]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80063ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80063c4:	430b      	orrs	r3, r1
 80063c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80063d0:	d008      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4a76      	ldr	r2, [pc, #472]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80063d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063d8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80063dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063de:	430b      	orrs	r3, r1
 80063e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80063ea:	d008      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063ec:	4a6f      	ldr	r2, [pc, #444]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80063ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80063f8:	430b      	orrs	r3, r1
 80063fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006404:	d008      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006406:	4a69      	ldr	r2, [pc, #420]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006408:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800640c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006410:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006412:	430b      	orrs	r3, r1
 8006414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800641e:	d008      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006420:	4a62      	ldr	r2, [pc, #392]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006422:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006426:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800642a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800642c:	430b      	orrs	r3, r1
 800642e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006438:	d008      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800643a:	4a5c      	ldr	r2, [pc, #368]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800643c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006440:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006444:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006446:	430b      	orrs	r3, r1
 8006448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006452:	d00f      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006454:	4a55      	ldr	r2, [pc, #340]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006456:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800645a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800645e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006460:	430b      	orrs	r3, r1
 8006462:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006466:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646c:	d065      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3da>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800646e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006472:	d067      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800647a:	d00f      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800647c:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800647e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006482:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006486:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006488:	430b      	orrs	r3, r1
 800648a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800648e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006494:	d05e      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800649a:	d060      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80064a2:	d00f      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a4:	4a41      	ldr	r2, [pc, #260]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80064a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80064ae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80064b0:	430b      	orrs	r3, r1
 80064b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064b6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80064b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064bc:	d057      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064c2:	d059      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x418>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80064ca:	d00f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064cc:	4a37      	ldr	r2, [pc, #220]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80064ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064d2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80064d6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80064d8:	430b      	orrs	r3, r1
 80064da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064de:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e4:	d050      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x428>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ea:	d055      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x438>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80064f2:	d008      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80064f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064fe:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006500:	430b      	orrs	r3, r1
 8006502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800650c:	d009      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800650e:	4a27      	ldr	r2, [pc, #156]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006510:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006518:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800651c:	430b      	orrs	r3, r1
 800651e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8006522:	4638      	mov	r0, r7
 8006524:	b002      	add	sp, #8
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800652a:	4637      	mov	r7, r6
 800652c:	e6fb      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800652e:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006530:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006536:	6593      	str	r3, [r2, #88]	; 0x58
 8006538:	e6f9      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653a:	68d3      	ldr	r3, [r2, #12]
 800653c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006540:	60d3      	str	r3, [r2, #12]
 8006542:	e797      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x314>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006544:	2101      	movs	r1, #1
 8006546:	1d20      	adds	r0, r4, #4
 8006548:	f7ff fcac 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800654c:	2800      	cmp	r0, #0
 800654e:	d091      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x314>
          status = ret;
 8006550:	4607      	mov	r7, r0
 8006552:	e78f      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006554:	68d3      	ldr	r3, [r2, #12]
 8006556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800655a:	60d3      	str	r3, [r2, #12]
 800655c:	e79e      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	2101      	movs	r1, #1
 8006560:	1d20      	adds	r0, r4, #4
 8006562:	f7ff fc9f 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006566:	2800      	cmp	r0, #0
 8006568:	d098      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x33c>
        status = ret;
 800656a:	4607      	mov	r7, r0
 800656c:	e796      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800656e:	68d3      	ldr	r3, [r2, #12]
 8006570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006574:	60d3      	str	r3, [r2, #12]
 8006576:	e7a5      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006578:	2101      	movs	r1, #1
 800657a:	1d20      	adds	r0, r4, #4
 800657c:	f7ff fc92 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006580:	2800      	cmp	r0, #0
 8006582:	d09f      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
        status = ret;
 8006584:	4607      	mov	r7, r0
 8006586:	e79d      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006588:	2102      	movs	r1, #2
 800658a:	1d20      	adds	r0, r4, #4
 800658c:	f7ff fc8a 	bl	8005ea4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006590:	2800      	cmp	r0, #0
 8006592:	d0ab      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 8006594:	4607      	mov	r7, r0
 8006596:	e7a9      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006598:	2102      	movs	r1, #2
 800659a:	f104 0020 	add.w	r0, r4, #32
 800659e:	f7ff fd39 	bl	8006014 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0a2      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 80065a6:	4607      	mov	r7, r0
 80065a8:	e7a0      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80065aa:	bf00      	nop
 80065ac:	40021000 	.word	0x40021000

080065b0 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCCEx_DisableLSECSS+0x18>)
 80065b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80065b6:	f022 0220 	bic.w	r2, r2, #32
 80065ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065c4:	619a      	str	r2, [r3, #24]
}
 80065c6:	4770      	bx	lr
 80065c8:	40021000 	.word	0x40021000

080065cc <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065cc:	4a02      	ldr	r2, [pc, #8]	; (80065d8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	f043 0304 	orr.w	r3, r3, #4
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	4770      	bx	lr
 80065d8:	40021000 	.word	0x40021000

080065dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065e0:	b083      	sub	sp, #12
 80065e2:	4604      	mov	r4, r0
 80065e4:	460f      	mov	r7, r1
 80065e6:	4616      	mov	r6, r2
 80065e8:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065ea:	f7fd fa91 	bl	8003b10 <HAL_GetTick>
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	1a18      	subs	r0, r3, r0
 80065f2:	eb00 0805 	add.w	r8, r0, r5
  tmp_tickstart = HAL_GetTick();
 80065f6:	f7fd fa8b 	bl	8003b10 <HAL_GetTick>
 80065fa:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065fc:	4b2a      	ldr	r3, [pc, #168]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006604:	fb08 f303 	mul.w	r3, r8, r3
 8006608:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	ea37 0303 	bics.w	r3, r7, r3
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	42b3      	cmp	r3, r6
 800661a:	d040      	beq.n	800669e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800661c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006620:	d0f3      	beq.n	800660a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006622:	f7fd fa75 	bl	8003b10 <HAL_GetTick>
 8006626:	eba0 0009 	sub.w	r0, r0, r9
 800662a:	4540      	cmp	r0, r8
 800662c:	d20a      	bcs.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x68>
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	d007      	beq.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	b90b      	cbnz	r3, 800663c <SPI_WaitFlagStateUntilTimeout+0x60>
      {
        tmp_timeout = 0U;
 8006638:	f04f 0800 	mov.w	r8, #0
      }
      count--;
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	3b01      	subs	r3, #1
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	e7e2      	b.n	800660a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	6853      	ldr	r3, [r2, #4]
 8006648:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800664c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006654:	d00b      	beq.n	800666e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665c:	d014      	beq.n	8006688 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800665e:	2301      	movs	r3, #1
 8006660:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006664:	2300      	movs	r3, #0
 8006666:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
 800666c:	e018      	b.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006674:	d002      	beq.n	800667c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667a:	d1ec      	bne.n	8006656 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	6813      	ldr	r3, [r2, #0]
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e7e6      	b.n	8006656 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	6813      	ldr	r3, [r2, #0]
 8006696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e7df      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800669e:	2000      	movs	r0, #0
}
 80066a0:	b003      	add	sp, #12
 80066a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066a6:	bf00      	nop
 80066a8:	20000080 	.word	0x20000080

080066ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b0:	b083      	sub	sp, #12
 80066b2:	4606      	mov	r6, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	4615      	mov	r5, r2
 80066b8:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066ba:	f7fd fa29 	bl	8003b10 <HAL_GetTick>
 80066be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c0:	1a18      	subs	r0, r3, r0
 80066c2:	eb00 0807 	add.w	r8, r0, r7
  tmp_tickstart = HAL_GetTick();
 80066c6:	f7fd fa23 	bl	8003b10 <HAL_GetTick>
 80066ca:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <SPI_WaitFifoStateUntilTimeout+0xd8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80066d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80066d8:	0d1b      	lsrs	r3, r3, #20
 80066da:	fb08 f303 	mul.w	r3, r8, r3
 80066de:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80066e0:	e002      	b.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80066e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80066e6:	d10b      	bne.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x54>
  while ((hspi->Instance->SR & Fifo) != State)
 80066e8:	6832      	ldr	r2, [r6, #0]
 80066ea:	6893      	ldr	r3, [r2, #8]
 80066ec:	4023      	ands	r3, r4
 80066ee:	42ab      	cmp	r3, r5
 80066f0:	d044      	beq.n	800677c <SPI_WaitFifoStateUntilTimeout+0xd0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066f2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80066f6:	d1f4      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x36>
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	d1f2      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80066fc:	7b13      	ldrb	r3, [r2, #12]
 80066fe:	e7f0      	b.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006700:	f7fd fa06 	bl	8003b10 <HAL_GetTick>
 8006704:	eba0 0009 	sub.w	r0, r0, r9
 8006708:	4540      	cmp	r0, r8
 800670a:	d20a      	bcs.n	8006722 <SPI_WaitFifoStateUntilTimeout+0x76>
 800670c:	f1b8 0f00 	cmp.w	r8, #0
 8006710:	d007      	beq.n	8006722 <SPI_WaitFifoStateUntilTimeout+0x76>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006712:	9b01      	ldr	r3, [sp, #4]
 8006714:	b90b      	cbnz	r3, 800671a <SPI_WaitFifoStateUntilTimeout+0x6e>
      {
        tmp_timeout = 0U;
 8006716:	f04f 0800 	mov.w	r8, #0
      }      
      count--;
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	3b01      	subs	r3, #1
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	e7e2      	b.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006722:	6832      	ldr	r2, [r6, #0]
 8006724:	6853      	ldr	r3, [r2, #4]
 8006726:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800672a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672c:	6873      	ldr	r3, [r6, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006732:	d00b      	beq.n	800674c <SPI_WaitFifoStateUntilTimeout+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006734:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673a:	d014      	beq.n	8006766 <SPI_WaitFifoStateUntilTimeout+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 800673c:	2301      	movs	r3, #1
 800673e:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006742:	2300      	movs	r3, #0
 8006744:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006748:	2003      	movs	r0, #3
 800674a:	e018      	b.n	800677e <SPI_WaitFifoStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674c:	68b3      	ldr	r3, [r6, #8]
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006752:	d002      	beq.n	800675a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006758:	d1ec      	bne.n	8006734 <SPI_WaitFifoStateUntilTimeout+0x88>
          __HAL_SPI_DISABLE(hspi);
 800675a:	6832      	ldr	r2, [r6, #0]
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e7e6      	b.n	8006734 <SPI_WaitFifoStateUntilTimeout+0x88>
          SPI_RESET_CRC(hspi);
 8006766:	6832      	ldr	r2, [r6, #0]
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e7df      	b.n	800673c <SPI_WaitFifoStateUntilTimeout+0x90>
    }
  }

  return HAL_OK;
 800677c:	2000      	movs	r0, #0
}
 800677e:	b003      	add	sp, #12
 8006780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006784:	20000080 	.word	0x20000080

08006788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	4604      	mov	r4, r0
 800678e:	460d      	mov	r5, r1
 8006790:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006792:	9200      	str	r2, [sp, #0]
 8006794:	460b      	mov	r3, r1
 8006796:	2200      	movs	r2, #0
 8006798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800679c:	f7ff ff86 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 80067a0:	b9b8      	cbnz	r0, 80067d2 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a2:	9600      	str	r6, [sp, #0]
 80067a4:	462b      	mov	r3, r5
 80067a6:	2200      	movs	r2, #0
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	4620      	mov	r0, r4
 80067ac:	f7ff ff16 	bl	80065dc <SPI_WaitFlagStateUntilTimeout>
 80067b0:	b9b8      	cbnz	r0, 80067e2 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b2:	9600      	str	r6, [sp, #0]
 80067b4:	462b      	mov	r3, r5
 80067b6:	2200      	movs	r2, #0
 80067b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff ff75 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	b150      	cbz	r0, 80067dc <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80067c8:	f043 0320 	orr.w	r3, r3, #32
 80067cc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e004      	b.n	80067dc <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80067d4:	f043 0320 	orr.w	r3, r3, #32
 80067d8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80067dc:	4618      	mov	r0, r3
 80067de:	b002      	add	sp, #8
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80067e4:	f043 0320 	orr.w	r3, r3, #32
 80067e8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e7f6      	b.n	80067dc <SPI_EndRxTxTransaction+0x54>

080067ee <HAL_SPI_MspInit>:
}
 80067ee:	4770      	bx	lr

080067f0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d06a      	beq.n	80068ca <HAL_SPI_Init+0xda>
{
 80067f4:	b510      	push	{r4, lr}
 80067f6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067fa:	b933      	cbnz	r3, 800680a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fc:	6843      	ldr	r3, [r0, #4]
 80067fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006802:	d005      	beq.n	8006810 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006804:	2300      	movs	r3, #0
 8006806:	61c3      	str	r3, [r0, #28]
 8006808:	e002      	b.n	8006810 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800680a:	2300      	movs	r3, #0
 800680c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800680e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006810:	2300      	movs	r3, #0
 8006812:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006814:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006818:	2b00      	cmp	r3, #0
 800681a:	d04d      	beq.n	80068b8 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 800681c:	2302      	movs	r3, #2
 800681e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	68e3      	ldr	r3, [r4, #12]
 800682e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006832:	d947      	bls.n	80068c4 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006834:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006836:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800683a:	d004      	beq.n	8006846 <HAL_SPI_Init+0x56>
 800683c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006840:	d001      	beq.n	8006846 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006842:	2300      	movs	r3, #0
 8006844:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800684c:	68a1      	ldr	r1, [r4, #8]
 800684e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8006852:	430b      	orrs	r3, r1
 8006854:	6921      	ldr	r1, [r4, #16]
 8006856:	f001 0102 	and.w	r1, r1, #2
 800685a:	430b      	orrs	r3, r1
 800685c:	6961      	ldr	r1, [r4, #20]
 800685e:	f001 0101 	and.w	r1, r1, #1
 8006862:	430b      	orrs	r3, r1
 8006864:	69a1      	ldr	r1, [r4, #24]
 8006866:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800686a:	430b      	orrs	r3, r1
 800686c:	69e1      	ldr	r1, [r4, #28]
 800686e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8006872:	430b      	orrs	r3, r1
 8006874:	6a21      	ldr	r1, [r4, #32]
 8006876:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800687a:	430b      	orrs	r3, r1
 800687c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800687e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	430b      	orrs	r3, r1
 8006886:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006888:	8b63      	ldrh	r3, [r4, #26]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006890:	f001 0110 	and.w	r1, r1, #16
 8006894:	430b      	orrs	r3, r1
 8006896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006898:	f001 0108 	and.w	r1, r1, #8
 800689c:	430b      	orrs	r3, r1
 800689e:	68e1      	ldr	r1, [r4, #12]
 80068a0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068ac:	2000      	movs	r0, #0
 80068ae:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80068b6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80068b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff ff96 	bl	80067ee <HAL_SPI_MspInit>
 80068c2:	e7ab      	b.n	800681c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068c8:	e7b5      	b.n	8006836 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80068ca:	2001      	movs	r0, #1
}
 80068cc:	4770      	bx	lr

080068ce <HAL_SPI_MspDeInit>:
}
 80068ce:	4770      	bx	lr

080068d0 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 80068d0:	b190      	cbz	r0, 80068f8 <HAL_SPI_DeInit+0x28>
{
 80068d2:	b510      	push	{r4, lr}
 80068d4:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 80068d6:	2302      	movs	r3, #2
 80068d8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80068dc:	6802      	ldr	r2, [r0, #0]
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80068e6:	f7ff fff2 	bl	80068ce <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068ea:	2000      	movs	r0, #0
 80068ec:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80068ee:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80068f2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
}
 80068f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
}
 80068fa:	4770      	bx	lr

080068fc <HAL_SPI_Transmit>:
{
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8006902:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8006906:	2c01      	cmp	r4, #1
 8006908:	f000 80e9 	beq.w	8006ade <HAL_SPI_Transmit+0x1e2>
 800690c:	461e      	mov	r6, r3
 800690e:	4615      	mov	r5, r2
 8006910:	4688      	mov	r8, r1
 8006912:	4604      	mov	r4, r0
 8006914:	2301      	movs	r3, #1
 8006916:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800691a:	f7fd f8f9 	bl	8003b10 <HAL_GetTick>
 800691e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006920:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	2a01      	cmp	r2, #1
 8006928:	d009      	beq.n	800693e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800692a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800692c:	2301      	movs	r3, #1
 800692e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006932:	2300      	movs	r3, #0
 8006934:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006938:	b002      	add	sp, #8
 800693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	f000 80be 	beq.w	8006ac2 <HAL_SPI_Transmit+0x1c6>
 8006946:	2d00      	cmp	r5, #0
 8006948:	f000 80bd 	beq.w	8006ac6 <HAL_SPI_Transmit+0x1ca>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800694c:	2303      	movs	r3, #3
 800694e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
 8006954:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006956:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800695a:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800695c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800695e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006960:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006964:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006968:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800696a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800696c:	68a3      	ldr	r3, [r4, #8]
 800696e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006972:	d01c      	beq.n	80069ae <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f012 0f40 	tst.w	r2, #64	; 0x40
 800697c:	d103      	bne.n	8006986 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006984:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800698c:	d938      	bls.n	8006a00 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	b10b      	cbz	r3, 8006996 <HAL_SPI_Transmit+0x9a>
 8006992:	2d01      	cmp	r5, #1
 8006994:	d120      	bne.n	80069d8 <HAL_SPI_Transmit+0xdc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006996:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	8812      	ldrh	r2, [r2, #0]
 800699c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800699e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069a0:	3302      	adds	r3, #2
 80069a2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80069a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80069ac:	e014      	b.n	80069d8 <HAL_SPI_Transmit+0xdc>
    __HAL_SPI_DISABLE(hspi);
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80069b8:	6822      	ldr	r2, [r4, #0]
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e7d7      	b.n	8006974 <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c4:	f7fd f8a4 	bl	8003b10 <HAL_GetTick>
 80069c8:	1bc0      	subs	r0, r0, r7
 80069ca:	42b0      	cmp	r0, r6
 80069cc:	d302      	bcc.n	80069d4 <HAL_SPI_Transmit+0xd8>
 80069ce:	f1b6 3fff 	cmp.w	r6, #4294967295
 80069d2:	d17a      	bne.n	8006aca <HAL_SPI_Transmit+0x1ce>
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	d07a      	beq.n	8006ace <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 80069d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05b      	beq.n	8006a98 <HAL_SPI_Transmit+0x19c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	f012 0f02 	tst.w	r2, #2
 80069e8:	d0ec      	beq.n	80069c4 <HAL_SPI_Transmit+0xc8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069ec:	8812      	ldrh	r2, [r2, #0]
 80069ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f2:	3302      	adds	r3, #2
 80069f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80069f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80069fe:	e7eb      	b.n	80069d8 <HAL_SPI_Transmit+0xdc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	b10b      	cbz	r3, 8006a08 <HAL_SPI_Transmit+0x10c>
 8006a04:	2d01      	cmp	r5, #1
 8006a06:	d130      	bne.n	8006a6a <HAL_SPI_Transmit+0x16e>
      if (hspi->TxXferCount > 1U)
 8006a08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d90b      	bls.n	8006a28 <HAL_SPI_Transmit+0x12c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	8812      	ldrh	r2, [r2, #0]
 8006a16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a20:	3b02      	subs	r3, #2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a26:	e020      	b.n	8006a6a <HAL_SPI_Transmit+0x16e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8006a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a32:	3301      	adds	r3, #1
 8006a34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006a36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a3e:	e014      	b.n	8006a6a <HAL_SPI_Transmit+0x16e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a48:	3301      	adds	r3, #1
 8006a4a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006a4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a54:	e009      	b.n	8006a6a <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a56:	f7fd f85b 	bl	8003b10 <HAL_GetTick>
 8006a5a:	1bc0      	subs	r0, r0, r7
 8006a5c:	42b0      	cmp	r0, r6
 8006a5e:	d302      	bcc.n	8006a66 <HAL_SPI_Transmit+0x16a>
 8006a60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006a64:	d135      	bne.n	8006ad2 <HAL_SPI_Transmit+0x1d6>
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d035      	beq.n	8006ad6 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 8006a6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	b19b      	cbz	r3, 8006a98 <HAL_SPI_Transmit+0x19c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	6893      	ldr	r3, [r2, #8]
 8006a74:	f013 0f02 	tst.w	r3, #2
 8006a78:	d0ed      	beq.n	8006a56 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8006a7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d9de      	bls.n	8006a40 <HAL_SPI_Transmit+0x144>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a90:	3b02      	subs	r3, #2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a96:	e7e8      	b.n	8006a6a <HAL_SPI_Transmit+0x16e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a98:	463a      	mov	r2, r7
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff fe73 	bl	8006788 <SPI_EndRxTxTransaction>
 8006aa2:	b108      	cbz	r0, 8006aa8 <HAL_SPI_Transmit+0x1ac>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	b933      	cbnz	r3, 8006aba <HAL_SPI_Transmit+0x1be>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	9201      	str	r2, [sp, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006abc:	b96b      	cbnz	r3, 8006ada <HAL_SPI_Transmit+0x1de>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e734      	b.n	800692c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e732      	b.n	800692c <HAL_SPI_Transmit+0x30>
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e730      	b.n	800692c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8006aca:	2003      	movs	r0, #3
 8006acc:	e72e      	b.n	800692c <HAL_SPI_Transmit+0x30>
 8006ace:	2003      	movs	r0, #3
 8006ad0:	e72c      	b.n	800692c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8006ad2:	2003      	movs	r0, #3
 8006ad4:	e72a      	b.n	800692c <HAL_SPI_Transmit+0x30>
 8006ad6:	2003      	movs	r0, #3
 8006ad8:	e728      	b.n	800692c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8006ada:	2001      	movs	r0, #1
 8006adc:	e726      	b.n	800692c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8006ade:	2002      	movs	r0, #2
 8006ae0:	e72a      	b.n	8006938 <HAL_SPI_Transmit+0x3c>

08006ae2 <HAL_SPI_TransmitReceive>:
{
 8006ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8006aea:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8006aee:	2c01      	cmp	r4, #1
 8006af0:	f000 815c 	beq.w	8006dac <HAL_SPI_TransmitReceive+0x2ca>
 8006af4:	461d      	mov	r5, r3
 8006af6:	4617      	mov	r7, r2
 8006af8:	460e      	mov	r6, r1
 8006afa:	4604      	mov	r4, r0
 8006afc:	2301      	movs	r3, #1
 8006afe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006b02:	f7fd f805 	bl	8003b10 <HAL_GetTick>
 8006b06:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8006b08:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8006b0c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8006b0e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b10:	2801      	cmp	r0, #1
 8006b12:	d014      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x5c>
 8006b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b18:	d009      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b22:	2200      	movs	r2, #0
 8006b24:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 812d 	bne.w	8006d90 <HAL_SPI_TransmitReceive+0x2ae>
 8006b36:	2804      	cmp	r0, #4
 8006b38:	d001      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e7ee      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	f000 8128 	beq.w	8006d94 <HAL_SPI_TransmitReceive+0x2b2>
 8006b44:	2f00      	cmp	r7, #0
 8006b46:	f000 8127 	beq.w	8006d98 <HAL_SPI_TransmitReceive+0x2b6>
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	f000 8126 	beq.w	8006d9c <HAL_SPI_TransmitReceive+0x2ba>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b50:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b5a:	2305      	movs	r3, #5
 8006b5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b64:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b66:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b6a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b6e:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b70:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b72:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8006b74:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b76:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b78:	68e3      	ldr	r3, [r4, #12]
 8006b7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b7e:	d801      	bhi.n	8006b84 <HAL_SPI_TransmitReceive+0xa2>
 8006b80:	2d01      	cmp	r5, #1
 8006b82:	d922      	bls.n	8006bca <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	6853      	ldr	r3, [r2, #4]
 8006b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b8c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b96:	d103      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba0:	68e3      	ldr	r3, [r4, #12]
 8006ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ba6:	d956      	bls.n	8006c56 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba8:	6863      	ldr	r3, [r4, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <HAL_SPI_TransmitReceive+0xce>
 8006bac:	2d01      	cmp	r5, #1
 8006bae:	d10a      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	8812      	ldrh	r2, [r2, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bba:	3302      	adds	r3, #2
 8006bbc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8006bbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006bc6:	2501      	movs	r5, #1
 8006bc8:	e025      	b.n	8006c16 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	6853      	ldr	r3, [r2, #4]
 8006bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bd2:	6053      	str	r3, [r2, #4]
 8006bd4:	e7db      	b.n	8006b8e <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	f012 0f01 	tst.w	r2, #1
 8006bde:	d010      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x120>
 8006be0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006be4:	b292      	uxth	r2, r2
 8006be6:	b162      	cbz	r2, 8006c02 <HAL_SPI_TransmitReceive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006bf4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8006c00:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c02:	f7fc ff85 	bl	8003b10 <HAL_GetTick>
 8006c06:	eba0 0009 	sub.w	r0, r0, r9
 8006c0a:	4540      	cmp	r0, r8
 8006c0c:	d303      	bcc.n	8006c16 <HAL_SPI_TransmitReceive+0x134>
 8006c0e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c12:	f040 80c5 	bne.w	8006da0 <HAL_SPI_TransmitReceive+0x2be>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b92b      	cbnz	r3, 8006c28 <HAL_SPI_TransmitReceive+0x146>
 8006c1c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80a7 	beq.w	8006d76 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	f012 0f02 	tst.w	r2, #2
 8006c30:	d0d1      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0xf4>
 8006c32:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006c34:	b292      	uxth	r2, r2
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	d0cd      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0xf4>
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	d0cb      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c40:	8812      	ldrh	r2, [r2, #0]
 8006c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c46:	3302      	adds	r3, #2
 8006c48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006c4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006c52:	2500      	movs	r5, #0
 8006c54:	e7bf      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c56:	6863      	ldr	r3, [r4, #4]
 8006c58:	b10b      	cbz	r3, 8006c5e <HAL_SPI_TransmitReceive+0x17c>
 8006c5a:	2d01      	cmp	r5, #1
 8006c5c:	d10e      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 8006c5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d90c      	bls.n	8006c80 <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	8812      	ldrh	r2, [r2, #0]
 8006c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c70:	3302      	adds	r3, #2
 8006c72:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c76:	3b02      	subs	r3, #2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006c7c:	2501      	movs	r5, #1
 8006c7e:	e047      	b.n	8006d10 <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006c8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006c96:	e7f1      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 8006c98:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	2a01      	cmp	r2, #1
 8006c9e:	d90b      	bls.n	8006cb8 <HAL_SPI_TransmitReceive+0x1d6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006ca2:	8812      	ldrh	r2, [r2, #0]
 8006ca4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ca8:	3302      	adds	r3, #2
 8006caa:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cae:	3b02      	subs	r3, #2
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	e03c      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x250>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8006cbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e030      	b.n	8006d32 <HAL_SPI_TransmitReceive+0x250>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	6853      	ldr	r3, [r2, #4]
 8006cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cd8:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8006cda:	2501      	movs	r5, #1
 8006cdc:	e00c      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ce0:	7b1b      	ldrb	r3, [r3, #12]
 8006ce2:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8006ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8006cea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8006cf6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cf8:	f7fc ff0a 	bl	8003b10 <HAL_GetTick>
 8006cfc:	eba0 0009 	sub.w	r0, r0, r9
 8006d00:	4540      	cmp	r0, r8
 8006d02:	d302      	bcc.n	8006d0a <HAL_SPI_TransmitReceive+0x228>
 8006d04:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006d08:	d14c      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x2c2>
 8006d0a:	f1b8 0f00 	cmp.w	r8, #0
 8006d0e:	d04b      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x2c6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	b91b      	cbnz	r3, 8006d1e <HAL_SPI_TransmitReceive+0x23c>
 8006d16:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	b35b      	cbz	r3, 8006d76 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	f012 0f02 	tst.w	r2, #2
 8006d26:	d004      	beq.n	8006d32 <HAL_SPI_TransmitReceive+0x250>
 8006d28:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	b10a      	cbz	r2, 8006d32 <HAL_SPI_TransmitReceive+0x250>
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	d1b2      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x1b6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	f012 0f01 	tst.w	r2, #1
 8006d3a:	d0dd      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x216>
 8006d3c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006d40:	b292      	uxth	r2, r2
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d0d8      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8006d46:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	d9c6      	bls.n	8006cde <HAL_SPI_TransmitReceive+0x1fc>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d58:	3302      	adds	r3, #2
 8006d5a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006d60:	3b02      	subs	r3, #2
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d68:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d9ae      	bls.n	8006cd0 <HAL_SPI_TransmitReceive+0x1ee>
        txallowed = 1U;
 8006d72:	2501      	movs	r5, #1
 8006d74:	e7c0      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d76:	464a      	mov	r2, r9
 8006d78:	4641      	mov	r1, r8
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f7ff fd04 	bl	8006788 <SPI_EndRxTxTransaction>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f43f aeca 	beq.w	8006b1c <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e6c5      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
 8006d92:	e6c3      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e6c1      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e6bf      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e6bd      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e6bb      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e6b9      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
 8006da8:	2303      	movs	r3, #3
 8006daa:	e6b7      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8006dac:	2302      	movs	r3, #2
 8006dae:	e6bb      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x46>

08006db0 <HAL_SPI_GetState>:
  return hspi->State;
 8006db0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8006db4:	4770      	bx	lr
	...

08006db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	6a03      	ldr	r3, [r0, #32]
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dc6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006dcc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd0:	680d      	ldr	r5, [r1, #0]
 8006dd2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dd4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dd8:	688d      	ldr	r5, [r1, #8]
 8006dda:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ddc:	4d1c      	ldr	r5, [pc, #112]	; (8006e50 <TIM_OC1_SetConfig+0x98>)
 8006dde:	42a8      	cmp	r0, r5
 8006de0:	d00f      	beq.n	8006e02 <TIM_OC1_SetConfig+0x4a>
 8006de2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006de6:	42a8      	cmp	r0, r5
 8006de8:	d00b      	beq.n	8006e02 <TIM_OC1_SetConfig+0x4a>
 8006dea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006dee:	42a8      	cmp	r0, r5
 8006df0:	d007      	beq.n	8006e02 <TIM_OC1_SetConfig+0x4a>
 8006df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006df6:	42a8      	cmp	r0, r5
 8006df8:	d003      	beq.n	8006e02 <TIM_OC1_SetConfig+0x4a>
 8006dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dfe:	42a8      	cmp	r0, r5
 8006e00:	d105      	bne.n	8006e0e <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e02:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e06:	68cd      	ldr	r5, [r1, #12]
 8006e08:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e0a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	4d10      	ldr	r5, [pc, #64]	; (8006e50 <TIM_OC1_SetConfig+0x98>)
 8006e10:	42a8      	cmp	r0, r5
 8006e12:	d00f      	beq.n	8006e34 <TIM_OC1_SetConfig+0x7c>
 8006e14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006e18:	42a8      	cmp	r0, r5
 8006e1a:	d00b      	beq.n	8006e34 <TIM_OC1_SetConfig+0x7c>
 8006e1c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006e20:	42a8      	cmp	r0, r5
 8006e22:	d007      	beq.n	8006e34 <TIM_OC1_SetConfig+0x7c>
 8006e24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006e28:	42a8      	cmp	r0, r5
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC1_SetConfig+0x7c>
 8006e2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006e30:	42a8      	cmp	r0, r5
 8006e32:	d105      	bne.n	8006e40 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e34:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e38:	694c      	ldr	r4, [r1, #20]
 8006e3a:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e3c:	698d      	ldr	r5, [r1, #24]
 8006e3e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e42:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e44:	684a      	ldr	r2, [r1, #4]
 8006e46:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	6203      	str	r3, [r0, #32]
}
 8006e4a:	bc30      	pop	{r4, r5}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40012c00 	.word	0x40012c00

08006e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e54:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e56:	6a03      	ldr	r3, [r0, #32]
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e62:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e68:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e6c:	680d      	ldr	r5, [r1, #0]
 8006e6e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e74:	688d      	ldr	r5, [r1, #8]
 8006e76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e7a:	4d18      	ldr	r5, [pc, #96]	; (8006edc <TIM_OC3_SetConfig+0x88>)
 8006e7c:	42a8      	cmp	r0, r5
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC3_SetConfig+0x34>
 8006e80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006e84:	42a8      	cmp	r0, r5
 8006e86:	d106      	bne.n	8006e96 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e8c:	68cd      	ldr	r5, [r1, #12]
 8006e8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	4d11      	ldr	r5, [pc, #68]	; (8006edc <TIM_OC3_SetConfig+0x88>)
 8006e98:	42a8      	cmp	r0, r5
 8006e9a:	d00f      	beq.n	8006ebc <TIM_OC3_SetConfig+0x68>
 8006e9c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006ea0:	42a8      	cmp	r0, r5
 8006ea2:	d00b      	beq.n	8006ebc <TIM_OC3_SetConfig+0x68>
 8006ea4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006ea8:	42a8      	cmp	r0, r5
 8006eaa:	d007      	beq.n	8006ebc <TIM_OC3_SetConfig+0x68>
 8006eac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006eb0:	42a8      	cmp	r0, r5
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC3_SetConfig+0x68>
 8006eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006eb8:	42a8      	cmp	r0, r5
 8006eba:	d107      	bne.n	8006ecc <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ebc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ec0:	694d      	ldr	r5, [r1, #20]
 8006ec2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ec6:	698d      	ldr	r5, [r1, #24]
 8006ec8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ece:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ed0:	684a      	ldr	r2, [r1, #4]
 8006ed2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed4:	6203      	str	r3, [r0, #32]
}
 8006ed6:	bc30      	pop	{r4, r5}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40012c00 	.word	0x40012c00

08006ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee2:	6a03      	ldr	r3, [r0, #32]
 8006ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006ef4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	680d      	ldr	r5, [r1, #0]
 8006efa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f02:	688d      	ldr	r5, [r1, #8]
 8006f04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f08:	4d0f      	ldr	r5, [pc, #60]	; (8006f48 <TIM_OC4_SetConfig+0x68>)
 8006f0a:	42a8      	cmp	r0, r5
 8006f0c:	d00f      	beq.n	8006f2e <TIM_OC4_SetConfig+0x4e>
 8006f0e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f12:	42a8      	cmp	r0, r5
 8006f14:	d00b      	beq.n	8006f2e <TIM_OC4_SetConfig+0x4e>
 8006f16:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006f1a:	42a8      	cmp	r0, r5
 8006f1c:	d007      	beq.n	8006f2e <TIM_OC4_SetConfig+0x4e>
 8006f1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f22:	42a8      	cmp	r0, r5
 8006f24:	d003      	beq.n	8006f2e <TIM_OC4_SetConfig+0x4e>
 8006f26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f2a:	42a8      	cmp	r0, r5
 8006f2c:	d104      	bne.n	8006f38 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f2e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f32:	694d      	ldr	r5, [r1, #20]
 8006f34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f3c:	684a      	ldr	r2, [r1, #4]
 8006f3e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f40:	6203      	str	r3, [r0, #32]
}
 8006f42:	bc30      	pop	{r4, r5}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00

08006f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f4e:	6a03      	ldr	r3, [r0, #32]
 8006f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f58:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f5a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	680d      	ldr	r5, [r1, #0]
 8006f66:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f6c:	688d      	ldr	r5, [r1, #8]
 8006f6e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	4d0f      	ldr	r5, [pc, #60]	; (8006fb0 <TIM_OC5_SetConfig+0x64>)
 8006f74:	42a8      	cmp	r0, r5
 8006f76:	d00f      	beq.n	8006f98 <TIM_OC5_SetConfig+0x4c>
 8006f78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f7c:	42a8      	cmp	r0, r5
 8006f7e:	d00b      	beq.n	8006f98 <TIM_OC5_SetConfig+0x4c>
 8006f80:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006f84:	42a8      	cmp	r0, r5
 8006f86:	d007      	beq.n	8006f98 <TIM_OC5_SetConfig+0x4c>
 8006f88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f8c:	42a8      	cmp	r0, r5
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC5_SetConfig+0x4c>
 8006f90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f94:	42a8      	cmp	r0, r5
 8006f96:	d104      	bne.n	8006fa2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f98:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f9c:	694d      	ldr	r5, [r1, #20]
 8006f9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fa6:	684a      	ldr	r2, [r1, #4]
 8006fa8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006faa:	6203      	str	r3, [r0, #32]
}
 8006fac:	bc30      	pop	{r4, r5}
 8006fae:	4770      	bx	lr
 8006fb0:	40012c00 	.word	0x40012c00

08006fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fb4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fb6:	6a03      	ldr	r3, [r0, #32]
 8006fb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006fbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fc2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fc4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006fc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	680d      	ldr	r5, [r1, #0]
 8006fce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fd6:	688d      	ldr	r5, [r1, #8]
 8006fd8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fdc:	4d0f      	ldr	r5, [pc, #60]	; (800701c <TIM_OC6_SetConfig+0x68>)
 8006fde:	42a8      	cmp	r0, r5
 8006fe0:	d00f      	beq.n	8007002 <TIM_OC6_SetConfig+0x4e>
 8006fe2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006fe6:	42a8      	cmp	r0, r5
 8006fe8:	d00b      	beq.n	8007002 <TIM_OC6_SetConfig+0x4e>
 8006fea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006fee:	42a8      	cmp	r0, r5
 8006ff0:	d007      	beq.n	8007002 <TIM_OC6_SetConfig+0x4e>
 8006ff2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ff6:	42a8      	cmp	r0, r5
 8006ff8:	d003      	beq.n	8007002 <TIM_OC6_SetConfig+0x4e>
 8006ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ffe:	42a8      	cmp	r0, r5
 8007000:	d104      	bne.n	800700c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007002:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007006:	694d      	ldr	r5, [r1, #20]
 8007008:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800700e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007010:	684a      	ldr	r2, [r1, #4]
 8007012:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	6203      	str	r3, [r0, #32]
}
 8007016:	bc30      	pop	{r4, r5}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00

08007020 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8007020:	290c      	cmp	r1, #12
 8007022:	d814      	bhi.n	800704e <HAL_TIM_ReadCapturedValue+0x2e>
 8007024:	e8df f001 	tbb	[pc, r1]
 8007028:	13131307 	.word	0x13131307
 800702c:	1313130a 	.word	0x1313130a
 8007030:	1313130d 	.word	0x1313130d
 8007034:	10          	.byte	0x10
 8007035:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800703a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800703c:	6803      	ldr	r3, [r0, #0]
 800703e:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8007040:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8007042:	6803      	ldr	r3, [r0, #0]
 8007044:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8007046:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8007048:	6803      	ldr	r3, [r0, #0]
 800704a:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800704c:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800704e:	2000      	movs	r0, #0
}
 8007050:	4770      	bx	lr

08007052 <HAL_TIM_IC_CaptureCallback>:
}
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_TriggerCallback>:
}
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_IRQHandler>:
{
 8007058:	b510      	push	{r4, lr}
 800705a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	f012 0f02 	tst.w	r2, #2
 8007064:	d011      	beq.n	800708a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	f012 0f02 	tst.w	r2, #2
 800706c:	d00d      	beq.n	800708a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800706e:	f06f 0202 	mvn.w	r2, #2
 8007072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007074:	2301      	movs	r3, #1
 8007076:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007078:	6803      	ldr	r3, [r0, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f013 0f03 	tst.w	r3, #3
 8007080:	d079      	beq.n	8007176 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007082:	f7ff ffe6 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	2300      	movs	r3, #0
 8007088:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	f012 0f04 	tst.w	r2, #4
 8007092:	d012      	beq.n	80070ba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	f012 0f04 	tst.w	r2, #4
 800709a:	d00e      	beq.n	80070ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800709c:	f06f 0204 	mvn.w	r2, #4
 80070a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a2:	2302      	movs	r3, #2
 80070a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80070ae:	d068      	beq.n	8007182 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7ff ffce 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	2300      	movs	r3, #0
 80070b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	f012 0f08 	tst.w	r2, #8
 80070c2:	d012      	beq.n	80070ea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	f012 0f08 	tst.w	r2, #8
 80070ca:	d00e      	beq.n	80070ea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070cc:	f06f 0208 	mvn.w	r2, #8
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070d2:	2304      	movs	r3, #4
 80070d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f013 0f03 	tst.w	r3, #3
 80070de:	d057      	beq.n	8007190 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80070e0:	4620      	mov	r0, r4
 80070e2:	f7ff ffb6 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e6:	2300      	movs	r3, #0
 80070e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	f012 0f10 	tst.w	r2, #16
 80070f2:	d012      	beq.n	800711a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	f012 0f10 	tst.w	r2, #16
 80070fa:	d00e      	beq.n	800711a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070fc:	f06f 0210 	mvn.w	r2, #16
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007102:	2308      	movs	r3, #8
 8007104:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800710e:	d046      	beq.n	800719e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff ff9e 	bl	8007052 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007116:	2300      	movs	r3, #0
 8007118:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	f012 0f01 	tst.w	r2, #1
 8007122:	d003      	beq.n	800712c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	f012 0f01 	tst.w	r2, #1
 800712a:	d13f      	bne.n	80071ac <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	f012 0f80 	tst.w	r2, #128	; 0x80
 800713c:	d13d      	bne.n	80071ba <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007146:	d003      	beq.n	8007150 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800714e:	d13b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007160:	d139      	bne.n	80071d6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	f012 0f20 	tst.w	r2, #32
 800716a:	d003      	beq.n	8007174 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	f012 0f20 	tst.w	r2, #32
 8007172:	d137      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x18c>
}
 8007174:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	f7f9 fd6f 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717a:	4620      	mov	r0, r4
 800717c:	f7ff ff6a 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
 8007180:	e781      	b.n	8007086 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007182:	4620      	mov	r0, r4
 8007184:	f7f9 fd68 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	4620      	mov	r0, r4
 800718a:	f7ff ff63 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
 800718e:	e792      	b.n	80070b6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007190:	4620      	mov	r0, r4
 8007192:	f7f9 fd61 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007196:	4620      	mov	r0, r4
 8007198:	f7ff ff5c 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
 800719c:	e7a3      	b.n	80070e6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719e:	4620      	mov	r0, r4
 80071a0:	f7f9 fd5a 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7ff ff55 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
 80071aa:	e7b4      	b.n	8007116 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ac:	f06f 0201 	mvn.w	r2, #1
 80071b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7f9 fd66 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
 80071b8:	e7b8      	b.n	800712c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fa90 	bl	80076e6 <HAL_TIMEx_BreakCallback>
 80071c6:	e7ba      	b.n	800713e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fa8a 	bl	80076e8 <HAL_TIMEx_Break2Callback>
 80071d4:	e7bc      	b.n	8007150 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80071dc:	4620      	mov	r0, r4
 80071de:	f7ff ff3a 	bl	8007056 <HAL_TIM_TriggerCallback>
 80071e2:	e7be      	b.n	8007162 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071e4:	f06f 0220 	mvn.w	r2, #32
 80071e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fa7a 	bl	80076e4 <HAL_TIMEx_CommutCallback>
}
 80071f0:	e7c0      	b.n	8007174 <HAL_TIM_IRQHandler+0x11c>
	...

080071f4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80071f4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071f6:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <TIM_Base_SetConfig+0xc4>)
 80071f8:	4290      	cmp	r0, r2
 80071fa:	d012      	beq.n	8007222 <TIM_Base_SetConfig+0x2e>
 80071fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007200:	d00f      	beq.n	8007222 <TIM_Base_SetConfig+0x2e>
 8007202:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007206:	4290      	cmp	r0, r2
 8007208:	d00b      	beq.n	8007222 <TIM_Base_SetConfig+0x2e>
 800720a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800720e:	4290      	cmp	r0, r2
 8007210:	d007      	beq.n	8007222 <TIM_Base_SetConfig+0x2e>
 8007212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007216:	4290      	cmp	r0, r2
 8007218:	d003      	beq.n	8007222 <TIM_Base_SetConfig+0x2e>
 800721a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800721e:	4290      	cmp	r0, r2
 8007220:	d103      	bne.n	800722a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007226:	684a      	ldr	r2, [r1, #4]
 8007228:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722a:	4a23      	ldr	r2, [pc, #140]	; (80072b8 <TIM_Base_SetConfig+0xc4>)
 800722c:	4290      	cmp	r0, r2
 800722e:	d01e      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 8007230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007234:	d01b      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 8007236:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800723a:	4290      	cmp	r0, r2
 800723c:	d017      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 800723e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007242:	4290      	cmp	r0, r2
 8007244:	d013      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 8007246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800724a:	4290      	cmp	r0, r2
 800724c:	d00f      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 800724e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007252:	4290      	cmp	r0, r2
 8007254:	d00b      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 8007256:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800725a:	4290      	cmp	r0, r2
 800725c:	d007      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 800725e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007262:	4290      	cmp	r0, r2
 8007264:	d003      	beq.n	800726e <TIM_Base_SetConfig+0x7a>
 8007266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800726a:	4290      	cmp	r0, r2
 800726c:	d103      	bne.n	8007276 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 800726e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007272:	68ca      	ldr	r2, [r1, #12]
 8007274:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727a:	694a      	ldr	r2, [r1, #20]
 800727c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800727e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007280:	688b      	ldr	r3, [r1, #8]
 8007282:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007284:	680b      	ldr	r3, [r1, #0]
 8007286:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <TIM_Base_SetConfig+0xc4>)
 800728a:	4298      	cmp	r0, r3
 800728c:	d00f      	beq.n	80072ae <TIM_Base_SetConfig+0xba>
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	4298      	cmp	r0, r3
 8007294:	d00b      	beq.n	80072ae <TIM_Base_SetConfig+0xba>
 8007296:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800729a:	4298      	cmp	r0, r3
 800729c:	d007      	beq.n	80072ae <TIM_Base_SetConfig+0xba>
 800729e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a2:	4298      	cmp	r0, r3
 80072a4:	d003      	beq.n	80072ae <TIM_Base_SetConfig+0xba>
 80072a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072aa:	4298      	cmp	r0, r3
 80072ac:	d101      	bne.n	80072b2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80072ae:	690b      	ldr	r3, [r1, #16]
 80072b0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80072b2:	2301      	movs	r3, #1
 80072b4:	6143      	str	r3, [r0, #20]
}
 80072b6:	4770      	bx	lr
 80072b8:	40012c00 	.word	0x40012c00

080072bc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80072bc:	b358      	cbz	r0, 8007316 <HAL_TIM_OC_Init+0x5a>
{
 80072be:	b510      	push	{r4, lr}
 80072c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80072c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072c6:	b30b      	cbz	r3, 800730c <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	2302      	movs	r3, #2
 80072ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072ce:	1d21      	adds	r1, r4, #4
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	f7ff ff8f 	bl	80071f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80072e0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80072e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80072e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80072ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80072f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072fc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007300:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007308:	2000      	movs	r0, #0
}
 800730a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800730c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007310:	f7fa fd6c 	bl	8001dec <HAL_TIM_OC_MspInit>
 8007314:	e7d8      	b.n	80072c8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8007316:	2001      	movs	r0, #1
}
 8007318:	4770      	bx	lr
	...

0800731c <TIM_OC2_SetConfig>:
{
 800731c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731e:	6a03      	ldr	r3, [r0, #32]
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007326:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007328:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800732a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007330:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	680d      	ldr	r5, [r1, #0]
 8007336:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800733a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800733e:	688d      	ldr	r5, [r1, #8]
 8007340:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007344:	4d17      	ldr	r5, [pc, #92]	; (80073a4 <TIM_OC2_SetConfig+0x88>)
 8007346:	42a8      	cmp	r0, r5
 8007348:	d003      	beq.n	8007352 <TIM_OC2_SetConfig+0x36>
 800734a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800734e:	42a8      	cmp	r0, r5
 8007350:	d106      	bne.n	8007360 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007356:	68cd      	ldr	r5, [r1, #12]
 8007358:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800735c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007360:	4d10      	ldr	r5, [pc, #64]	; (80073a4 <TIM_OC2_SetConfig+0x88>)
 8007362:	42a8      	cmp	r0, r5
 8007364:	d00f      	beq.n	8007386 <TIM_OC2_SetConfig+0x6a>
 8007366:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800736a:	42a8      	cmp	r0, r5
 800736c:	d00b      	beq.n	8007386 <TIM_OC2_SetConfig+0x6a>
 800736e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007372:	42a8      	cmp	r0, r5
 8007374:	d007      	beq.n	8007386 <TIM_OC2_SetConfig+0x6a>
 8007376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800737a:	42a8      	cmp	r0, r5
 800737c:	d003      	beq.n	8007386 <TIM_OC2_SetConfig+0x6a>
 800737e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007382:	42a8      	cmp	r0, r5
 8007384:	d107      	bne.n	8007396 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007386:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800738a:	694d      	ldr	r5, [r1, #20]
 800738c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007390:	698d      	ldr	r5, [r1, #24]
 8007392:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8007396:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007398:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800739a:	684a      	ldr	r2, [r1, #4]
 800739c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800739e:	6203      	str	r3, [r0, #32]
}
 80073a0:	bc30      	pop	{r4, r5}
 80073a2:	4770      	bx	lr
 80073a4:	40012c00 	.word	0x40012c00

080073a8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80073a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d02e      	beq.n	800740e <HAL_TIM_OC_ConfigChannel+0x66>
{
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80073b4:	2301      	movs	r3, #1
 80073b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80073ba:	2a14      	cmp	r2, #20
 80073bc:	d80f      	bhi.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
 80073be:	e8df f002 	tbb	[pc, r2]
 80073c2:	0e0b      	.short	0x0e0b
 80073c4:	0e120e0e 	.word	0x0e120e0e
 80073c8:	0e160e0e 	.word	0x0e160e0e
 80073cc:	0e1a0e0e 	.word	0x0e1a0e0e
 80073d0:	0e1e0e0e 	.word	0x0e1e0e0e
 80073d4:	0e0e      	.short	0x0e0e
 80073d6:	22          	.byte	0x22
 80073d7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d8:	6800      	ldr	r0, [r0, #0]
 80073da:	f7ff fced 	bl	8006db8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80073de:	2000      	movs	r0, #0
 80073e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80073e4:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	f7ff ff98 	bl	800731c <TIM_OC2_SetConfig>
      break;
 80073ec:	e7f7      	b.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	f7ff fd30 	bl	8006e54 <TIM_OC3_SetConfig>
      break;
 80073f4:	e7f3      	b.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	f7ff fd72 	bl	8006ee0 <TIM_OC4_SetConfig>
      break;
 80073fc:	e7ef      	b.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073fe:	6800      	ldr	r0, [r0, #0]
 8007400:	f7ff fda4 	bl	8006f4c <TIM_OC5_SetConfig>
      break;
 8007404:	e7eb      	b.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007406:	6800      	ldr	r0, [r0, #0]
 8007408:	f7ff fdd4 	bl	8006fb4 <TIM_OC6_SetConfig>
      break;
 800740c:	e7e7      	b.n	80073de <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 800740e:	2002      	movs	r0, #2
}
 8007410:	4770      	bx	lr

08007412 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007412:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007414:	f001 011f 	and.w	r1, r1, #31
 8007418:	2301      	movs	r3, #1
 800741a:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741e:	6a03      	ldr	r3, [r0, #32]
 8007420:	ea23 0304 	bic.w	r3, r3, r4
 8007424:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007426:	6a03      	ldr	r3, [r0, #32]
 8007428:	408a      	lsls	r2, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	6203      	str	r3, [r0, #32]
}
 800742e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007434:	460b      	mov	r3, r1
 8007436:	b9d1      	cbnz	r1, 800746e <HAL_TIM_OC_Start_IT+0x3a>
 8007438:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	f112 32ff 	adds.w	r2, r2, #4294967295
 8007442:	bf18      	it	ne
 8007444:	2201      	movne	r2, #1
 8007446:	2a00      	cmp	r2, #0
 8007448:	f040 80c1 	bne.w	80075ce <HAL_TIM_OC_Start_IT+0x19a>
{
 800744c:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800744e:	2b00      	cmp	r3, #0
 8007450:	d13d      	bne.n	80074ce <HAL_TIM_OC_Start_IT+0x9a>
 8007452:	2202      	movs	r2, #2
 8007454:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  switch (Channel)
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d859      	bhi.n	8007510 <HAL_TIM_OC_Start_IT+0xdc>
 800745c:	e8df f003 	tbb	[pc, r3]
 8007460:	58585853 	.word	0x58585853
 8007464:	58585897 	.word	0x58585897
 8007468:	5858589d 	.word	0x5858589d
 800746c:	a3          	.byte	0xa3
 800746d:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800746e:	2904      	cmp	r1, #4
 8007470:	d00d      	beq.n	800748e <HAL_TIM_OC_Start_IT+0x5a>
 8007472:	2908      	cmp	r1, #8
 8007474:	d013      	beq.n	800749e <HAL_TIM_OC_Start_IT+0x6a>
 8007476:	290c      	cmp	r1, #12
 8007478:	d019      	beq.n	80074ae <HAL_TIM_OC_Start_IT+0x7a>
 800747a:	2910      	cmp	r1, #16
 800747c:	d01f      	beq.n	80074be <HAL_TIM_OC_Start_IT+0x8a>
 800747e:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	f112 32ff 	adds.w	r2, r2, #4294967295
 8007488:	bf18      	it	ne
 800748a:	2201      	movne	r2, #1
 800748c:	e7db      	b.n	8007446 <HAL_TIM_OC_Start_IT+0x12>
 800748e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	f112 32ff 	adds.w	r2, r2, #4294967295
 8007498:	bf18      	it	ne
 800749a:	2201      	movne	r2, #1
 800749c:	e7d3      	b.n	8007446 <HAL_TIM_OC_Start_IT+0x12>
 800749e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	f112 32ff 	adds.w	r2, r2, #4294967295
 80074a8:	bf18      	it	ne
 80074aa:	2201      	movne	r2, #1
 80074ac:	e7cb      	b.n	8007446 <HAL_TIM_OC_Start_IT+0x12>
 80074ae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	f112 32ff 	adds.w	r2, r2, #4294967295
 80074b8:	bf18      	it	ne
 80074ba:	2201      	movne	r2, #1
 80074bc:	e7c3      	b.n	8007446 <HAL_TIM_OC_Start_IT+0x12>
 80074be:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	f112 32ff 	adds.w	r2, r2, #4294967295
 80074c8:	bf18      	it	ne
 80074ca:	2201      	movne	r2, #1
 80074cc:	e7bb      	b.n	8007446 <HAL_TIM_OC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d009      	beq.n	80074e6 <HAL_TIM_OC_Start_IT+0xb2>
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d00b      	beq.n	80074ee <HAL_TIM_OC_Start_IT+0xba>
 80074d6:	2b0c      	cmp	r3, #12
 80074d8:	d00d      	beq.n	80074f6 <HAL_TIM_OC_Start_IT+0xc2>
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d00f      	beq.n	80074fe <HAL_TIM_OC_Start_IT+0xca>
 80074de:	2202      	movs	r2, #2
 80074e0:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 80074e4:	e7b8      	b.n	8007458 <HAL_TIM_OC_Start_IT+0x24>
 80074e6:	2202      	movs	r2, #2
 80074e8:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 80074ec:	e7b4      	b.n	8007458 <HAL_TIM_OC_Start_IT+0x24>
 80074ee:	2202      	movs	r2, #2
 80074f0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80074f4:	e7b0      	b.n	8007458 <HAL_TIM_OC_Start_IT+0x24>
 80074f6:	2202      	movs	r2, #2
 80074f8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 80074fc:	e7ac      	b.n	8007458 <HAL_TIM_OC_Start_IT+0x24>
 80074fe:	2202      	movs	r2, #2
 8007500:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 8007504:	e7a8      	b.n	8007458 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007506:	6801      	ldr	r1, [r0, #0]
 8007508:	68ca      	ldr	r2, [r1, #12]
 800750a:	f042 0202 	orr.w	r2, r2, #2
 800750e:	60ca      	str	r2, [r1, #12]
 8007510:	4619      	mov	r1, r3
 8007512:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007514:	2201      	movs	r2, #1
 8007516:	6800      	ldr	r0, [r0, #0]
 8007518:	f7ff ff7b 	bl	8007412 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <HAL_TIM_OC_Start_IT+0x1a8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00f      	beq.n	8007544 <HAL_TIM_OC_Start_IT+0x110>
 8007524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007528:	4293      	cmp	r3, r2
 800752a:	d00b      	beq.n	8007544 <HAL_TIM_OC_Start_IT+0x110>
 800752c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <HAL_TIM_OC_Start_IT+0x110>
 8007534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <HAL_TIM_OC_Start_IT+0x110>
 800753c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007540:	4293      	cmp	r3, r2
 8007542:	d103      	bne.n	800754c <HAL_TIM_OC_Start_IT+0x118>
    __HAL_TIM_MOE_ENABLE(htim);
 8007544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800754a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	4a23      	ldr	r2, [pc, #140]	; (80075dc <HAL_TIM_OC_Start_IT+0x1a8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d02e      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d02b      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 800755a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800755e:	4293      	cmp	r3, r2
 8007560:	d027      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 8007562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007566:	4293      	cmp	r3, r2
 8007568:	d023      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 800756a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800756e:	4293      	cmp	r3, r2
 8007570:	d01f      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 8007572:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007576:	4293      	cmp	r3, r2
 8007578:	d01b      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
 800757a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800757e:	4293      	cmp	r3, r2
 8007580:	d017      	beq.n	80075b2 <HAL_TIM_OC_Start_IT+0x17e>
    __HAL_TIM_ENABLE(htim);
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800758a:	2000      	movs	r0, #0
 800758c:	e01e      	b.n	80075cc <HAL_TIM_OC_Start_IT+0x198>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800758e:	6801      	ldr	r1, [r0, #0]
 8007590:	68ca      	ldr	r2, [r1, #12]
 8007592:	f042 0204 	orr.w	r2, r2, #4
 8007596:	60ca      	str	r2, [r1, #12]
      break;
 8007598:	e7ba      	b.n	8007510 <HAL_TIM_OC_Start_IT+0xdc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800759a:	6801      	ldr	r1, [r0, #0]
 800759c:	68ca      	ldr	r2, [r1, #12]
 800759e:	f042 0208 	orr.w	r2, r2, #8
 80075a2:	60ca      	str	r2, [r1, #12]
      break;
 80075a4:	e7b4      	b.n	8007510 <HAL_TIM_OC_Start_IT+0xdc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075a6:	6801      	ldr	r1, [r0, #0]
 80075a8:	68ca      	ldr	r2, [r1, #12]
 80075aa:	f042 0210 	orr.w	r2, r2, #16
 80075ae:	60ca      	str	r2, [r1, #12]
      break;
 80075b0:	e7ae      	b.n	8007510 <HAL_TIM_OC_Start_IT+0xdc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <HAL_TIM_OC_Start_IT+0x1ac>)
 80075b6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b8:	2a06      	cmp	r2, #6
 80075ba:	d00a      	beq.n	80075d2 <HAL_TIM_OC_Start_IT+0x19e>
 80075bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80075c0:	d009      	beq.n	80075d6 <HAL_TIM_OC_Start_IT+0x1a2>
      __HAL_TIM_ENABLE(htim);
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80075ca:	2000      	movs	r0, #0
}
 80075cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80075ce:	2001      	movs	r0, #1
}
 80075d0:	4770      	bx	lr
  return HAL_OK;
 80075d2:	2000      	movs	r0, #0
 80075d4:	e7fa      	b.n	80075cc <HAL_TIM_OC_Start_IT+0x198>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e7f8      	b.n	80075cc <HAL_TIM_OC_Start_IT+0x198>
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	00010007 	.word	0x00010007

080075e4 <HAL_TIM_OC_Stop_IT>:
{
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4605      	mov	r5, r0
 80075e8:	460c      	mov	r4, r1
  switch (Channel)
 80075ea:	290c      	cmp	r1, #12
 80075ec:	d80d      	bhi.n	800760a <HAL_TIM_OC_Stop_IT+0x26>
 80075ee:	e8df f001 	tbb	[pc, r1]
 80075f2:	0c07      	.short	0x0c07
 80075f4:	0c4f0c0c 	.word	0x0c4f0c0c
 80075f8:	0c550c0c 	.word	0x0c550c0c
 80075fc:	0c0c      	.short	0x0c0c
 80075fe:	5b          	.byte	0x5b
 80075ff:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007600:	6802      	ldr	r2, [r0, #0]
 8007602:	68d3      	ldr	r3, [r2, #12]
 8007604:	f023 0302 	bic.w	r3, r3, #2
 8007608:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800760a:	2200      	movs	r2, #0
 800760c:	4621      	mov	r1, r4
 800760e:	6828      	ldr	r0, [r5, #0]
 8007610:	f7ff feff 	bl	8007412 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	4a32      	ldr	r2, [pc, #200]	; (80076e0 <HAL_TIM_OC_Stop_IT+0xfc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00f      	beq.n	800763c <HAL_TIM_OC_Stop_IT+0x58>
 800761c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007620:	4293      	cmp	r3, r2
 8007622:	d00b      	beq.n	800763c <HAL_TIM_OC_Stop_IT+0x58>
 8007624:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007628:	4293      	cmp	r3, r2
 800762a:	d007      	beq.n	800763c <HAL_TIM_OC_Stop_IT+0x58>
 800762c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007630:	4293      	cmp	r3, r2
 8007632:	d003      	beq.n	800763c <HAL_TIM_OC_Stop_IT+0x58>
 8007634:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007638:	4293      	cmp	r3, r2
 800763a:	d10d      	bne.n	8007658 <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 800763c:	6a19      	ldr	r1, [r3, #32]
 800763e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007642:	4211      	tst	r1, r2
 8007644:	d108      	bne.n	8007658 <HAL_TIM_OC_Stop_IT+0x74>
 8007646:	6a19      	ldr	r1, [r3, #32]
 8007648:	f240 4244 	movw	r2, #1092	; 0x444
 800764c:	4211      	tst	r1, r2
 800764e:	d103      	bne.n	8007658 <HAL_TIM_OC_Stop_IT+0x74>
 8007650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007656:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	6a19      	ldr	r1, [r3, #32]
 800765c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007660:	4211      	tst	r1, r2
 8007662:	d108      	bne.n	8007676 <HAL_TIM_OC_Stop_IT+0x92>
 8007664:	6a19      	ldr	r1, [r3, #32]
 8007666:	f240 4244 	movw	r2, #1092	; 0x444
 800766a:	4211      	tst	r1, r2
 800766c:	d103      	bne.n	8007676 <HAL_TIM_OC_Stop_IT+0x92>
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007676:	b1ec      	cbz	r4, 80076b4 <HAL_TIM_OC_Stop_IT+0xd0>
 8007678:	2c04      	cmp	r4, #4
 800767a:	d020      	beq.n	80076be <HAL_TIM_OC_Stop_IT+0xda>
 800767c:	2c08      	cmp	r4, #8
 800767e:	d022      	beq.n	80076c6 <HAL_TIM_OC_Stop_IT+0xe2>
 8007680:	2c0c      	cmp	r4, #12
 8007682:	d024      	beq.n	80076ce <HAL_TIM_OC_Stop_IT+0xea>
 8007684:	2c10      	cmp	r4, #16
 8007686:	d026      	beq.n	80076d6 <HAL_TIM_OC_Stop_IT+0xf2>
 8007688:	2301      	movs	r3, #1
 800768a:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800768e:	e014      	b.n	80076ba <HAL_TIM_OC_Stop_IT+0xd6>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007690:	6802      	ldr	r2, [r0, #0]
 8007692:	68d3      	ldr	r3, [r2, #12]
 8007694:	f023 0304 	bic.w	r3, r3, #4
 8007698:	60d3      	str	r3, [r2, #12]
      break;
 800769a:	e7b6      	b.n	800760a <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800769c:	6802      	ldr	r2, [r0, #0]
 800769e:	68d3      	ldr	r3, [r2, #12]
 80076a0:	f023 0308 	bic.w	r3, r3, #8
 80076a4:	60d3      	str	r3, [r2, #12]
      break;
 80076a6:	e7b0      	b.n	800760a <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80076a8:	6802      	ldr	r2, [r0, #0]
 80076aa:	68d3      	ldr	r3, [r2, #12]
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	60d3      	str	r3, [r2, #12]
      break;
 80076b2:	e7aa      	b.n	800760a <HAL_TIM_OC_Stop_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	2301      	movs	r3, #1
 80076b6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 80076ba:	2000      	movs	r0, #0
 80076bc:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	2301      	movs	r3, #1
 80076c0:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 80076c4:	e7f9      	b.n	80076ba <HAL_TIM_OC_Stop_IT+0xd6>
 80076c6:	2301      	movs	r3, #1
 80076c8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80076cc:	e7f5      	b.n	80076ba <HAL_TIM_OC_Stop_IT+0xd6>
 80076ce:	2301      	movs	r3, #1
 80076d0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80076d4:	e7f1      	b.n	80076ba <HAL_TIM_OC_Stop_IT+0xd6>
 80076d6:	2301      	movs	r3, #1
 80076d8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 80076dc:	e7ed      	b.n	80076ba <HAL_TIM_OC_Stop_IT+0xd6>
 80076de:	bf00      	nop
 80076e0:	40012c00 	.word	0x40012c00

080076e4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076e8:	4770      	bx	lr
	...

080076ec <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076ec:	2a02      	cmp	r2, #2
 80076ee:	d00a      	beq.n	8007706 <USB_SetTurnaroundTime+0x1a>
      UsbTrd = 0x6U;
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076f0:	2109      	movs	r1, #9
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076f2:	68c2      	ldr	r2, [r0, #12]
 80076f4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80076f8:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076fa:	68c3      	ldr	r3, [r0, #12]
 80076fc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8007700:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8007702:	2000      	movs	r0, #0
 8007704:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007706:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <USB_SetTurnaroundTime+0xc4>)
 8007708:	440b      	add	r3, r1
 800770a:	4a2a      	ldr	r2, [pc, #168]	; (80077b4 <USB_SetTurnaroundTime+0xc8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d93f      	bls.n	8007790 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <USB_SetTurnaroundTime+0xcc>)
 8007712:	440b      	add	r3, r1
 8007714:	4a29      	ldr	r2, [pc, #164]	; (80077bc <USB_SetTurnaroundTime+0xd0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d93c      	bls.n	8007794 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800771a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800771e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8007722:	4a27      	ldr	r2, [pc, #156]	; (80077c0 <USB_SetTurnaroundTime+0xd4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d937      	bls.n	8007798 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007728:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800772c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8007730:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8007734:	32a0      	adds	r2, #160	; 0xa0
 8007736:	4293      	cmp	r3, r2
 8007738:	d930      	bls.n	800779c <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <USB_SetTurnaroundTime+0xd8>)
 800773c:	440b      	add	r3, r1
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <USB_SetTurnaroundTime+0xdc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d92d      	bls.n	80077a0 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007744:	4b21      	ldr	r3, [pc, #132]	; (80077cc <USB_SetTurnaroundTime+0xe0>)
 8007746:	440b      	add	r3, r1
 8007748:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800774c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8007750:	4293      	cmp	r3, r2
 8007752:	d927      	bls.n	80077a4 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007754:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <USB_SetTurnaroundTime+0xe4>)
 8007756:	440b      	add	r3, r1
 8007758:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800775c:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8007760:	4293      	cmp	r3, r2
 8007762:	d921      	bls.n	80077a8 <USB_SetTurnaroundTime+0xbc>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007764:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8007768:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800776c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8007770:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8007774:	4293      	cmp	r3, r2
 8007776:	d919      	bls.n	80077ac <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007778:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <USB_SetTurnaroundTime+0xe8>)
 800777a:	440b      	add	r3, r1
 800777c:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8007780:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8007784:	4293      	cmp	r3, r2
 8007786:	d901      	bls.n	800778c <USB_SetTurnaroundTime+0xa0>
      UsbTrd = 0x6U;
 8007788:	2106      	movs	r1, #6
 800778a:	e7b2      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 800778c:	2107      	movs	r1, #7
 800778e:	e7b0      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8007790:	210f      	movs	r1, #15
 8007792:	e7ae      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8007794:	210e      	movs	r1, #14
 8007796:	e7ac      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8007798:	210d      	movs	r1, #13
 800779a:	e7aa      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800779c:	210c      	movs	r1, #12
 800779e:	e7a8      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80077a0:	210b      	movs	r1, #11
 80077a2:	e7a6      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80077a4:	210a      	movs	r1, #10
 80077a6:	e7a4      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80077a8:	2109      	movs	r1, #9
 80077aa:	e7a2      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80077ac:	2108      	movs	r1, #8
 80077ae:	e7a0      	b.n	80076f2 <USB_SetTurnaroundTime+0x6>
 80077b0:	ff275340 	.word	0xff275340
 80077b4:	000c34ff 	.word	0x000c34ff
 80077b8:	ff1b1e40 	.word	0xff1b1e40
 80077bc:	000f423f 	.word	0x000f423f
 80077c0:	00124f7f 	.word	0x00124f7f
 80077c4:	fee5b660 	.word	0xfee5b660
 80077c8:	0016e35f 	.word	0x0016e35f
 80077cc:	feced300 	.word	0xfeced300
 80077d0:	feb35bc0 	.word	0xfeb35bc0
 80077d4:	fe5954e0 	.word	0xfe5954e0

080077d8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077d8:	0189      	lsls	r1, r1, #6
 80077da:	f041 0120 	orr.w	r1, r1, #32
 80077de:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80077e0:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80077e2:	3301      	adds	r3, #1
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <USB_FlushTxFifo+0x24>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d805      	bhi.n	80077f6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077ea:	6902      	ldr	r2, [r0, #16]
 80077ec:	f012 0f20 	tst.w	r2, #32
 80077f0:	d1f7      	bne.n	80077e2 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 80077f2:	2000      	movs	r0, #0
 80077f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077f6:	2003      	movs	r0, #3
}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	00030d40 	.word	0x00030d40

08007800 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007800:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007804:	f003 0306 	and.w	r3, r3, #6

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007808:	2b02      	cmp	r3, #2
 800780a:	d005      	beq.n	8007818 <USB_GetDevSpeed+0x18>
 800780c:	2b06      	cmp	r3, #6
 800780e:	d001      	beq.n	8007814 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
 8007810:	200f      	movs	r0, #15
  }

  return speed;
}
 8007812:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8007814:	2002      	movs	r0, #2
 8007816:	4770      	bx	lr
 8007818:	2002      	movs	r0, #2
 800781a:	4770      	bx	lr

0800781c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800781c:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800781e:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8007820:	784a      	ldrb	r2, [r1, #1]
 8007822:	2a01      	cmp	r2, #1
 8007824:	d022      	beq.n	800786c <USB_ActivateEndpoint+0x50>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007826:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800782a:	f003 060f 	and.w	r6, r3, #15
 800782e:	2401      	movs	r4, #1
 8007830:	40b4      	lsls	r4, r6
 8007832:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007836:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800783a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800783e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007842:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007846:	d10e      	bne.n	8007866 <USB_ActivateEndpoint+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007848:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800784c:	688a      	ldr	r2, [r1, #8]
 800784e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007852:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007854:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8007858:	4313      	orrs	r3, r2
 800785a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007862:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8007866:	2000      	movs	r0, #0
 8007868:	bc70      	pop	{r4, r5, r6}
 800786a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800786c:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8007870:	f003 060f 	and.w	r6, r3, #15
 8007874:	40b2      	lsls	r2, r6
 8007876:	b292      	uxth	r2, r2
 8007878:	4322      	orrs	r2, r4
 800787a:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800787e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007882:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007886:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800788a:	d1ec      	bne.n	8007866 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800788c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007890:	688c      	ldr	r4, [r1, #8]
 8007892:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007896:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007898:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800789c:	ea44 5383 	orr.w	r3, r4, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80078ae:	e7da      	b.n	8007866 <USB_ActivateEndpoint+0x4a>

080078b0 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80078b0:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078b2:	784a      	ldrb	r2, [r1, #1]
 80078b4:	2a01      	cmp	r2, #1
 80078b6:	d023      	beq.n	8007900 <USB_EP0StartXfer+0x50>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078b8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80078bc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	0cd2      	lsrs	r2, r2, #19
 80078c4:	04d2      	lsls	r2, r2, #19
 80078c6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80078ce:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80078d2:	611a      	str	r2, [r3, #16]

    if (ep->xfer_len > 0U)
 80078d4:	694a      	ldr	r2, [r1, #20]
 80078d6:	b10a      	cbz	r2, 80078dc <USB_EP0StartXfer+0x2c>
    {
      ep->xfer_len = ep->maxpacket;
 80078d8:	688a      	ldr	r2, [r1, #8]
 80078da:	614a      	str	r2, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80078e2:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	6889      	ldr	r1, [r1, #8]
 80078e8:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80078ec:	430a      	orrs	r2, r1
 80078ee:	611a      	str	r2, [r3, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80078f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80078fc:	2000      	movs	r0, #0
 80078fe:	4770      	bx	lr
{
 8007900:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 8007902:	694a      	ldr	r2, [r1, #20]
 8007904:	bb62      	cbnz	r2, 8007960 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007906:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800790a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800790e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007912:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007916:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800791a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800791e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007922:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007926:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800792a:	0ce4      	lsrs	r4, r4, #19
 800792c:	04e4      	lsls	r4, r4, #19
 800792e:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007932:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007936:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800793a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800793e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8007942:	694b      	ldr	r3, [r1, #20]
 8007944:	b14b      	cbz	r3, 800795a <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007946:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800794a:	780a      	ldrb	r2, [r1, #0]
 800794c:	f002 010f 	and.w	r1, r2, #15
 8007950:	2201      	movs	r2, #1
 8007952:	408a      	lsls	r2, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800795a:	2000      	movs	r0, #0
 800795c:	bc30      	pop	{r4, r5}
 800795e:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007960:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8007964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007968:	6914      	ldr	r4, [r2, #16]
 800796a:	0ce4      	lsrs	r4, r4, #19
 800796c:	04e4      	lsls	r4, r4, #19
 800796e:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007970:	6914      	ldr	r4, [r2, #16]
 8007972:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007976:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800797a:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800797c:	694d      	ldr	r5, [r1, #20]
 800797e:	688c      	ldr	r4, [r1, #8]
 8007980:	42a5      	cmp	r5, r4
 8007982:	d900      	bls.n	8007986 <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 8007984:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007986:	6914      	ldr	r4, [r2, #16]
 8007988:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800798c:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800798e:	6914      	ldr	r4, [r2, #16]
 8007990:	694d      	ldr	r5, [r1, #20]
 8007992:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007996:	432c      	orrs	r4, r5
 8007998:	6114      	str	r4, [r2, #16]
 800799a:	e7ca      	b.n	8007932 <USB_EP0StartXfer+0x82>

0800799c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800799c:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800799e:	3303      	adds	r3, #3
 80079a0:	089b      	lsrs	r3, r3, #2
  for (i = 0U; i < count32b; i++)
 80079a2:	2500      	movs	r5, #0
 80079a4:	e007      	b.n	80079b6 <USB_WritePacket+0x1a>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079a6:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 80079aa:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80079ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80079b2:	6026      	str	r6, [r4, #0]
  for (i = 0U; i < count32b; i++)
 80079b4:	3501      	adds	r5, #1
 80079b6:	429d      	cmp	r5, r3
 80079b8:	d3f5      	bcc.n	80079a6 <USB_WritePacket+0xa>
    pSrc++;
  }

  return HAL_OK;
}
 80079ba:	2000      	movs	r0, #0
 80079bc:	bc70      	pop	{r4, r5, r6}
 80079be:	4770      	bx	lr

080079c0 <USB_EPStartXfer>:
{
 80079c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80079c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80079c4:	784a      	ldrb	r2, [r1, #1]
 80079c6:	2a01      	cmp	r2, #1
 80079c8:	d027      	beq.n	8007a1a <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079ca:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80079ce:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 80079d2:	6914      	ldr	r4, [r2, #16]
 80079d4:	0ce4      	lsrs	r4, r4, #19
 80079d6:	04e4      	lsls	r4, r4, #19
 80079d8:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079da:	6914      	ldr	r4, [r2, #16]
 80079dc:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80079e0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80079e4:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 80079e6:	694c      	ldr	r4, [r1, #20]
 80079e8:	2c00      	cmp	r4, #0
 80079ea:	f040 8093 	bne.w	8007b14 <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079ee:	6914      	ldr	r4, [r2, #16]
 80079f0:	688d      	ldr	r5, [r1, #8]
 80079f2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80079f6:	432c      	orrs	r4, r5
 80079f8:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fa:	6914      	ldr	r4, [r2, #16]
 80079fc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007a00:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007a02:	78ca      	ldrb	r2, [r1, #3]
 8007a04:	2a01      	cmp	r2, #1
 8007a06:	f000 809a 	beq.w	8007b3e <USB_EPStartXfer+0x17e>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a0a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007a0e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007a12:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8007a16:	2000      	movs	r0, #0
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 8007a1a:	694a      	ldr	r2, [r1, #20]
 8007a1c:	bb72      	cbnz	r2, 8007a7c <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a1e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8007a22:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a26:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a2a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a2e:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a32:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a36:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007a3a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a3e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a42:	0ce4      	lsrs	r4, r4, #19
 8007a44:	04e4      	lsls	r4, r4, #19
 8007a46:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a4a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007a4e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007a52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007a56:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8007a5a:	78ca      	ldrb	r2, [r1, #3]
 8007a5c:	2a01      	cmp	r2, #1
 8007a5e:	d041      	beq.n	8007ae4 <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 8007a60:	694b      	ldr	r3, [r1, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0d7      	beq.n	8007a16 <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a66:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8007a6a:	780a      	ldrb	r2, [r1, #0]
 8007a6c:	f002 010f 	and.w	r1, r2, #15
 8007a70:	2201      	movs	r2, #1
 8007a72:	408a      	lsls	r2, r1
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8007a7a:	e7cc      	b.n	8007a16 <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a7c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8007a80:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a84:	0ce4      	lsrs	r4, r4, #19
 8007a86:	04e4      	lsls	r4, r4, #19
 8007a88:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a8c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a90:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a94:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a98:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a9c:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 8007aa0:	694c      	ldr	r4, [r1, #20]
 8007aa2:	688e      	ldr	r6, [r1, #8]
 8007aa4:	4434      	add	r4, r6
 8007aa6:	3c01      	subs	r4, #1
 8007aa8:	fbb4 f4f6 	udiv	r4, r4, r6
 8007aac:	4e2d      	ldr	r6, [pc, #180]	; (8007b64 <USB_EPStartXfer+0x1a4>)
 8007aae:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8007ab2:	432c      	orrs	r4, r5
 8007ab4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ab8:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007abc:	694d      	ldr	r5, [r1, #20]
 8007abe:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007ac2:	432c      	orrs	r4, r5
 8007ac4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007acc:	78cc      	ldrb	r4, [r1, #3]
 8007ace:	2c01      	cmp	r4, #1
 8007ad0:	d1bb      	bne.n	8007a4a <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ad2:	6914      	ldr	r4, [r2, #16]
 8007ad4:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007ad8:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ada:	6914      	ldr	r4, [r2, #16]
 8007adc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007ae0:	6114      	str	r4, [r2, #16]
 8007ae2:	e7b2      	b.n	8007a4a <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ae4:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007ae8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007aec:	d10b      	bne.n	8007b06 <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aee:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007af2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007af6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007afa:	8a8b      	ldrh	r3, [r1, #20]
 8007afc:	780a      	ldrb	r2, [r1, #0]
 8007afe:	68c9      	ldr	r1, [r1, #12]
 8007b00:	f7ff ff4c 	bl	800799c <USB_WritePacket>
 8007b04:	e787      	b.n	8007a16 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b06:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007b0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b0e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8007b12:	e7f2      	b.n	8007afa <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b14:	688d      	ldr	r5, [r1, #8]
 8007b16:	442c      	add	r4, r5
 8007b18:	3c01      	subs	r4, #1
 8007b1a:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b1e:	6915      	ldr	r5, [r2, #16]
 8007b20:	4e10      	ldr	r6, [pc, #64]	; (8007b64 <USB_EPStartXfer+0x1a4>)
 8007b22:	ea06 46c4 	and.w	r6, r6, r4, lsl #19
 8007b26:	4335      	orrs	r5, r6
 8007b28:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b2a:	6916      	ldr	r6, [r2, #16]
 8007b2c:	688d      	ldr	r5, [r1, #8]
 8007b2e:	b2a4      	uxth	r4, r4
 8007b30:	fb05 f404 	mul.w	r4, r5, r4
 8007b34:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007b38:	4334      	orrs	r4, r6
 8007b3a:	6114      	str	r4, [r2, #16]
 8007b3c:	e761      	b.n	8007a02 <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b3e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007b42:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007b46:	d106      	bne.n	8007b56 <USB_EPStartXfer+0x196>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b48:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007b4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b50:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8007b54:	e759      	b.n	8007a0a <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b56:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007b5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b5e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8007b62:	e752      	b.n	8007a0a <USB_EPStartXfer+0x4a>
 8007b64:	1ff80000 	.word	0x1ff80000

08007b68 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b68:	3203      	adds	r2, #3
 8007b6a:	0892      	lsrs	r2, r2, #2

  for (i = 0U; i < count32b; i++)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d20c      	bcs.n	8007b8c <USB_ReadPacket+0x24>
{
 8007b72:	b410      	push	{r4}
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b74:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8007b78:	6824      	ldr	r4, [r4, #0]
 8007b7a:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8007b7e:	3301      	adds	r3, #1
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d3f7      	bcc.n	8007b74 <USB_ReadPacket+0xc>
    pDest++;
  }

  return ((void *)pDest);
}
 8007b84:	4608      	mov	r0, r1
 8007b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4770      	bx	lr

08007b90 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8007b90:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8007b92:	784a      	ldrb	r2, [r1, #1]
 8007b94:	2a01      	cmp	r2, #1
 8007b96:	d014      	beq.n	8007bc2 <USB_EPSetStall+0x32>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007b9c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	db06      	blt.n	8007bb2 <USB_EPSetStall+0x22>
 8007ba4:	b12b      	cbz	r3, 8007bb2 <USB_EPSetStall+0x22>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ba6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007baa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bae:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bb2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bc2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007bc6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	db06      	blt.n	8007bdc <USB_EPSetStall+0x4c>
 8007bce:	b12b      	cbz	r3, 8007bdc <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bd0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bdc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007be4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8007be8:	e7e9      	b.n	8007bbe <USB_EPSetStall+0x2e>

08007bea <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8007bea:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8007bec:	784a      	ldrb	r2, [r1, #1]
 8007bee:	2a01      	cmp	r2, #1
 8007bf0:	d00e      	beq.n	8007c10 <USB_EPClearStall+0x26>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bf2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007bf6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bfe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c02:	78cb      	ldrb	r3, [r1, #3]
 8007c04:	3b02      	subs	r3, #2
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d915      	bls.n	8007c38 <USB_EPClearStall+0x4e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  return HAL_OK;
}
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c10:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007c14:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c1c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c20:	78cb      	ldrb	r3, [r1, #3]
 8007c22:	3b02      	subs	r3, #2
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d8f0      	bhi.n	8007c0c <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c2a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c32:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8007c36:	e7e9      	b.n	8007c0c <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c38:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c40:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007c44:	e7e2      	b.n	8007c0c <USB_EPClearStall+0x22>

08007c46 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c46:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c4e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c52:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c56:	0109      	lsls	r1, r1, #4
 8007c58:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800

  return HAL_OK;
}
 8007c62:	2000      	movs	r0, #0
 8007c64:	4770      	bx	lr

08007c66 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c66:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007c68:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8007c6a:	4010      	ands	r0, r2
 8007c6c:	4770      	bx	lr

08007c6e <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c6e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c72:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c76:	69c0      	ldr	r0, [r0, #28]
 8007c78:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8007c7a:	0c00      	lsrs	r0, r0, #16
 8007c7c:	4770      	bx	lr

08007c7e <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c7e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007c82:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c86:	69c0      	ldr	r0, [r0, #28]
 8007c88:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8007c8a:	b280      	uxth	r0, r0
 8007c8c:	4770      	bx	lr

08007c8e <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c8e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007c92:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c96:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8007c9a:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8007c9c:	4010      	ands	r0, r2
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ca0:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ca2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ca6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007caa:	f001 020f 	and.w	r2, r1, #15
 8007cae:	40d3      	lsrs	r3, r2
 8007cb0:	01db      	lsls	r3, r3, #7
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cb6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8007cba:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8007cbe:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 8007cc0:	4018      	ands	r0, r3
 8007cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8007cc8:	6940      	ldr	r0, [r0, #20]
}
 8007cca:	f000 0001 	and.w	r0, r0, #1
 8007cce:	4770      	bx	lr

08007cd0 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cd0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007cd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cd8:	f023 0307 	bic.w	r3, r3, #7
 8007cdc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ce0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 8007cec:	2000      	movs	r0, #0
 8007cee:	4770      	bx	lr

08007cf0 <USB_EP0_OutStart>:
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cf0:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <USB_EP0_OutStart+0x40>)
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <USB_EP0_OutStart+0x10>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	db14      	blt.n	8007d2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d06:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8007d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d0e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d12:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8007d16:	f043 0318 	orr.w	r3, r3, #24
 8007d1a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d1e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8007d22:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d26:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10

  return HAL_OK;
}
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	4f54300a 	.word	0x4f54300a

08007d34 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d34:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8007d38:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8007d40:	2000      	movs	r0, #0
 8007d42:	4770      	bx	lr

08007d44 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d44:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8007d48:	b1a2      	cbz	r2, 8007d74 <USBD_CDC_TransmitPacket+0x30>
{
 8007d4a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007d4c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8007d50:	b10b      	cbz	r3, 8007d56 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d52:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007d54:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d5c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007d60:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d62:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007d66:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007d6a:	2181      	movs	r1, #129	; 0x81
 8007d6c:	f7fa f963 	bl	8002036 <USBD_LL_Transmit>
    ret = USBD_OK;
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7ef      	b.n	8007d54 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8007d74:	2003      	movs	r0, #3
}
 8007d76:	4770      	bx	lr

08007d78 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d78:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007d7a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007d7e:	b113      	cbz	r3, 8007d86 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4798      	blx	r3
  }

  return ret;
}
 8007d84:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d86:	2003      	movs	r0, #3
 8007d88:	e7fc      	b.n	8007d84 <USBD_SetClassConfig+0xc>

08007d8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d8a:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007d90:	b10b      	cbz	r3, 8007d96 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007d96:	2000      	movs	r0, #0
 8007d98:	bd08      	pop	{r3, pc}

08007d9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d9a:	b538      	push	{r3, r4, r5, lr}
 8007d9c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d9e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f923 	bl	8007fee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007dae:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007db2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007db6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8007dba:	f001 031f 	and.w	r3, r1, #31
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d00d      	beq.n	8007dde <USBD_LL_SetupStage+0x44>
 8007dc2:	b13b      	cbz	r3, 8007dd4 <USBD_LL_SetupStage+0x3a>
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d00f      	beq.n	8007de8 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dc8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7fa f906 	bl	8001fde <USBD_LL_StallEP>
      break;
 8007dd2:	e003      	b.n	8007ddc <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 fac5 	bl	8008366 <USBD_StdDevReq>
  }

  return ret;
}
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dde:	4629      	mov	r1, r5
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 fafb 	bl	80083dc <USBD_StdItfReq>
      break;
 8007de6:	e7f9      	b.n	8007ddc <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007de8:	4629      	mov	r1, r5
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fb2a 	bl	8008444 <USBD_StdEPReq>
      break;
 8007df0:	e7f4      	b.n	8007ddc <USBD_LL_SetupStage+0x42>

08007df2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007df2:	b510      	push	{r4, lr}
 8007df4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007df6:	bb29      	cbnz	r1, 8007e44 <USBD_LL_DataOutStage+0x52>
 8007df8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dfa:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007dfe:	2a03      	cmp	r2, #3
 8007e00:	d001      	beq.n	8007e06 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007e02:	2000      	movs	r0, #0
 8007e04:	e029      	b.n	8007e5a <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 8007e06:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007e0a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007e0e:	4291      	cmp	r1, r2
 8007e10:	d80d      	bhi.n	8007e2e <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	b123      	cbz	r3, 8007e24 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e1a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e1e:	2a03      	cmp	r2, #3
 8007e20:	d100      	bne.n	8007e24 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 8007e22:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8007e24:	4620      	mov	r0, r4
 8007e26:	f000 fc2a 	bl	800867e <USBD_CtlSendStatus>
  return USBD_OK;
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e015      	b.n	8007e5a <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 8007e2e:	1a89      	subs	r1, r1, r2
 8007e30:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e34:	428a      	cmp	r2, r1
 8007e36:	bf28      	it	cs
 8007e38:	460a      	movcs	r2, r1
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f000 fc17 	bl	800866e <USBD_CtlContinueRx>
  return USBD_OK;
 8007e40:	2000      	movs	r0, #0
 8007e42:	e00a      	b.n	8007e5a <USBD_LL_DataOutStage+0x68>
 8007e44:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e46:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	b133      	cbz	r3, 8007e5c <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e4e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e52:	2903      	cmp	r1, #3
 8007e54:	d104      	bne.n	8007e60 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e56:	4611      	mov	r1, r2
 8007e58:	4798      	blx	r3
}
 8007e5a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007e5c:	2003      	movs	r0, #3
 8007e5e:	e7fc      	b.n	8007e5a <USBD_LL_DataOutStage+0x68>
 8007e60:	2003      	movs	r0, #3
 8007e62:	e7fa      	b.n	8007e5a <USBD_LL_DataOutStage+0x68>

08007e64 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d146      	bne.n	8007efa <USBD_LL_DataInStage+0x96>
 8007e6c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e6e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007e72:	2a02      	cmp	r2, #2
 8007e74:	d005      	beq.n	8007e82 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e76:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d039      	beq.n	8007ef2 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e046      	b.n	8007f10 <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8007e82:	69c2      	ldr	r2, [r0, #28]
 8007e84:	6a01      	ldr	r1, [r0, #32]
 8007e86:	428a      	cmp	r2, r1
 8007e88:	d813      	bhi.n	8007eb2 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 8007e8a:	428a      	cmp	r2, r1
 8007e8c:	d01d      	beq.n	8007eca <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e8e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	b12b      	cbz	r3, 8007ea2 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e96:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e9a:	2a03      	cmp	r2, #3
 8007e9c:	d101      	bne.n	8007ea2 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7fa f89a 	bl	8001fde <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fbf2 	bl	8008694 <USBD_CtlReceiveStatus>
 8007eb0:	e7e1      	b.n	8007e76 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 8007eb2:	1a52      	subs	r2, r2, r1
 8007eb4:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f000 fbd1 	bl	800865e <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f7fa f8be 	bl	8002044 <USBD_LL_PrepareReceive>
 8007ec8:	e7d5      	b.n	8007e76 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 8007eca:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d8de      	bhi.n	8007e8e <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 8007ed0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d2da      	bcs.n	8007e8e <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4611      	mov	r1, r2
 8007edc:	f000 fbbf 	bl	800865e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	460a      	mov	r2, r1
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7fa f8aa 	bl	8002044 <USBD_LL_PrepareReceive>
 8007ef0:	e7c1      	b.n	8007e76 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8007ef8:	e00a      	b.n	8007f10 <USBD_LL_DataInStage+0xac>
 8007efa:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8007efc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	b133      	cbz	r3, 8007f12 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f04:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f08:	2903      	cmp	r1, #3
 8007f0a:	d104      	bne.n	8007f16 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4798      	blx	r3
}
 8007f10:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007f12:	2003      	movs	r0, #3
 8007f14:	e7fc      	b.n	8007f10 <USBD_LL_DataInStage+0xac>
 8007f16:	2003      	movs	r0, #3
 8007f18:	e7fa      	b.n	8007f10 <USBD_LL_DataInStage+0xac>

08007f1a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f1a:	b570      	push	{r4, r5, r6, lr}
 8007f1c:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f2a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f2c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f30:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007f34:	b123      	cbz	r3, 8007f40 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f36:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f40:	2340      	movs	r3, #64	; 0x40
 8007f42:	2200      	movs	r2, #0
 8007f44:	4611      	mov	r1, r2
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7fa f83f 	bl	8001fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f4c:	2601      	movs	r6, #1
 8007f4e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f52:	2540      	movs	r5, #64	; 0x40
 8007f54:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f58:	462b      	mov	r3, r5
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7fa f833 	bl	8001fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f64:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f66:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8007f68:	2000      	movs	r0, #0
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}

08007f6c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007f6c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007f6e:	2000      	movs	r0, #0
 8007f70:	4770      	bx	lr

08007f72 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8007f72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f76:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007f80:	2000      	movs	r0, #0
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d001      	beq.n	8007f90 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007f90:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007f94:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007f98:	e7f8      	b.n	8007f8c <USBD_LL_Resume+0x8>

08007f9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f9a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d001      	beq.n	8007fa8 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007fa8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0f8      	beq.n	8007fa4 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8007fb2:	4798      	blx	r3
 8007fb4:	e7f6      	b.n	8007fa4 <USBD_LL_SOF+0xa>

08007fb6 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	4770      	bx	lr

08007fba <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007fba:	2000      	movs	r0, #0
 8007fbc:	4770      	bx	lr

08007fbe <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fc2:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007fca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007fce:	b113      	cbz	r3, 8007fd6 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	7901      	ldrb	r1, [r0, #4]
 8007fd4:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	bd08      	pop	{r3, pc}

08007fda <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fda:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fdc:	884b      	ldrh	r3, [r1, #2]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d000      	beq.n	8007fe4 <USBD_SetFeature+0xa>
  {
    pdev->dev_remote_wakeup = 1U;
    (void)USBD_CtlSendStatus(pdev);
  }
}
 8007fe2:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007fe4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fe8:	f000 fb49 	bl	800867e <USBD_CtlSendStatus>
}
 8007fec:	e7f9      	b.n	8007fe2 <USBD_SetFeature+0x8>

08007fee <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fee:	780b      	ldrb	r3, [r1, #0]
 8007ff0:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 8007ff2:	784b      	ldrb	r3, [r1, #1]
 8007ff4:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007ff6:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8007ff8:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 8007ffe:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008000:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8008002:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 8008008:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800800a:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800800c:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800800e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 8008012:	80c3      	strh	r3, [r0, #6]
}
 8008014:	4770      	bx	lr

08008016 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800801a:	2180      	movs	r1, #128	; 0x80
 800801c:	f7f9 ffdf 	bl	8001fde <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008020:	2100      	movs	r1, #0
 8008022:	4620      	mov	r0, r4
 8008024:	f7f9 ffdb 	bl	8001fde <USBD_LL_StallEP>
}
 8008028:	bd10      	pop	{r4, pc}

0800802a <USBD_GetDescriptor>:
{
 800802a:	b530      	push	{r4, r5, lr}
 800802c:	b083      	sub	sp, #12
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008038:	884a      	ldrh	r2, [r1, #2]
 800803a:	0a13      	lsrs	r3, r2, #8
 800803c:	3b01      	subs	r3, #1
 800803e:	2b06      	cmp	r3, #6
 8008040:	f200 80ab 	bhi.w	800819a <USBD_GetDescriptor+0x170>
 8008044:	e8df f003 	tbb	[pc, r3]
 8008048:	a9331f04 	.word	0xa9331f04
 800804c:	8da9      	.short	0x8da9
 800804e:	9a          	.byte	0x9a
 800804f:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008050:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f10d 0106 	add.w	r1, sp, #6
 800805a:	7c00      	ldrb	r0, [r0, #16]
 800805c:	4798      	blx	r3
    if (req->wLength != 0U)
 800805e:	88ea      	ldrh	r2, [r5, #6]
 8008060:	2a00      	cmp	r2, #0
 8008062:	f000 80a3 	beq.w	80081ac <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8008066:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8099 	beq.w	80081a2 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 8008070:	429a      	cmp	r2, r3
 8008072:	bf28      	it	cs
 8008074:	461a      	movcs	r2, r3
 8008076:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800807a:	4601      	mov	r1, r0
 800807c:	4620      	mov	r0, r4
 800807e:	f000 fae1 	bl	8008644 <USBD_CtlSendData>
}
 8008082:	b003      	add	sp, #12
 8008084:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008086:	7c03      	ldrb	r3, [r0, #16]
 8008088:	b943      	cbnz	r3, 800809c <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800808a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f10d 0006 	add.w	r0, sp, #6
 8008094:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008096:	2302      	movs	r3, #2
 8008098:	7043      	strb	r3, [r0, #1]
 800809a:	e7e0      	b.n	800805e <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800809c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	f10d 0006 	add.w	r0, sp, #6
 80080a6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080a8:	2302      	movs	r3, #2
 80080aa:	7043      	strb	r3, [r0, #1]
 80080ac:	e7d7      	b.n	800805e <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	2a05      	cmp	r2, #5
 80080b2:	d852      	bhi.n	800815a <USBD_GetDescriptor+0x130>
 80080b4:	e8df f002 	tbb	[pc, r2]
 80080b8:	2a1d1003 	.word	0x2a1d1003
 80080bc:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	b123      	cbz	r3, 80080d0 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080c6:	f10d 0106 	add.w	r1, sp, #6
 80080ca:	7c00      	ldrb	r0, [r0, #16]
 80080cc:	4798      	blx	r3
 80080ce:	e7c6      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7ff ffa0 	bl	8008016 <USBD_CtlError>
 80080d6:	e7d4      	b.n	8008082 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	b123      	cbz	r3, 80080ea <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080e0:	f10d 0106 	add.w	r1, sp, #6
 80080e4:	7c00      	ldrb	r0, [r0, #16]
 80080e6:	4798      	blx	r3
 80080e8:	e7b9      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80080ea:	4629      	mov	r1, r5
 80080ec:	f7ff ff93 	bl	8008016 <USBD_CtlError>
 80080f0:	e7c7      	b.n	8008082 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	b123      	cbz	r3, 8008104 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080fa:	f10d 0106 	add.w	r1, sp, #6
 80080fe:	7c00      	ldrb	r0, [r0, #16]
 8008100:	4798      	blx	r3
 8008102:	e7ac      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008104:	4629      	mov	r1, r5
 8008106:	f7ff ff86 	bl	8008016 <USBD_CtlError>
 800810a:	e7ba      	b.n	8008082 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800810c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	b123      	cbz	r3, 800811e <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008114:	f10d 0106 	add.w	r1, sp, #6
 8008118:	7c00      	ldrb	r0, [r0, #16]
 800811a:	4798      	blx	r3
 800811c:	e79f      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800811e:	4629      	mov	r1, r5
 8008120:	f7ff ff79 	bl	8008016 <USBD_CtlError>
 8008124:	e7ad      	b.n	8008082 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008126:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	b123      	cbz	r3, 8008138 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800812e:	f10d 0106 	add.w	r1, sp, #6
 8008132:	7c00      	ldrb	r0, [r0, #16]
 8008134:	4798      	blx	r3
 8008136:	e792      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008138:	4629      	mov	r1, r5
 800813a:	f7ff ff6c 	bl	8008016 <USBD_CtlError>
 800813e:	e7a0      	b.n	8008082 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008140:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	b123      	cbz	r3, 8008152 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008148:	f10d 0106 	add.w	r1, sp, #6
 800814c:	7c00      	ldrb	r0, [r0, #16]
 800814e:	4798      	blx	r3
 8008150:	e785      	b.n	800805e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008152:	4629      	mov	r1, r5
 8008154:	f7ff ff5f 	bl	8008016 <USBD_CtlError>
 8008158:	e793      	b.n	8008082 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800815a:	4629      	mov	r1, r5
 800815c:	f7ff ff5b 	bl	8008016 <USBD_CtlError>
 8008160:	e78f      	b.n	8008082 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008162:	7c03      	ldrb	r3, [r0, #16]
 8008164:	b933      	cbnz	r3, 8008174 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008166:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	f10d 0006 	add.w	r0, sp, #6
 8008170:	4798      	blx	r3
 8008172:	e774      	b.n	800805e <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8008174:	4629      	mov	r1, r5
 8008176:	f7ff ff4e 	bl	8008016 <USBD_CtlError>
 800817a:	e782      	b.n	8008082 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817c:	7c03      	ldrb	r3, [r0, #16]
 800817e:	b943      	cbnz	r3, 8008192 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008180:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	f10d 0006 	add.w	r0, sp, #6
 800818a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800818c:	2307      	movs	r3, #7
 800818e:	7043      	strb	r3, [r0, #1]
 8008190:	e765      	b.n	800805e <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8008192:	4629      	mov	r1, r5
 8008194:	f7ff ff3f 	bl	8008016 <USBD_CtlError>
 8008198:	e773      	b.n	8008082 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 800819a:	4629      	mov	r1, r5
 800819c:	f7ff ff3b 	bl	8008016 <USBD_CtlError>
 80081a0:	e76f      	b.n	8008082 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 80081a2:	4629      	mov	r1, r5
 80081a4:	4620      	mov	r0, r4
 80081a6:	f7ff ff36 	bl	8008016 <USBD_CtlError>
 80081aa:	e76a      	b.n	8008082 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fa66 	bl	800867e <USBD_CtlSendStatus>
 80081b2:	e766      	b.n	8008082 <USBD_GetDescriptor+0x58>

080081b4 <USBD_SetAddress>:
{
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081b8:	888b      	ldrh	r3, [r1, #4]
 80081ba:	b9f3      	cbnz	r3, 80081fa <USBD_SetAddress+0x46>
 80081bc:	88cb      	ldrh	r3, [r1, #6]
 80081be:	b9e3      	cbnz	r3, 80081fa <USBD_SetAddress+0x46>
 80081c0:	884b      	ldrh	r3, [r1, #2]
 80081c2:	2b7f      	cmp	r3, #127	; 0x7f
 80081c4:	d819      	bhi.n	80081fa <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081c6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d00c      	beq.n	80081ec <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80081d2:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f9 ff26 	bl	8002028 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081dc:	4620      	mov	r0, r4
 80081de:	f000 fa4e 	bl	800867e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80081e2:	b135      	cbz	r5, 80081f2 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081e4:	2302      	movs	r3, #2
 80081e6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80081ea:	e009      	b.n	8008200 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80081ec:	f7ff ff13 	bl	8008016 <USBD_CtlError>
 80081f0:	e006      	b.n	8008200 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80081f8:	e002      	b.n	8008200 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7ff ff0b 	bl	8008016 <USBD_CtlError>
}
 8008200:	bd38      	pop	{r3, r4, r5, pc}
	...

08008204 <USBD_SetConfig>:
{
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800820a:	7889      	ldrb	r1, [r1, #2]
 800820c:	4b2e      	ldr	r3, [pc, #184]	; (80082c8 <USBD_SetConfig+0xc4>)
 800820e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008210:	2901      	cmp	r1, #1
 8008212:	d80f      	bhi.n	8008234 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8008214:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008218:	2b02      	cmp	r3, #2
 800821a:	d011      	beq.n	8008240 <USBD_SetConfig+0x3c>
 800821c:	2b03      	cmp	r3, #3
 800821e:	d025      	beq.n	800826c <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8008220:	4629      	mov	r1, r5
 8008222:	f7ff fef8 	bl	8008016 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008226:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <USBD_SetConfig+0xc4>)
 8008228:	7819      	ldrb	r1, [r3, #0]
 800822a:	4620      	mov	r0, r4
 800822c:	f7ff fdad 	bl	8007d8a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008230:	2603      	movs	r6, #3
    break;
 8008232:	e003      	b.n	800823c <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8008234:	4629      	mov	r1, r5
 8008236:	f7ff feee 	bl	8008016 <USBD_CtlError>
    return USBD_FAIL;
 800823a:	2603      	movs	r6, #3
}
 800823c:	4630      	mov	r0, r6
 800823e:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8008240:	b181      	cbz	r1, 8008264 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8008242:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008244:	f7ff fd98 	bl	8007d78 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8008248:	4606      	mov	r6, r0
 800824a:	b120      	cbz	r0, 8008256 <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 800824c:	4629      	mov	r1, r5
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fee1 	bl	8008016 <USBD_CtlError>
 8008254:	e7f2      	b.n	800823c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8008256:	4620      	mov	r0, r4
 8008258:	f000 fa11 	bl	800867e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800825c:	2303      	movs	r3, #3
 800825e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008262:	e7eb      	b.n	800823c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8008264:	f000 fa0b 	bl	800867e <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008268:	2600      	movs	r6, #0
 800826a:	e7e7      	b.n	800823c <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 800826c:	b1c9      	cbz	r1, 80082a2 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 800826e:	6843      	ldr	r3, [r0, #4]
 8008270:	4299      	cmp	r1, r3
 8008272:	d025      	beq.n	80082c0 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008274:	b2d9      	uxtb	r1, r3
 8008276:	f7ff fd88 	bl	8007d8a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800827a:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <USBD_SetConfig+0xc4>)
 800827c:	7819      	ldrb	r1, [r3, #0]
 800827e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008280:	4620      	mov	r0, r4
 8008282:	f7ff fd79 	bl	8007d78 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8008286:	4606      	mov	r6, r0
 8008288:	b1b0      	cbz	r0, 80082b8 <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 800828a:	4629      	mov	r1, r5
 800828c:	4620      	mov	r0, r4
 800828e:	f7ff fec2 	bl	8008016 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008292:	7921      	ldrb	r1, [r4, #4]
 8008294:	4620      	mov	r0, r4
 8008296:	f7ff fd78 	bl	8007d8a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800829a:	2302      	movs	r3, #2
 800829c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80082a0:	e7cc      	b.n	800823c <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80082a2:	2302      	movs	r3, #2
 80082a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80082a8:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082aa:	f7ff fd6e 	bl	8007d8a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 f9e5 	bl	800867e <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80082b4:	2600      	movs	r6, #0
 80082b6:	e7c1      	b.n	800823c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f9e0 	bl	800867e <USBD_CtlSendStatus>
 80082be:	e7bd      	b.n	800823c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 80082c0:	f000 f9dd 	bl	800867e <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80082c4:	2600      	movs	r6, #0
 80082c6:	e7b9      	b.n	800823c <USBD_SetConfig+0x38>
 80082c8:	200002ec 	.word	0x200002ec

080082cc <USBD_GetConfig>:
{
 80082cc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80082ce:	88cb      	ldrh	r3, [r1, #6]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10b      	bne.n	80082ec <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80082d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80082d8:	b19b      	cbz	r3, 8008302 <USBD_GetConfig+0x36>
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d909      	bls.n	80082f2 <USBD_GetConfig+0x26>
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d10f      	bne.n	8008302 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082e2:	2201      	movs	r2, #1
 80082e4:	1d01      	adds	r1, r0, #4
 80082e6:	f000 f9ad 	bl	8008644 <USBD_CtlSendData>
      break;
 80082ea:	e001      	b.n	80082f0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80082ec:	f7ff fe93 	bl	8008016 <USBD_CtlError>
}
 80082f0:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 80082f2:	4601      	mov	r1, r0
 80082f4:	2300      	movs	r3, #0
 80082f6:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082fa:	2201      	movs	r2, #1
 80082fc:	f000 f9a2 	bl	8008644 <USBD_CtlSendData>
      break;
 8008300:	e7f6      	b.n	80082f0 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8008302:	f7ff fe88 	bl	8008016 <USBD_CtlError>
}
 8008306:	e7f3      	b.n	80082f0 <USBD_GetConfig+0x24>

08008308 <USBD_GetStatus>:
{
 8008308:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800830a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800830e:	3b01      	subs	r3, #1
 8008310:	2b02      	cmp	r3, #2
 8008312:	d812      	bhi.n	800833a <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8008314:	88cb      	ldrh	r3, [r1, #6]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d10c      	bne.n	8008334 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800831a:	2301      	movs	r3, #1
 800831c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800831e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008322:	b10b      	cbz	r3, 8008328 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008324:	2303      	movs	r3, #3
 8008326:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008328:	2202      	movs	r2, #2
 800832a:	f100 010c 	add.w	r1, r0, #12
 800832e:	f000 f989 	bl	8008644 <USBD_CtlSendData>
}
 8008332:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8008334:	f7ff fe6f 	bl	8008016 <USBD_CtlError>
      break;
 8008338:	e7fb      	b.n	8008332 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800833a:	f7ff fe6c 	bl	8008016 <USBD_CtlError>
}
 800833e:	e7f8      	b.n	8008332 <USBD_GetStatus+0x2a>

08008340 <USBD_ClrFeature>:
{
 8008340:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008342:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008346:	3b01      	subs	r3, #1
 8008348:	2b02      	cmp	r3, #2
 800834a:	d809      	bhi.n	8008360 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800834c:	884b      	ldrh	r3, [r1, #2]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d000      	beq.n	8008354 <USBD_ClrFeature+0x14>
}
 8008352:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800835a:	f000 f990 	bl	800867e <USBD_CtlSendStatus>
 800835e:	e7f8      	b.n	8008352 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8008360:	f7ff fe59 	bl	8008016 <USBD_CtlError>
}
 8008364:	e7f5      	b.n	8008352 <USBD_ClrFeature+0x12>

08008366 <USBD_StdDevReq>:
{
 8008366:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008368:	780b      	ldrb	r3, [r1, #0]
 800836a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800836e:	2b20      	cmp	r3, #32
 8008370:	d006      	beq.n	8008380 <USBD_StdDevReq+0x1a>
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d004      	beq.n	8008380 <USBD_StdDevReq+0x1a>
 8008376:	b143      	cbz	r3, 800838a <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8008378:	f7ff fe4d 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800837c:	2000      	movs	r0, #0
    break;
 800837e:	e003      	b.n	8008388 <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008380:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	4798      	blx	r3
}
 8008388:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800838a:	784b      	ldrb	r3, [r1, #1]
 800838c:	2b09      	cmp	r3, #9
 800838e:	d821      	bhi.n	80083d4 <USBD_StdDevReq+0x6e>
 8008390:	e8df f003 	tbb	[pc, r3]
 8008394:	18201c14 	.word	0x18201c14
 8008398:	20050920 	.word	0x20050920
 800839c:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 800839e:	f7ff fe44 	bl	800802a <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2000      	movs	r0, #0
      break;
 80083a4:	e7f0      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 80083a6:	f7ff ff05 	bl	80081b4 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 80083aa:	2000      	movs	r0, #0
      break;
 80083ac:	e7ec      	b.n	8008388 <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 80083ae:	f7ff ff29 	bl	8008204 <USBD_SetConfig>
      break;
 80083b2:	e7e9      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 80083b4:	f7ff ff8a 	bl	80082cc <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 80083b8:	2000      	movs	r0, #0
      break;
 80083ba:	e7e5      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 80083bc:	f7ff ffa4 	bl	8008308 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80083c0:	2000      	movs	r0, #0
      break;
 80083c2:	e7e1      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 80083c4:	f7ff fe09 	bl	8007fda <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80083c8:	2000      	movs	r0, #0
      break;
 80083ca:	e7dd      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 80083cc:	f7ff ffb8 	bl	8008340 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80083d0:	2000      	movs	r0, #0
      break;
 80083d2:	e7d9      	b.n	8008388 <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 80083d4:	f7ff fe1f 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80083d8:	2000      	movs	r0, #0
      break;
 80083da:	e7d5      	b.n	8008388 <USBD_StdDevReq+0x22>

080083dc <USBD_StdItfReq>:
{
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	780b      	ldrb	r3, [r1, #0]
 80083e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d007      	beq.n	80083fc <USBD_StdItfReq+0x20>
 80083ec:	2b40      	cmp	r3, #64	; 0x40
 80083ee:	d005      	beq.n	80083fc <USBD_StdItfReq+0x20>
 80083f0:	b123      	cbz	r3, 80083fc <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 80083f2:	f7ff fe10 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80083f6:	2600      	movs	r6, #0
}
 80083f8:	4630      	mov	r0, r6
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 80083fc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8008400:	3b01      	subs	r3, #1
 8008402:	2b02      	cmp	r3, #2
 8008404:	d818      	bhi.n	8008438 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008406:	7923      	ldrb	r3, [r4, #4]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d80f      	bhi.n	800842c <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800840c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	4798      	blx	r3
 8008418:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800841a:	88e3      	ldrh	r3, [r4, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1eb      	bne.n	80083f8 <USBD_StdItfReq+0x1c>
 8008420:	2800      	cmp	r0, #0
 8008422:	d1e9      	bne.n	80083f8 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f92a 	bl	800867e <USBD_CtlSendStatus>
 800842a:	e7e5      	b.n	80083f8 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800842c:	4621      	mov	r1, r4
 800842e:	4628      	mov	r0, r5
 8008430:	f7ff fdf1 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008434:	2600      	movs	r6, #0
 8008436:	e7df      	b.n	80083f8 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8008438:	4621      	mov	r1, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f7ff fdeb 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008440:	2600      	movs	r6, #0
      break;
 8008442:	e7d9      	b.n	80083f8 <USBD_StdItfReq+0x1c>

08008444 <USBD_StdEPReq>:
{
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4605      	mov	r5, r0
 8008448:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800844a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844c:	780b      	ldrb	r3, [r1, #0]
 800844e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008452:	2b20      	cmp	r3, #32
 8008454:	d008      	beq.n	8008468 <USBD_StdEPReq+0x24>
 8008456:	b2d1      	uxtb	r1, r2
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d005      	beq.n	8008468 <USBD_StdEPReq+0x24>
 800845c:	b15b      	cbz	r3, 8008476 <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 800845e:	4621      	mov	r1, r4
 8008460:	f7ff fdd9 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008464:	2000      	movs	r0, #0
    break;
 8008466:	e005      	b.n	8008474 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008468:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	4621      	mov	r1, r4
 8008470:	4628      	mov	r0, r5
 8008472:	4798      	blx	r3
}
 8008474:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8008476:	7863      	ldrb	r3, [r4, #1]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d02f      	beq.n	80084dc <USBD_StdEPReq+0x98>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d05d      	beq.n	800853c <USBD_StdEPReq+0xf8>
 8008480:	2b03      	cmp	r3, #3
 8008482:	f040 80d8 	bne.w	8008636 <USBD_StdEPReq+0x1f2>
      switch (pdev->dev_state)
 8008486:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800848a:	2b02      	cmp	r3, #2
 800848c:	d006      	beq.n	800849c <USBD_StdEPReq+0x58>
 800848e:	2b03      	cmp	r3, #3
 8008490:	d015      	beq.n	80084be <USBD_StdEPReq+0x7a>
        USBD_CtlError(pdev, req);
 8008492:	4621      	mov	r1, r4
 8008494:	f7ff fdbf 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008498:	2000      	movs	r0, #0
        break;
 800849a:	e7eb      	b.n	8008474 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800849c:	b109      	cbz	r1, 80084a2 <USBD_StdEPReq+0x5e>
 800849e:	2980      	cmp	r1, #128	; 0x80
 80084a0:	d105      	bne.n	80084ae <USBD_StdEPReq+0x6a>
          USBD_CtlError(pdev, req);
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f7ff fdb6 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80084aa:	2000      	movs	r0, #0
 80084ac:	e7e2      	b.n	8008474 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ae:	f7f9 fd96 	bl	8001fde <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7f9 fd92 	bl	8001fde <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80084ba:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084bc:	e7da      	b.n	8008474 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80084be:	8863      	ldrh	r3, [r4, #2]
 80084c0:	b923      	cbnz	r3, 80084cc <USBD_StdEPReq+0x88>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084c2:	b119      	cbz	r1, 80084cc <USBD_StdEPReq+0x88>
 80084c4:	2980      	cmp	r1, #128	; 0x80
 80084c6:	d001      	beq.n	80084cc <USBD_StdEPReq+0x88>
 80084c8:	88e3      	ldrh	r3, [r4, #6]
 80084ca:	b123      	cbz	r3, 80084d6 <USBD_StdEPReq+0x92>
        (void)USBD_CtlSendStatus(pdev);
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f8d6 	bl	800867e <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80084d2:	2000      	movs	r0, #0
        break;
 80084d4:	e7ce      	b.n	8008474 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80084d6:	f7f9 fd82 	bl	8001fde <USBD_LL_StallEP>
 80084da:	e7f7      	b.n	80084cc <USBD_StdEPReq+0x88>
      switch (pdev->dev_state)
 80084dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d006      	beq.n	80084f2 <USBD_StdEPReq+0xae>
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d015      	beq.n	8008514 <USBD_StdEPReq+0xd0>
        USBD_CtlError(pdev, req);
 80084e8:	4621      	mov	r1, r4
 80084ea:	f7ff fd94 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80084ee:	2000      	movs	r0, #0
        break;
 80084f0:	e7c0      	b.n	8008474 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f2:	b109      	cbz	r1, 80084f8 <USBD_StdEPReq+0xb4>
 80084f4:	2980      	cmp	r1, #128	; 0x80
 80084f6:	d105      	bne.n	8008504 <USBD_StdEPReq+0xc0>
          USBD_CtlError(pdev, req);
 80084f8:	4621      	mov	r1, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7ff fd8b 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008500:	2000      	movs	r0, #0
 8008502:	e7b7      	b.n	8008474 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008504:	f7f9 fd6b 	bl	8001fde <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008508:	2180      	movs	r1, #128	; 0x80
 800850a:	4628      	mov	r0, r5
 800850c:	f7f9 fd67 	bl	8001fde <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8008510:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008512:	e7af      	b.n	8008474 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008514:	8863      	ldrh	r3, [r4, #2]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8092 	bne.w	8008640 <USBD_StdEPReq+0x1fc>
          if ((ep_addr & 0x7FU) != 0x00U)
 800851c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8008520:	d109      	bne.n	8008536 <USBD_StdEPReq+0xf2>
          (void)USBD_CtlSendStatus(pdev);
 8008522:	4628      	mov	r0, r5
 8008524:	f000 f8ab 	bl	800867e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008528:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	4798      	blx	r3
 8008534:	e79e      	b.n	8008474 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008536:	f7f9 fd59 	bl	8001fec <USBD_LL_ClearStallEP>
 800853a:	e7f2      	b.n	8008522 <USBD_StdEPReq+0xde>
      switch (pdev->dev_state)
 800853c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008540:	2b02      	cmp	r3, #2
 8008542:	d006      	beq.n	8008552 <USBD_StdEPReq+0x10e>
 8008544:	2b03      	cmp	r3, #3
 8008546:	d02a      	beq.n	800859e <USBD_StdEPReq+0x15a>
        USBD_CtlError(pdev, req);
 8008548:	4621      	mov	r1, r4
 800854a:	f7ff fd64 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2000      	movs	r0, #0
        break;
 8008550:	e790      	b.n	8008474 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008552:	b109      	cbz	r1, 8008558 <USBD_StdEPReq+0x114>
 8008554:	2980      	cmp	r1, #128	; 0x80
 8008556:	d113      	bne.n	8008580 <USBD_StdEPReq+0x13c>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008558:	f012 0f80 	tst.w	r2, #128	; 0x80
 800855c:	d115      	bne.n	800858a <USBD_StdEPReq+0x146>
              &pdev->ep_out[ep_addr & 0x7FU];
 800855e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008562:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008566:	008b      	lsls	r3, r1, #2
 8008568:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800856c:	4429      	add	r1, r5
 800856e:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8008570:	2400      	movs	r4, #0
 8008572:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008574:	2202      	movs	r2, #2
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f864 	bl	8008644 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800857c:	4620      	mov	r0, r4
        break;
 800857e:	e779      	b.n	8008474 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8008580:	4621      	mov	r1, r4
 8008582:	f7ff fd48 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2000      	movs	r0, #0
          break;
 8008588:	e774      	b.n	8008474 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800858a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800858e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008592:	008b      	lsls	r3, r1, #2
 8008594:	f103 0110 	add.w	r1, r3, #16
 8008598:	4429      	add	r1, r5
 800859a:	3104      	adds	r1, #4
 800859c:	e7e8      	b.n	8008570 <USBD_StdEPReq+0x12c>
        if ((ep_addr & 0x80U) == 0x80U)
 800859e:	b252      	sxtb	r2, r2
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	db1f      	blt.n	80085e4 <USBD_StdEPReq+0x1a0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085a4:	f001 030f 	and.w	r3, r1, #15
 80085a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085ac:	0098      	lsls	r0, r3, #2
 80085ae:	4428      	add	r0, r5
 80085b0:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 80085b4:	b32b      	cbz	r3, 8008602 <USBD_StdEPReq+0x1be>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	db29      	blt.n	800860e <USBD_StdEPReq+0x1ca>
              &pdev->ep_out[ep_addr & 0x7FU];
 80085ba:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80085c2:	0093      	lsls	r3, r2, #2
 80085c4:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80085c8:	442c      	add	r4, r5
 80085ca:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085cc:	b109      	cbz	r1, 80085d2 <USBD_StdEPReq+0x18e>
 80085ce:	2980      	cmp	r1, #128	; 0x80
 80085d0:	d127      	bne.n	8008622 <USBD_StdEPReq+0x1de>
            pep->status = 0x0000U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085d6:	2202      	movs	r2, #2
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f832 	bl	8008644 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80085e0:	2000      	movs	r0, #0
          break;
 80085e2:	e747      	b.n	8008474 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085e4:	f001 030f 	and.w	r3, r1, #15
 80085e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085ec:	0098      	lsls	r0, r3, #2
 80085ee:	4428      	add	r0, r5
 80085f0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1df      	bne.n	80085b6 <USBD_StdEPReq+0x172>
            USBD_CtlError(pdev, req);
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f7ff fd0c 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2000      	movs	r0, #0
            break;
 8008600:	e738      	b.n	8008474 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fd06 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800860a:	2000      	movs	r0, #0
            break;
 800860c:	e732      	b.n	8008474 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8008612:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008616:	0093      	lsls	r3, r2, #2
 8008618:	f103 0410 	add.w	r4, r3, #16
 800861c:	442c      	add	r4, r5
 800861e:	3404      	adds	r4, #4
 8008620:	e7d4      	b.n	80085cc <USBD_StdEPReq+0x188>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008622:	4628      	mov	r0, r5
 8008624:	f7f9 fce9 	bl	8001ffa <USBD_LL_IsStallEP>
 8008628:	b110      	cbz	r0, 8008630 <USBD_StdEPReq+0x1ec>
            pep->status = 0x0001U;
 800862a:	2301      	movs	r3, #1
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	e7d2      	b.n	80085d6 <USBD_StdEPReq+0x192>
            pep->status = 0x0000U;
 8008630:	2300      	movs	r3, #0
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	e7cf      	b.n	80085d6 <USBD_StdEPReq+0x192>
      USBD_CtlError(pdev, req);
 8008636:	4621      	mov	r1, r4
 8008638:	f7ff fced 	bl	8008016 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800863c:	2000      	movs	r0, #0
      break;
 800863e:	e719      	b.n	8008474 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8008640:	2000      	movs	r0, #0
 8008642:	e717      	b.n	8008474 <USBD_StdEPReq+0x30>

08008644 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008644:	b510      	push	{r4, lr}
 8008646:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008648:	2202      	movs	r2, #2
 800864a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800864e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8008650:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008652:	460a      	mov	r2, r1
 8008654:	2100      	movs	r1, #0
 8008656:	f7f9 fcee 	bl	8002036 <USBD_LL_Transmit>

  return USBD_OK;
}
 800865a:	2000      	movs	r0, #0
 800865c:	bd10      	pop	{r4, pc}

0800865e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800865e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008660:	4613      	mov	r3, r2
 8008662:	460a      	mov	r2, r1
 8008664:	2100      	movs	r1, #0
 8008666:	f7f9 fce6 	bl	8002036 <USBD_LL_Transmit>

  return USBD_OK;
}
 800866a:	2000      	movs	r0, #0
 800866c:	bd08      	pop	{r3, pc}

0800866e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800866e:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008670:	4613      	mov	r3, r2
 8008672:	460a      	mov	r2, r1
 8008674:	2100      	movs	r1, #0
 8008676:	f7f9 fce5 	bl	8002044 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800867a:	2000      	movs	r0, #0
 800867c:	bd08      	pop	{r3, pc}

0800867e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800867e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008680:	2304      	movs	r3, #4
 8008682:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008686:	2300      	movs	r3, #0
 8008688:	461a      	mov	r2, r3
 800868a:	4619      	mov	r1, r3
 800868c:	f7f9 fcd3 	bl	8002036 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008690:	2000      	movs	r0, #0
 8008692:	bd08      	pop	{r3, pc}

08008694 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008694:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008696:	2305      	movs	r3, #5
 8008698:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800869c:	2300      	movs	r3, #0
 800869e:	461a      	mov	r2, r3
 80086a0:	4619      	mov	r1, r3
 80086a2:	f7f9 fccf 	bl	8002044 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80086a6:	2000      	movs	r0, #0
 80086a8:	bd08      	pop	{r3, pc}

080086aa <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80086aa:	b510      	push	{r4, lr}
 80086ac:	b08a      	sub	sp, #40	; 0x28
 80086ae:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80086b0:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 80086b4:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 80086b8:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80086bc:	ab01      	add	r3, sp, #4
 80086be:	2100      	movs	r1, #0
 80086c0:	9101      	str	r1, [sp, #4]
 80086c2:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086c6:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 80086c8:	223f      	movs	r2, #63	; 0x3f
 80086ca:	f8ad 2010 	strh.w	r2, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80086ce:	228a      	movs	r2, #138	; 0x8a
 80086d0:	f8ad 2012 	strh.w	r2, [sp, #18]
  rq.cparam = &cp;
 80086d4:	aa03      	add	r2, sp, #12
 80086d6:	9206      	str	r2, [sp, #24]
  rq.clen = sizeof(cp);
 80086d8:	2203      	movs	r2, #3
 80086da:	9207      	str	r2, [sp, #28]
  rq.rparam = &resp;
 80086dc:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80086de:	2307      	movs	r3, #7
 80086e0:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80086e2:	a804      	add	r0, sp, #16
 80086e4:	f000 fb6e 	bl	8008dc4 <hci_send_req>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	db0f      	blt.n	800870c <aci_gap_init_IDB05A1+0x62>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80086ec:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80086f0:	b950      	cbnz	r0, 8008708 <aci_gap_init_IDB05A1+0x5e>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80086f2:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 80086f6:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80086f8:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 80086fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086fe:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008700:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 8008704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008706:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8008708:	b00a      	add	sp, #40	; 0x28
 800870a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800870c:	20ff      	movs	r0, #255	; 0xff
 800870e:	e7fb      	b.n	8008708 <aci_gap_init_IDB05A1+0x5e>

08008710 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	b092      	sub	sp, #72	; 0x48
 8008714:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8008718:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800871c:	192e      	adds	r6, r5, r4
 800871e:	360e      	adds	r6, #14
 8008720:	2e28      	cmp	r6, #40	; 0x28
 8008722:	d84a      	bhi.n	80087ba <aci_gap_set_discoverable+0xaa>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8008724:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008728:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800872c:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8008730:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8008734:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008738:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800873c:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008740:	ae01      	add	r6, sp, #4
 8008742:	462a      	mov	r2, r5
 8008744:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008746:	a803      	add	r0, sp, #12
 8008748:	f000 fcce 	bl	80090e8 <memcpy>
  indx +=  LocalNameLen;
 800874c:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8008750:	aa12      	add	r2, sp, #72	; 0x48
 8008752:	fa52 f383 	uxtab	r3, r2, r3
 8008756:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800875a:	3509      	adds	r5, #9
 800875c:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800875e:	4622      	mov	r2, r4
 8008760:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008762:	1970      	adds	r0, r6, r5
 8008764:	f000 fcc0 	bl	80090e8 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008768:	442c      	add	r4, r5
 800876a:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800876c:	ab12      	add	r3, sp, #72	; 0x48
 800876e:	4423      	add	r3, r4
 8008770:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8008774:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 8008778:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800877a:	aa12      	add	r2, sp, #72	; 0x48
 800877c:	fa52 f383 	uxtab	r3, r2, r3
 8008780:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8008784:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 8008788:	3404      	adds	r4, #4
 800878a:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800878c:	2100      	movs	r1, #0
 800878e:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8008790:	233f      	movs	r3, #63	; 0x3f
 8008792:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008796:	2383      	movs	r3, #131	; 0x83
 8008798:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800879c:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800879e:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 80087a0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80087a4:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 80087a6:	2301      	movs	r3, #1
 80087a8:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 80087aa:	a80c      	add	r0, sp, #48	; 0x30
 80087ac:	f000 fb0a 	bl	8008dc4 <hci_send_req>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	db05      	blt.n	80087c0 <aci_gap_set_discoverable+0xb0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80087b4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80087b8:	e000      	b.n	80087bc <aci_gap_set_discoverable+0xac>
    return BLE_STATUS_INVALID_PARAMS;
 80087ba:	2042      	movs	r0, #66	; 0x42
    return status;
  }

  return 0;
}
 80087bc:	b012      	add	sp, #72	; 0x48
 80087be:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80087c0:	20ff      	movs	r0, #255	; 0xff
 80087c2:	e7fb      	b.n	80087bc <aci_gap_set_discoverable+0xac>

080087c4 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80087c4:	b510      	push	{r4, lr}
 80087c6:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80087c8:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 80087cc:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80087d0:	6814      	ldr	r4, [r2, #0]
 80087d2:	6850      	ldr	r0, [r2, #4]
 80087d4:	6891      	ldr	r1, [r2, #8]
 80087d6:	68d2      	ldr	r2, [r2, #12]
 80087d8:	f8cd 4006 	str.w	r4, [sp, #6]
 80087dc:	f8cd 000a 	str.w	r0, [sp, #10]
 80087e0:	f8cd 100e 	str.w	r1, [sp, #14]
 80087e4:	f8cd 2012 	str.w	r2, [sp, #18]
  cp.min_encryption_key_size = min_encryption_key_size;
 80087e8:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 80087ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80087f0:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 80087f4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80087f8:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 80087fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087fe:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 8008802:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8008806:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800880a:	2100      	movs	r1, #0
 800880c:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800880e:	233f      	movs	r3, #63	; 0x3f
 8008810:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008814:	2386      	movs	r3, #134	; 0x86
 8008816:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800881a:	ab01      	add	r3, sp, #4
 800881c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800881e:	231a      	movs	r3, #26
 8008820:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 8008822:	f10d 0303 	add.w	r3, sp, #3
 8008826:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8008828:	2301      	movs	r3, #1
 800882a:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800882c:	a808      	add	r0, sp, #32
 800882e:	f000 fac9 	bl	8008dc4 <hci_send_req>
 8008832:	2800      	cmp	r0, #0
 8008834:	db03      	blt.n	800883e <aci_gap_set_auth_requirement+0x7a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8008836:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 800883a:	b00e      	add	sp, #56	; 0x38
 800883c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800883e:	20ff      	movs	r0, #255	; 0xff
 8008840:	e7fb      	b.n	800883a <aci_gap_set_auth_requirement+0x76>

08008842 <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 8008842:	281f      	cmp	r0, #31
 8008844:	d824      	bhi.n	8008890 <aci_gap_update_adv_data+0x4e>
{
 8008846:	b530      	push	{r4, r5, lr}
 8008848:	b091      	sub	sp, #68	; 0x44
 800884a:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800884c:	ad10      	add	r5, sp, #64	; 0x40
 800884e:	f805 0d3c 	strb.w	r0, [r5, #-60]!
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008852:	4602      	mov	r2, r0
 8008854:	f10d 0005 	add.w	r0, sp, #5
 8008858:	f000 fc46 	bl	80090e8 <memcpy>
  indx +=  AdvLen;
 800885c:	1c60      	adds	r0, r4, #1
 800885e:	b2c0      	uxtb	r0, r0
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008860:	2100      	movs	r1, #0
 8008862:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 8008864:	233f      	movs	r3, #63	; 0x3f
 8008866:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800886a:	238e      	movs	r3, #142	; 0x8e
 800886c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 8008870:	950c      	str	r5, [sp, #48]	; 0x30
  rq.clen = indx;
 8008872:	900d      	str	r0, [sp, #52]	; 0x34
  rq.rparam = &status;
 8008874:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8008878:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800887a:	2301      	movs	r3, #1
 800887c:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 800887e:	a80a      	add	r0, sp, #40	; 0x28
 8008880:	f000 faa0 	bl	8008dc4 <hci_send_req>
 8008884:	2800      	cmp	r0, #0
 8008886:	db05      	blt.n	8008894 <aci_gap_update_adv_data+0x52>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8008888:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 800888c:	b011      	add	sp, #68	; 0x44
 800888e:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8008890:	2042      	movs	r0, #66	; 0x42
}
 8008892:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8008894:	20ff      	movs	r0, #255	; 0xff
 8008896:	e7f9      	b.n	800888c <aci_gap_update_adv_data+0x4a>

08008898 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008898:	b500      	push	{lr}
 800889a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800889c:	2100      	movs	r1, #0
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	9104      	str	r1, [sp, #16]
 80088a2:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 80088a4:	233f      	movs	r3, #63	; 0x3f
 80088a6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80088aa:	f240 1301 	movw	r3, #257	; 0x101
 80088ae:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80088b2:	f10d 0307 	add.w	r3, sp, #7
 80088b6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80088b8:	2301      	movs	r3, #1
 80088ba:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80088bc:	a802      	add	r0, sp, #8
 80088be:	f000 fa81 	bl	8008dc4 <hci_send_req>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	db04      	blt.n	80088d0 <aci_gatt_init+0x38>
    return BLE_STATUS_TIMEOUT;

  return status;
 80088c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80088ca:	b009      	add	sp, #36	; 0x24
 80088cc:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 80088d0:	20ff      	movs	r0, #255	; 0xff
 80088d2:	e7fa      	b.n	80088ca <aci_gatt_init+0x32>

080088d4 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	4616      	mov	r6, r2
 80088da:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 80088dc:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 80088e0:	2801      	cmp	r0, #1
 80088e2:	d031      	beq.n	8008948 <aci_gatt_add_serv+0x74>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80088e4:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80088e6:	4622      	mov	r2, r4
 80088e8:	f10d 0001 	add.w	r0, sp, #1
 80088ec:	f000 fbfc 	bl	80090e8 <memcpy>
  indx +=  uuid_len;
 80088f0:	1c63      	adds	r3, r4, #1
    
  buffer[indx] = service_type;
 80088f2:	aa0c      	add	r2, sp, #48	; 0x30
 80088f4:	4413      	add	r3, r2
 80088f6:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
 80088fa:	1ca3      	adds	r3, r4, #2
    
  buffer[indx] = max_attr_records;
 80088fc:	4413      	add	r3, r2
 80088fe:	f803 5c30 	strb.w	r5, [r3, #-48]
  indx++;
 8008902:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008904:	ab05      	add	r3, sp, #20
 8008906:	2100      	movs	r1, #0
 8008908:	f8ad 1014 	strh.w	r1, [sp, #20]
 800890c:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008910:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 8008912:	223f      	movs	r2, #63	; 0x3f
 8008914:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8008918:	f44f 7281 	mov.w	r2, #258	; 0x102
 800891c:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 8008920:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 8008924:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8008926:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008928:	2303      	movs	r3, #3
 800892a:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800892c:	a806      	add	r0, sp, #24
 800892e:	f000 fa49 	bl	8008dc4 <hci_send_req>
 8008932:	2800      	cmp	r0, #0
 8008934:	db0a      	blt.n	800894c <aci_gatt_add_serv+0x78>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8008936:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800893a:	b918      	cbnz	r0, 8008944 <aci_gatt_add_serv+0x70>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800893c:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 8008940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008942:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8008944:	b00c      	add	sp, #48	; 0x30
 8008946:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 8008948:	2402      	movs	r4, #2
 800894a:	e7cc      	b.n	80088e6 <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 800894c:	20ff      	movs	r0, #255	; 0xff
 800894e:	e7f9      	b.n	8008944 <aci_gatt_add_serv+0x70>

08008950 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	4616      	mov	r6, r2
 8008956:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008958:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800895c:	f88d 1002 	strb.w	r1, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 8008960:	2901      	cmp	r1, #1
 8008962:	d051      	beq.n	8008a08 <aci_gatt_add_char+0xb8>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8008964:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008966:	4622      	mov	r2, r4
 8008968:	4631      	mov	r1, r6
 800896a:	f10d 0003 	add.w	r0, sp, #3
 800896e:	f000 fbbb 	bl	80090e8 <memcpy>
  indx +=  uuid_len;
 8008972:	1ce3      	adds	r3, r4, #3
    
  buffer[indx] = charValueLen;
 8008974:	aa0e      	add	r2, sp, #56	; 0x38
 8008976:	4413      	add	r3, r2
 8008978:	f803 5c38 	strb.w	r5, [r3, #-56]
  indx++;
 800897c:	1d23      	adds	r3, r4, #4
    
  buffer[indx] = charProperties;
 800897e:	4413      	add	r3, r2
 8008980:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8008984:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 8008988:	1d63      	adds	r3, r4, #5
    
  buffer[indx] = secPermissions;
 800898a:	aa0e      	add	r2, sp, #56	; 0x38
 800898c:	4413      	add	r3, r2
 800898e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8008992:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 8008996:	1da3      	adds	r3, r4, #6
    
  buffer[indx] = gattEvtMask;
 8008998:	aa0e      	add	r2, sp, #56	; 0x38
 800899a:	4413      	add	r3, r2
 800899c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80089a0:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 80089a4:	1de3      	adds	r3, r4, #7
    
  buffer[indx] = encryKeySize;
 80089a6:	aa0e      	add	r2, sp, #56	; 0x38
 80089a8:	4413      	add	r3, r2
 80089aa:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80089ae:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 80089b2:	f104 0308 	add.w	r3, r4, #8
    
  buffer[indx] = isVariable;
 80089b6:	aa0e      	add	r2, sp, #56	; 0x38
 80089b8:	4413      	add	r3, r2
 80089ba:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80089be:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 80089c2:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80089c4:	ab07      	add	r3, sp, #28
 80089c6:	2100      	movs	r1, #0
 80089c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80089cc:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089d0:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 80089d2:	223f      	movs	r2, #63	; 0x3f
 80089d4:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80089d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80089dc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80089e0:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 80089e4:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 80089e6:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80089e8:	2303      	movs	r3, #3
 80089ea:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 80089ec:	a808      	add	r0, sp, #32
 80089ee:	f000 f9e9 	bl	8008dc4 <hci_send_req>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	db0a      	blt.n	8008a0c <aci_gatt_add_char+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80089f6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80089fa:	b918      	cbnz	r0, 8008a04 <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 80089fc:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 8008a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a02:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8008a04:	b00e      	add	sp, #56	; 0x38
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 8008a08:	2402      	movs	r4, #2
 8008a0a:	e7ac      	b.n	8008966 <aci_gatt_add_char+0x16>
    return BLE_STATUS_TIMEOUT;
 8008a0c:	20ff      	movs	r0, #255	; 0xff
 8008a0e:	e7f9      	b.n	8008a04 <aci_gatt_add_char+0xb4>

08008a10 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008a10:	b510      	push	{r4, lr}
 8008a12:	b0a8      	sub	sp, #160	; 0xa0
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008a14:	1d9c      	adds	r4, r3, #6
 8008a16:	2c80      	cmp	r4, #128	; 0x80
 8008a18:	dc29      	bgt.n	8008a6e <aci_gatt_update_char_value+0x5e>
 8008a1a:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008a1c:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008a20:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 8008a24:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 8008a28:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8008a30:	f10d 000a 	add.w	r0, sp, #10
 8008a34:	f000 fb58 	bl	80090e8 <memcpy>
  indx +=  charValueLen;
 8008a38:	1da3      	adds	r3, r4, #6
 8008a3a:	b2db      	uxtb	r3, r3

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	9123      	str	r1, [sp, #140]	; 0x8c
  rq.ogf = OGF_VENDOR_CMD;
 8008a40:	223f      	movs	r2, #63	; 0x3f
 8008a42:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008a46:	f44f 7283 	mov.w	r2, #262	; 0x106
 8008a4a:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8008a4e:	aa01      	add	r2, sp, #4
 8008a50:	9224      	str	r2, [sp, #144]	; 0x90
  rq.clen = indx;
 8008a52:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &status;
 8008a54:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8008a58:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8008a5e:	a822      	add	r0, sp, #136	; 0x88
 8008a60:	f000 f9b0 	bl	8008dc4 <hci_send_req>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	db05      	blt.n	8008a74 <aci_gatt_update_char_value+0x64>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8008a68:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
 8008a6c:	e000      	b.n	8008a70 <aci_gatt_update_char_value+0x60>
    return BLE_STATUS_INVALID_PARAMS;
 8008a6e:	2042      	movs	r0, #66	; 0x42
    return status;
  }

  return 0;
}
 8008a70:	b028      	add	sp, #160	; 0xa0
 8008a72:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8008a74:	20ff      	movs	r0, #255	; 0xff
 8008a76:	e7fb      	b.n	8008a70 <aci_gatt_update_char_value+0x60>

08008a78 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008a78:	b500      	push	{lr}
 8008a7a:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008a7c:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a80:	2100      	movs	r1, #0
 8008a82:	9103      	str	r1, [sp, #12]
    rq.ogf = OGF_VENDOR_CMD;
 8008a84:	233f      	movs	r3, #63	; 0x3f
 8008a86:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008a8a:	f240 1327 	movw	r3, #295	; 0x127
 8008a8e:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 8008a92:	ab01      	add	r3, sp, #4
 8008a94:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008a96:	2302      	movs	r3, #2
 8008a98:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8008a9a:	f10d 0303 	add.w	r3, sp, #3
 8008a9e:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 8008aa4:	a802      	add	r0, sp, #8
 8008aa6:	f000 f98d 	bl	8008dc4 <hci_send_req>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	db04      	blt.n	8008ab8 <aci_gatt_allow_read+0x40>
      return BLE_STATUS_TIMEOUT;

    return status;
 8008aae:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 8008ab2:	b009      	add	sp, #36	; 0x24
 8008ab4:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 8008ab8:	20ff      	movs	r0, #255	; 0xff
 8008aba:	e7fa      	b.n	8008ab2 <aci_gatt_allow_read+0x3a>

08008abc <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008abc:	b500      	push	{lr}
 8008abe:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008ac0:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8008ac4:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ac8:	2100      	movs	r1, #0
 8008aca:	9103      	str	r1, [sp, #12]
  rq.ogf = OGF_VENDOR_CMD;
 8008acc:	233f      	movs	r3, #63	; 0x3f
 8008ace:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008ad2:	230f      	movs	r3, #15
 8008ad4:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8008ad8:	ab01      	add	r3, sp, #4
 8008ada:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008adc:	2302      	movs	r3, #2
 8008ade:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8008ae0:	f10d 0303 	add.w	r3, sp, #3
 8008ae4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008aea:	a802      	add	r0, sp, #8
 8008aec:	f000 f96a 	bl	8008dc4 <hci_send_req>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	db04      	blt.n	8008afe <aci_hal_set_tx_power_level+0x42>
    return BLE_STATUS_TIMEOUT;

  return status;
 8008af4:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 8008af8:	b009      	add	sp, #36	; 0x24
 8008afa:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8008afe:	20ff      	movs	r0, #255	; 0xff
 8008b00:	e7fa      	b.n	8008af8 <aci_hal_set_tx_power_level+0x3c>

08008b02 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008b02:	b530      	push	{r4, r5, lr}
 8008b04:	b085      	sub	sp, #20
 8008b06:	4605      	mov	r5, r0
 8008b08:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008b0a:	ab02      	add	r3, sp, #8
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	f10d 030a 	add.w	r3, sp, #10
 8008b12:	f10d 020e 	add.w	r2, sp, #14
 8008b16:	a903      	add	r1, sp, #12
 8008b18:	f10d 000f 	add.w	r0, sp, #15
 8008b1c:	f000 f834 	bl	8008b88 <hci_le_read_local_version>
 8008b20:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008b22:	b998      	cbnz	r0, 8008b4c <getBlueNRGVersion+0x4a>
    *hwVersion = hci_revision >> 8;
 8008b24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008b28:	0a1a      	lsrs	r2, r3, #8
 8008b2a:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	b29a      	uxth	r2, r3
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008b30:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b21b      	sxth	r3, r3
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008b40:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008b44:	f002 020f 	and.w	r2, r2, #15
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8008b4c:	b005      	add	sp, #20
 8008b4e:	bd30      	pop	{r4, r5, pc}

08008b50 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008b50:	b500      	push	{lr}
 8008b52:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b54:	2100      	movs	r1, #0
 8008b56:	9103      	str	r1, [sp, #12]
 8008b58:	9104      	str	r1, [sp, #16]
 8008b5a:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_HOST_CTL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8008b62:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8008b66:	f10d 0307 	add.w	r3, sp, #7
 8008b6a:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b70:	a802      	add	r0, sp, #8
 8008b72:	f000 f927 	bl	8008dc4 <hci_send_req>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	db04      	blt.n	8008b84 <hci_reset+0x34>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8008b7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008b7e:	b009      	add	sp, #36	; 0x24
 8008b80:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8008b84:	20ff      	movs	r0, #255	; 0xff
 8008b86:	e7fa      	b.n	8008b7e <hci_reset+0x2e>

08008b88 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8a:	b08b      	sub	sp, #44	; 0x2c
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	460e      	mov	r6, r1
 8008b90:	4615      	mov	r5, r2
 8008b92:	461c      	mov	r4, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b94:	ab01      	add	r3, sp, #4
 8008b96:	2100      	movs	r1, #0
 8008b98:	9101      	str	r1, [sp, #4]
 8008b9a:	9102      	str	r1, [sp, #8]
 8008b9c:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ba0:	9105      	str	r1, [sp, #20]
 8008ba2:	9106      	str	r1, [sp, #24]
 8008ba4:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_INFO_PARAM;
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	f8ad 2010 	strh.w	r2, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008bac:	2201      	movs	r2, #1
 8008bae:	f8ad 2012 	strh.w	r2, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 8008bb2:	9308      	str	r3, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008bb4:	2309      	movs	r3, #9
 8008bb6:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008bb8:	a804      	add	r0, sp, #16
 8008bba:	f000 f903 	bl	8008dc4 <hci_send_req>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	db14      	blt.n	8008bec <hci_le_read_local_version+0x64>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8008bc2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008bc6:	b978      	cbnz	r0, 8008be8 <hci_le_read_local_version+0x60>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8008bc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008bcc:	703b      	strb	r3, [r7, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008bce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008bd2:	8033      	strh	r3, [r6, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008bd4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008bd8:	702b      	strb	r3, [r5, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008bda:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8008bde:	8023      	strh	r3, [r4, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008be0:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 8008be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008be6:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8008be8:	b00b      	add	sp, #44	; 0x2c
 8008bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8008bec:	20ff      	movs	r0, #255	; 0xff
 8008bee:	e7fb      	b.n	8008be8 <hci_le_read_local_version+0x60>

08008bf0 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf2:	b091      	sub	sp, #68	; 0x44
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008bf8:	ad02      	add	r5, sp, #8
 8008bfa:	2420      	movs	r4, #32
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 fa7c 	bl	80090fe <memset>
  scan_resp_cp.length = length;
 8008c06:	f88d 6008 	strb.w	r6, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	2e1f      	cmp	r6, #31
 8008c0e:	bf28      	it	cs
 8008c10:	221f      	movcs	r2, #31
 8008c12:	4639      	mov	r1, r7
 8008c14:	f10d 0009 	add.w	r0, sp, #9
 8008c18:	f000 fa66 	bl	80090e8 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_LE_CTL;
 8008c20:	2308      	movs	r3, #8
 8008c22:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008c26:	2309      	movs	r3, #9
 8008c28:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 8008c2c:	950c      	str	r5, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008c2e:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 8008c30:	f10d 0307 	add.w	r3, sp, #7
 8008c34:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 8008c36:	2301      	movs	r3, #1
 8008c38:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c3a:	a80a      	add	r0, sp, #40	; 0x28
 8008c3c:	f000 f8c2 	bl	8008dc4 <hci_send_req>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	db03      	blt.n	8008c4c <hci_le_set_scan_resp_data+0x5c>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8008c44:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008c48:	b011      	add	sp, #68	; 0x44
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8008c4c:	20ff      	movs	r0, #255	; 0xff
 8008c4e:	e7fb      	b.n	8008c48 <hci_le_set_scan_resp_data+0x58>

08008c50 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 8008c50:	b500      	push	{lr}
 8008c52:	b08b      	sub	sp, #44	; 0x2c
 8008c54:	4602      	mov	r2, r0
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  BLUENRG_memset(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 8008c56:	ab02      	add	r3, sp, #8
 8008c58:	2100      	movs	r1, #0
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	9002      	str	r0, [sp, #8]
 8008c5e:	8892      	ldrh	r2, [r2, #4]
 8008c60:	f8ad 200c 	strh.w	r2, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c64:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_LE_CTL;
 8008c66:	2208      	movs	r2, #8
 8008c68:	f8ad 2010 	strh.w	r2, [sp, #16]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	f8ad 2012 	strh.w	r2, [sp, #18]
  rq.cparam = &set_rand_addr_cp;
 8008c72:	9306      	str	r3, [sp, #24]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 8008c74:	2306      	movs	r3, #6
 8008c76:	9307      	str	r3, [sp, #28]
  rq.rparam = &status;
 8008c78:	f10d 0307 	add.w	r3, sp, #7
 8008c7c:	9308      	str	r3, [sp, #32]
  rq.rlen = 1;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c82:	a804      	add	r0, sp, #16
 8008c84:	f000 f89e 	bl	8008dc4 <hci_send_req>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	db04      	blt.n	8008c96 <hci_le_set_random_address+0x46>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8008c8c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008c90:	b00b      	add	sp, #44	; 0x2c
 8008c92:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8008c96:	20ff      	movs	r0, #255	; 0xff
 8008c98:	e7fa      	b.n	8008c90 <hci_le_set_random_address+0x40>

08008c9a <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008c9a:	7a03      	ldrb	r3, [r0, #8]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d001      	beq.n	8008ca4 <verify_packet+0xa>
    return 1; /* Incorrect type */
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	4770      	bx	lr
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008ca4:	7a82      	ldrb	r2, [r0, #10]
 8008ca6:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8008caa:	3b03      	subs	r3, #3
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d101      	bne.n	8008cb4 <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 8008cb0:	2000      	movs	r0, #0
}
 8008cb2:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 8008cb4:	2002      	movs	r0, #2
 8008cb6:	4770      	bx	lr

08008cb8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	b0a2      	sub	sp, #136	; 0x88
 8008cbc:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008cbe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cc2:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8008cc6:	f8ad 1004 	strh.w	r1, [sp, #4]
  hc.plen = plen;

  payload[0] = HCI_COMMAND_PKT;
 8008cca:	2101      	movs	r1, #1
 8008ccc:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008cd0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008cd4:	f8ad 1009 	strh.w	r1, [sp, #9]
 8008cd8:	f88d 200b 	strb.w	r2, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008cdc:	4619      	mov	r1, r3
 8008cde:	a803      	add	r0, sp, #12
 8008ce0:	f000 fa02 	bl	80090e8 <memcpy>
  
  if (hciContext.io.Send)
 8008ce4:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <send_cmd+0x3c>)
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	b113      	cbz	r3, 8008cf0 <send_cmd+0x38>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008cea:	1d21      	adds	r1, r4, #4
 8008cec:	a802      	add	r0, sp, #8
 8008cee:	4798      	blx	r3
  }
}
 8008cf0:	b022      	add	sp, #136	; 0x88
 8008cf2:	bd10      	pop	{r4, pc}
 8008cf4:	200002f0 	.word	0x200002f0

08008cf8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008cf8:	b500      	push	{lr}
 8008cfa:	b083      	sub	sp, #12
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008cfc:	e007      	b.n	8008d0e <free_event_list+0x16>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008cfe:	a901      	add	r1, sp, #4
 8008d00:	4807      	ldr	r0, [pc, #28]	; (8008d20 <free_event_list+0x28>)
 8008d02:	f000 f994 	bl	800902e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008d06:	9901      	ldr	r1, [sp, #4]
 8008d08:	4806      	ldr	r0, [pc, #24]	; (8008d24 <free_event_list+0x2c>)
 8008d0a:	f000 f978 	bl	8008ffe <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008d0e:	4805      	ldr	r0, [pc, #20]	; (8008d24 <free_event_list+0x2c>)
 8008d10:	f000 f9b1 	bl	8009076 <list_get_size>
 8008d14:	2801      	cmp	r0, #1
 8008d16:	ddf2      	ble.n	8008cfe <free_event_list+0x6>
  }
}
 8008d18:	b003      	add	sp, #12
 8008d1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d1e:	bf00      	nop
 8008d20:	200027bc 	.word	0x200027bc
 8008d24:	200027b4 	.word	0x200027b4

08008d28 <move_list>:
{
 8008d28:	b530      	push	{r4, r5, lr}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 8008d30:	e007      	b.n	8008d42 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 8008d32:	a901      	add	r1, sp, #4
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 f98c 	bl	8009052 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008d3a:	9901      	ldr	r1, [sp, #4]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f000 f952 	bl	8008fe6 <list_insert_head>
  while (!list_is_empty(src_list))
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f943 	bl	8008fce <list_is_empty>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0f2      	beq.n	8008d32 <move_list+0xa>
}
 8008d4c:	b003      	add	sp, #12
 8008d4e:	bd30      	pop	{r4, r5, pc}

08008d50 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008d50:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 8008d52:	b108      	cbz	r0, 8008d58 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008d54:	4a10      	ldr	r2, [pc, #64]	; (8008d98 <hci_init+0x48>)
 8008d56:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008d58:	4810      	ldr	r0, [pc, #64]	; (8008d9c <hci_init+0x4c>)
 8008d5a:	f000 f935 	bl	8008fc8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008d5e:	4810      	ldr	r0, [pc, #64]	; (8008da0 <hci_init+0x50>)
 8008d60:	f000 f932 	bl	8008fc8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008d64:	f7f7 fcf6 	bl	8000754 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008d68:	2400      	movs	r4, #0
 8008d6a:	e008      	b.n	8008d7e <hci_init+0x2e>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <hci_init+0x54>)
 8008d6e:	218c      	movs	r1, #140	; 0x8c
 8008d70:	fb01 3104 	mla	r1, r1, r4, r3
 8008d74:	4809      	ldr	r0, [pc, #36]	; (8008d9c <hci_init+0x4c>)
 8008d76:	f000 f942 	bl	8008ffe <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008d7a:	3401      	adds	r4, #1
 8008d7c:	b2e4      	uxtb	r4, r4
 8008d7e:	2c04      	cmp	r4, #4
 8008d80:	d9f4      	bls.n	8008d6c <hci_init+0x1c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <hci_init+0x48>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	b10b      	cbz	r3, 8008d8c <hci_init+0x3c>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <hci_init+0x48>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	b103      	cbz	r3, 8008d94 <hci_init+0x44>
 8008d92:	4798      	blx	r3
}
 8008d94:	bd10      	pop	{r4, pc}
 8008d96:	bf00      	nop
 8008d98:	200002f0 	.word	0x200002f0
 8008d9c:	200027b4 	.word	0x200027b4
 8008da0:	200027bc 	.word	0x200027bc
 8008da4:	20000310 	.word	0x20000310

08008da8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008da8:	6802      	ldr	r2, [r0, #0]
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <hci_register_io_bus+0x18>)
 8008dac:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8008dae:	68c2      	ldr	r2, [r0, #12]
 8008db0:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8008db2:	6902      	ldr	r2, [r0, #16]
 8008db4:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008db6:	6982      	ldr	r2, [r0, #24]
 8008db8:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8008dba:	6882      	ldr	r2, [r0, #8]
 8008dbc:	609a      	str	r2, [r3, #8]
}
 8008dbe:	4770      	bx	lr
 8008dc0:	200002f0 	.word	0x200002f0

08008dc4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008dcc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dd4:	8802      	ldrh	r2, [r0, #0]
 8008dd6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8008dda:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008de0:	a801      	add	r0, sp, #4
 8008de2:	f000 f8f1 	bl	8008fc8 <list_init_head>

  free_event_list();
 8008de6:	f7ff ff87 	bl	8008cf8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	7b22      	ldrb	r2, [r4, #12]
 8008dee:	8861      	ldrh	r1, [r4, #2]
 8008df0:	8820      	ldrh	r0, [r4, #0]
 8008df2:	f7ff ff61 	bl	8008cb8 <send_cmd>
  
  if (async)
 8008df6:	2d00      	cmp	r5, #0
 8008df8:	f040 8084 	bne.w	8008f04 <hci_send_req+0x140>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008dfc:	f7fa fe88 	bl	8003b10 <HAL_GetTick>
 8008e00:	4605      	mov	r5, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008e02:	f7fa fe85 	bl	8003b10 <HAL_GetTick>
 8008e06:	1b40      	subs	r0, r0, r5
 8008e08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008e0c:	d851      	bhi.n	8008eb2 <hci_send_req+0xee>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008e0e:	483e      	ldr	r0, [pc, #248]	; (8008f08 <hci_send_req+0x144>)
 8008e10:	f000 f8dd 	bl	8008fce <list_is_empty>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d1f4      	bne.n	8008e02 <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008e18:	a903      	add	r1, sp, #12
 8008e1a:	483b      	ldr	r0, [pc, #236]	; (8008f08 <hci_send_req+0x144>)
 8008e1c:	f000 f907 	bl	800902e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008e20:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008e22:	7a1a      	ldrb	r2, [r3, #8]
 8008e24:	2a04      	cmp	r2, #4
 8008e26:	d110      	bne.n	8008e4a <hci_send_req+0x86>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008e28:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008e2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8008e30:	1ed0      	subs	r0, r2, #3
    
      switch (event_pckt->evt) 
 8008e32:	7a5a      	ldrb	r2, [r3, #9]
 8008e34:	2a0f      	cmp	r2, #15
 8008e36:	d032      	beq.n	8008e9e <hci_send_req+0xda>
 8008e38:	d917      	bls.n	8008e6a <hci_send_req+0xa6>
 8008e3a:	2a10      	cmp	r2, #16
 8008e3c:	d039      	beq.n	8008eb2 <hci_send_req+0xee>
 8008e3e:	2a3e      	cmp	r2, #62	; 0x3e
 8008e40:	d103      	bne.n	8008e4a <hci_send_req+0x86>
        goto done;
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
      
        if (me->subevent != r->event)
 8008e42:	7ad9      	ldrb	r1, [r3, #11]
 8008e44:	6862      	ldr	r2, [r4, #4]
 8008e46:	4291      	cmp	r1, r2
 8008e48:	d049      	beq.n	8008ede <hci_send_req+0x11a>
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008e4a:	4830      	ldr	r0, [pc, #192]	; (8008f0c <hci_send_req+0x148>)
 8008e4c:	f000 f8bf 	bl	8008fce <list_is_empty>
 8008e50:	b120      	cbz	r0, 8008e5c <hci_send_req+0x98>
 8008e52:	482d      	ldr	r0, [pc, #180]	; (8008f08 <hci_send_req+0x144>)
 8008e54:	f000 f8bb 	bl	8008fce <list_is_empty>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d14c      	bne.n	8008ef6 <hci_send_req+0x132>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008e5c:	9903      	ldr	r1, [sp, #12]
 8008e5e:	a801      	add	r0, sp, #4
 8008e60:	f000 f8cd 	bl	8008ffe <list_insert_tail>
      hciReadPacket=NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	e7c8      	b.n	8008dfc <hci_send_req+0x38>
      switch (event_pckt->evt) 
 8008e6a:	2a0e      	cmp	r2, #14
 8008e6c:	d1ed      	bne.n	8008e4a <hci_send_req+0x86>
        if (cc->opcode != opcode)
 8008e6e:	899a      	ldrh	r2, [r3, #12]
 8008e70:	42b2      	cmp	r2, r6
 8008e72:	d11e      	bne.n	8008eb2 <hci_send_req+0xee>
        len -= EVT_CMD_COMPLETE_SIZE;
 8008e74:	1ec2      	subs	r2, r0, #3
        r->rlen = MIN(len, r->rlen);
 8008e76:	6960      	ldr	r0, [r4, #20]
 8008e78:	4282      	cmp	r2, r0
 8008e7a:	bf28      	it	cs
 8008e7c:	4602      	movcs	r2, r0
 8008e7e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008e80:	f103 010e 	add.w	r1, r3, #14
 8008e84:	6920      	ldr	r0, [r4, #16]
 8008e86:	f000 f92f 	bl	80090e8 <memcpy>

  return -1;
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008e8a:	9903      	ldr	r1, [sp, #12]
 8008e8c:	481f      	ldr	r0, [pc, #124]	; (8008f0c <hci_send_req+0x148>)
 8008e8e:	f000 f8aa 	bl	8008fe6 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008e92:	a901      	add	r1, sp, #4
 8008e94:	481c      	ldr	r0, [pc, #112]	; (8008f08 <hci_send_req+0x144>)
 8008e96:	f7ff ff47 	bl	8008d28 <move_list>

  return 0;
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e014      	b.n	8008ec8 <hci_send_req+0x104>
        if (cs->opcode != opcode)
 8008e9e:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 8008ea2:	42b2      	cmp	r2, r6
 8008ea4:	d105      	bne.n	8008eb2 <hci_send_req+0xee>
        if (r->event != EVT_CMD_STATUS) {
 8008ea6:	6862      	ldr	r2, [r4, #4]
 8008ea8:	2a0f      	cmp	r2, #15
 8008eaa:	d00f      	beq.n	8008ecc <hci_send_req+0x108>
          if (cs->status) {
 8008eac:	7adb      	ldrb	r3, [r3, #11]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0cb      	beq.n	8008e4a <hci_send_req+0x86>
  if (hciReadPacket!=NULL) {
 8008eb2:	9903      	ldr	r1, [sp, #12]
 8008eb4:	b111      	cbz	r1, 8008ebc <hci_send_req+0xf8>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008eb6:	4815      	ldr	r0, [pc, #84]	; (8008f0c <hci_send_req+0x148>)
 8008eb8:	f000 f895 	bl	8008fe6 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008ebc:	a901      	add	r1, sp, #4
 8008ebe:	4812      	ldr	r0, [pc, #72]	; (8008f08 <hci_send_req+0x144>)
 8008ec0:	f7ff ff32 	bl	8008d28 <move_list>
  return -1;
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ec8:	b004      	add	sp, #16
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
        r->rlen = MIN(len, r->rlen);
 8008ecc:	6962      	ldr	r2, [r4, #20]
 8008ece:	4282      	cmp	r2, r0
 8008ed0:	bf28      	it	cs
 8008ed2:	4602      	movcs	r2, r0
 8008ed4:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008ed6:	6920      	ldr	r0, [r4, #16]
 8008ed8:	f000 f906 	bl	80090e8 <memcpy>
        goto done;
 8008edc:	e7d5      	b.n	8008e8a <hci_send_req+0xc6>
        len -= 1;
 8008ede:	1e42      	subs	r2, r0, #1
        r->rlen = MIN(len, r->rlen);
 8008ee0:	6961      	ldr	r1, [r4, #20]
 8008ee2:	428a      	cmp	r2, r1
 8008ee4:	bf28      	it	cs
 8008ee6:	460a      	movcs	r2, r1
 8008ee8:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008eea:	f103 010c 	add.w	r1, r3, #12
 8008eee:	6920      	ldr	r0, [r4, #16]
 8008ef0:	f000 f8fa 	bl	80090e8 <memcpy>
        goto done;
 8008ef4:	e7c9      	b.n	8008e8a <hci_send_req+0xc6>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008ef6:	9903      	ldr	r1, [sp, #12]
 8008ef8:	4804      	ldr	r0, [pc, #16]	; (8008f0c <hci_send_req+0x148>)
 8008efa:	f000 f880 	bl	8008ffe <list_insert_tail>
      hciReadPacket=NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	e77b      	b.n	8008dfc <hci_send_req+0x38>
    return 0;
 8008f04:	2000      	movs	r0, #0
 8008f06:	e7df      	b.n	8008ec8 <hci_send_req+0x104>
 8008f08:	200027bc 	.word	0x200027bc
 8008f0c:	200027b4 	.word	0x200027b4

08008f10 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008f10:	b500      	push	{lr}
 8008f12:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008f18:	e003      	b.n	8008f22 <hci_user_evt_proc+0x12>
    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008f1a:	9901      	ldr	r1, [sp, #4]
 8008f1c:	480a      	ldr	r0, [pc, #40]	; (8008f48 <hci_user_evt_proc+0x38>)
 8008f1e:	f000 f86e 	bl	8008ffe <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008f22:	480a      	ldr	r0, [pc, #40]	; (8008f4c <hci_user_evt_proc+0x3c>)
 8008f24:	f000 f853 	bl	8008fce <list_is_empty>
 8008f28:	b958      	cbnz	r0, 8008f42 <hci_user_evt_proc+0x32>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008f2a:	a901      	add	r1, sp, #4
 8008f2c:	4807      	ldr	r0, [pc, #28]	; (8008f4c <hci_user_evt_proc+0x3c>)
 8008f2e:	f000 f87e 	bl	800902e <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <hci_user_evt_proc+0x40>)
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0ef      	beq.n	8008f1a <hci_user_evt_proc+0xa>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008f3a:	9801      	ldr	r0, [sp, #4]
 8008f3c:	3008      	adds	r0, #8
 8008f3e:	4798      	blx	r3
 8008f40:	e7eb      	b.n	8008f1a <hci_user_evt_proc+0xa>
  }
}
 8008f42:	b003      	add	sp, #12
 8008f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f48:	200027b4 	.word	0x200027b4
 8008f4c:	200027bc 	.word	0x200027bc
 8008f50:	200002f0 	.word	0x200002f0

08008f54 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008f54:	b510      	push	{r4, lr}
 8008f56:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008f5c:	4817      	ldr	r0, [pc, #92]	; (8008fbc <hci_notify_asynch_evt+0x68>)
 8008f5e:	f000 f836 	bl	8008fce <list_is_empty>
 8008f62:	b110      	cbz	r0, 8008f6a <hci_notify_asynch_evt+0x16>
      }
    }
  }
  else 
  {
    ret = 1;
 8008f64:	2001      	movs	r0, #1
  }
  return ret;

}
 8008f66:	b002      	add	sp, #8
 8008f68:	bd10      	pop	{r4, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008f6a:	a901      	add	r1, sp, #4
 8008f6c:	4813      	ldr	r0, [pc, #76]	; (8008fbc <hci_notify_asynch_evt+0x68>)
 8008f6e:	f000 f85e 	bl	800902e <list_remove_head>
    if (hciContext.io.Receive)
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <hci_notify_asynch_evt+0x6c>)
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	b1f3      	cbz	r3, 8008fb6 <hci_notify_asynch_evt+0x62>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008f78:	2180      	movs	r1, #128	; 0x80
 8008f7a:	9801      	ldr	r0, [sp, #4]
 8008f7c:	3008      	adds	r0, #8
 8008f7e:	4798      	blx	r3
 8008f80:	b2c0      	uxtb	r0, r0
      if (data_len > 0)
 8008f82:	b190      	cbz	r0, 8008faa <hci_notify_asynch_evt+0x56>
        hciReadPacket->data_len = data_len;
 8008f84:	9c01      	ldr	r4, [sp, #4]
 8008f86:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7ff fe85 	bl	8008c9a <verify_packet>
 8008f90:	b928      	cbnz	r0, 8008f9e <hci_notify_asynch_evt+0x4a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008f92:	4621      	mov	r1, r4
 8008f94:	480b      	ldr	r0, [pc, #44]	; (8008fc4 <hci_notify_asynch_evt+0x70>)
 8008f96:	f000 f832 	bl	8008ffe <list_insert_tail>
  int32_t ret = 0;
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7e3      	b.n	8008f66 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4806      	ldr	r0, [pc, #24]	; (8008fbc <hci_notify_asynch_evt+0x68>)
 8008fa2:	f000 f820 	bl	8008fe6 <list_insert_head>
  int32_t ret = 0;
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e7dd      	b.n	8008f66 <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008faa:	9901      	ldr	r1, [sp, #4]
 8008fac:	4803      	ldr	r0, [pc, #12]	; (8008fbc <hci_notify_asynch_evt+0x68>)
 8008fae:	f000 f81a 	bl	8008fe6 <list_insert_head>
  int32_t ret = 0;
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e7d7      	b.n	8008f66 <hci_notify_asynch_evt+0x12>
 8008fb6:	2000      	movs	r0, #0
  return ret;
 8008fb8:	e7d5      	b.n	8008f66 <hci_notify_asynch_evt+0x12>
 8008fba:	bf00      	nop
 8008fbc:	200027b4 	.word	0x200027b4
 8008fc0:	200002f0 	.word	0x200002f0
 8008fc4:	200027bc 	.word	0x200027bc

08008fc8 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8008fc8:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8008fca:	6040      	str	r0, [r0, #4]
}
 8008fcc:	4770      	bx	lr

08008fce <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fce:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fd2:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008fd4:	6802      	ldr	r2, [r0, #0]
 8008fd6:	4282      	cmp	r2, r0
 8008fd8:	d003      	beq.n	8008fe2 <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 8008fda:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fdc:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8008fe0:	4770      	bx	lr
    return_value = 1;
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7fa      	b.n	8008fdc <list_is_empty+0xe>

08008fe6 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fea:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008fec:	6802      	ldr	r2, [r0, #0]
 8008fee:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8008ff0:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8008ff2:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8008ff4:	680a      	ldr	r2, [r1, #0]
 8008ff6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008ffc:	4770      	bx	lr

08008ffe <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffe:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009002:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009004:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8009006:	6842      	ldr	r2, [r0, #4]
 8009008:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800900a:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800900c:	684a      	ldr	r2, [r1, #4]
 800900e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009010:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009014:	4770      	bx	lr

08009016 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009016:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800901a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800901c:	6842      	ldr	r2, [r0, #4]
 800901e:	6801      	ldr	r1, [r0, #0]
 8009020:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8009022:	6802      	ldr	r2, [r0, #0]
 8009024:	6841      	ldr	r1, [r0, #4]
 8009026:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009028:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800902c:	4770      	bx	lr

0800902e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009032:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009036:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009038:	6803      	ldr	r3, [r0, #0]
 800903a:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 800903c:	6800      	ldr	r0, [r0, #0]
 800903e:	f7ff ffea 	bl	8009016 <list_remove_node>
  (*node)->next = NULL;
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	2300      	movs	r3, #0
 8009046:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904c:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009050:	bd38      	pop	{r3, r4, r5, pc}

08009052 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009052:	b538      	push	{r3, r4, r5, lr}
 8009054:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009056:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800905a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800905c:	6843      	ldr	r3, [r0, #4]
 800905e:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8009060:	6840      	ldr	r0, [r0, #4]
 8009062:	f7ff ffd8 	bl	8009016 <list_remove_node>
  (*node)->next = NULL;
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	2300      	movs	r3, #0
 800906a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009070:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009074:	bd38      	pop	{r3, r4, r5, pc}

08009076 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009076:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800907a:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800907c:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800907e:	2200      	movs	r2, #0
  while (temp != listHead)
 8009080:	e001      	b.n	8009086 <list_get_size+0x10>
  {
    size++;
 8009082:	3201      	adds	r2, #1
    temp = temp->next;		
 8009084:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8009086:	4283      	cmp	r3, r0
 8009088:	d1fb      	bne.n	8009082 <list_get_size+0xc>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908a:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800908e:	4610      	mov	r0, r2
 8009090:	4770      	bx	lr
	...

08009094 <__errno>:
 8009094:	4b01      	ldr	r3, [pc, #4]	; (800909c <__errno+0x8>)
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	2000008c 	.word	0x2000008c

080090a0 <__libc_init_array>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4e0d      	ldr	r6, [pc, #52]	; (80090d8 <__libc_init_array+0x38>)
 80090a4:	4c0d      	ldr	r4, [pc, #52]	; (80090dc <__libc_init_array+0x3c>)
 80090a6:	1ba4      	subs	r4, r4, r6
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	2500      	movs	r5, #0
 80090ac:	42a5      	cmp	r5, r4
 80090ae:	d109      	bne.n	80090c4 <__libc_init_array+0x24>
 80090b0:	4e0b      	ldr	r6, [pc, #44]	; (80090e0 <__libc_init_array+0x40>)
 80090b2:	4c0c      	ldr	r4, [pc, #48]	; (80090e4 <__libc_init_array+0x44>)
 80090b4:	f000 fc28 	bl	8009908 <_init>
 80090b8:	1ba4      	subs	r4, r4, r6
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	2500      	movs	r5, #0
 80090be:	42a5      	cmp	r5, r4
 80090c0:	d105      	bne.n	80090ce <__libc_init_array+0x2e>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090c8:	4798      	blx	r3
 80090ca:	3501      	adds	r5, #1
 80090cc:	e7ee      	b.n	80090ac <__libc_init_array+0xc>
 80090ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090d2:	4798      	blx	r3
 80090d4:	3501      	adds	r5, #1
 80090d6:	e7f2      	b.n	80090be <__libc_init_array+0x1e>
 80090d8:	08009f50 	.word	0x08009f50
 80090dc:	08009f50 	.word	0x08009f50
 80090e0:	08009f50 	.word	0x08009f50
 80090e4:	08009f54 	.word	0x08009f54

080090e8 <memcpy>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	1e43      	subs	r3, r0, #1
 80090ec:	440a      	add	r2, r1
 80090ee:	4291      	cmp	r1, r2
 80090f0:	d100      	bne.n	80090f4 <memcpy+0xc>
 80090f2:	bd10      	pop	{r4, pc}
 80090f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090fc:	e7f7      	b.n	80090ee <memcpy+0x6>

080090fe <memset>:
 80090fe:	4402      	add	r2, r0
 8009100:	4603      	mov	r3, r0
 8009102:	4293      	cmp	r3, r2
 8009104:	d100      	bne.n	8009108 <memset+0xa>
 8009106:	4770      	bx	lr
 8009108:	f803 1b01 	strb.w	r1, [r3], #1
 800910c:	e7f9      	b.n	8009102 <memset+0x4>
	...

08009110 <_free_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4605      	mov	r5, r0
 8009114:	2900      	cmp	r1, #0
 8009116:	d045      	beq.n	80091a4 <_free_r+0x94>
 8009118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911c:	1f0c      	subs	r4, r1, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfb8      	it	lt
 8009122:	18e4      	addlt	r4, r4, r3
 8009124:	f000 f8cc 	bl	80092c0 <__malloc_lock>
 8009128:	4a1f      	ldr	r2, [pc, #124]	; (80091a8 <_free_r+0x98>)
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	4610      	mov	r0, r2
 800912e:	b933      	cbnz	r3, 800913e <_free_r+0x2e>
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	6014      	str	r4, [r2, #0]
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913a:	f000 b8c2 	b.w	80092c2 <__malloc_unlock>
 800913e:	42a3      	cmp	r3, r4
 8009140:	d90c      	bls.n	800915c <_free_r+0x4c>
 8009142:	6821      	ldr	r1, [r4, #0]
 8009144:	1862      	adds	r2, r4, r1
 8009146:	4293      	cmp	r3, r2
 8009148:	bf04      	itt	eq
 800914a:	681a      	ldreq	r2, [r3, #0]
 800914c:	685b      	ldreq	r3, [r3, #4]
 800914e:	6063      	str	r3, [r4, #4]
 8009150:	bf04      	itt	eq
 8009152:	1852      	addeq	r2, r2, r1
 8009154:	6022      	streq	r2, [r4, #0]
 8009156:	6004      	str	r4, [r0, #0]
 8009158:	e7ec      	b.n	8009134 <_free_r+0x24>
 800915a:	4613      	mov	r3, r2
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	b10a      	cbz	r2, 8009164 <_free_r+0x54>
 8009160:	42a2      	cmp	r2, r4
 8009162:	d9fa      	bls.n	800915a <_free_r+0x4a>
 8009164:	6819      	ldr	r1, [r3, #0]
 8009166:	1858      	adds	r0, r3, r1
 8009168:	42a0      	cmp	r0, r4
 800916a:	d10b      	bne.n	8009184 <_free_r+0x74>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	4401      	add	r1, r0
 8009170:	1858      	adds	r0, r3, r1
 8009172:	4282      	cmp	r2, r0
 8009174:	6019      	str	r1, [r3, #0]
 8009176:	d1dd      	bne.n	8009134 <_free_r+0x24>
 8009178:	6810      	ldr	r0, [r2, #0]
 800917a:	6852      	ldr	r2, [r2, #4]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	4401      	add	r1, r0
 8009180:	6019      	str	r1, [r3, #0]
 8009182:	e7d7      	b.n	8009134 <_free_r+0x24>
 8009184:	d902      	bls.n	800918c <_free_r+0x7c>
 8009186:	230c      	movs	r3, #12
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	e7d3      	b.n	8009134 <_free_r+0x24>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	1821      	adds	r1, r4, r0
 8009190:	428a      	cmp	r2, r1
 8009192:	bf04      	itt	eq
 8009194:	6811      	ldreq	r1, [r2, #0]
 8009196:	6852      	ldreq	r2, [r2, #4]
 8009198:	6062      	str	r2, [r4, #4]
 800919a:	bf04      	itt	eq
 800919c:	1809      	addeq	r1, r1, r0
 800919e:	6021      	streq	r1, [r4, #0]
 80091a0:	605c      	str	r4, [r3, #4]
 80091a2:	e7c7      	b.n	8009134 <_free_r+0x24>
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	200005cc 	.word	0x200005cc

080091ac <_malloc_r>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	1ccd      	adds	r5, r1, #3
 80091b0:	f025 0503 	bic.w	r5, r5, #3
 80091b4:	3508      	adds	r5, #8
 80091b6:	2d0c      	cmp	r5, #12
 80091b8:	bf38      	it	cc
 80091ba:	250c      	movcc	r5, #12
 80091bc:	2d00      	cmp	r5, #0
 80091be:	4606      	mov	r6, r0
 80091c0:	db01      	blt.n	80091c6 <_malloc_r+0x1a>
 80091c2:	42a9      	cmp	r1, r5
 80091c4:	d903      	bls.n	80091ce <_malloc_r+0x22>
 80091c6:	230c      	movs	r3, #12
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	2000      	movs	r0, #0
 80091cc:	bd70      	pop	{r4, r5, r6, pc}
 80091ce:	f000 f877 	bl	80092c0 <__malloc_lock>
 80091d2:	4a21      	ldr	r2, [pc, #132]	; (8009258 <_malloc_r+0xac>)
 80091d4:	6814      	ldr	r4, [r2, #0]
 80091d6:	4621      	mov	r1, r4
 80091d8:	b991      	cbnz	r1, 8009200 <_malloc_r+0x54>
 80091da:	4c20      	ldr	r4, [pc, #128]	; (800925c <_malloc_r+0xb0>)
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	b91b      	cbnz	r3, 80091e8 <_malloc_r+0x3c>
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f83d 	bl	8009260 <_sbrk_r>
 80091e6:	6020      	str	r0, [r4, #0]
 80091e8:	4629      	mov	r1, r5
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 f838 	bl	8009260 <_sbrk_r>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d124      	bne.n	800923e <_malloc_r+0x92>
 80091f4:	230c      	movs	r3, #12
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f862 	bl	80092c2 <__malloc_unlock>
 80091fe:	e7e4      	b.n	80091ca <_malloc_r+0x1e>
 8009200:	680b      	ldr	r3, [r1, #0]
 8009202:	1b5b      	subs	r3, r3, r5
 8009204:	d418      	bmi.n	8009238 <_malloc_r+0x8c>
 8009206:	2b0b      	cmp	r3, #11
 8009208:	d90f      	bls.n	800922a <_malloc_r+0x7e>
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	50cd      	str	r5, [r1, r3]
 800920e:	18cc      	adds	r4, r1, r3
 8009210:	4630      	mov	r0, r6
 8009212:	f000 f856 	bl	80092c2 <__malloc_unlock>
 8009216:	f104 000b 	add.w	r0, r4, #11
 800921a:	1d23      	adds	r3, r4, #4
 800921c:	f020 0007 	bic.w	r0, r0, #7
 8009220:	1ac3      	subs	r3, r0, r3
 8009222:	d0d3      	beq.n	80091cc <_malloc_r+0x20>
 8009224:	425a      	negs	r2, r3
 8009226:	50e2      	str	r2, [r4, r3]
 8009228:	e7d0      	b.n	80091cc <_malloc_r+0x20>
 800922a:	428c      	cmp	r4, r1
 800922c:	684b      	ldr	r3, [r1, #4]
 800922e:	bf16      	itet	ne
 8009230:	6063      	strne	r3, [r4, #4]
 8009232:	6013      	streq	r3, [r2, #0]
 8009234:	460c      	movne	r4, r1
 8009236:	e7eb      	b.n	8009210 <_malloc_r+0x64>
 8009238:	460c      	mov	r4, r1
 800923a:	6849      	ldr	r1, [r1, #4]
 800923c:	e7cc      	b.n	80091d8 <_malloc_r+0x2c>
 800923e:	1cc4      	adds	r4, r0, #3
 8009240:	f024 0403 	bic.w	r4, r4, #3
 8009244:	42a0      	cmp	r0, r4
 8009246:	d005      	beq.n	8009254 <_malloc_r+0xa8>
 8009248:	1a21      	subs	r1, r4, r0
 800924a:	4630      	mov	r0, r6
 800924c:	f000 f808 	bl	8009260 <_sbrk_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d0cf      	beq.n	80091f4 <_malloc_r+0x48>
 8009254:	6025      	str	r5, [r4, #0]
 8009256:	e7db      	b.n	8009210 <_malloc_r+0x64>
 8009258:	200005cc 	.word	0x200005cc
 800925c:	200005d0 	.word	0x200005d0

08009260 <_sbrk_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4c06      	ldr	r4, [pc, #24]	; (800927c <_sbrk_r+0x1c>)
 8009264:	2300      	movs	r3, #0
 8009266:	4605      	mov	r5, r0
 8009268:	4608      	mov	r0, r1
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	f7f7 f82a 	bl	80002c4 <_sbrk>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_sbrk_r+0x1a>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	b103      	cbz	r3, 800927a <_sbrk_r+0x1a>
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	200027c4 	.word	0x200027c4

08009280 <siprintf>:
 8009280:	b40e      	push	{r1, r2, r3}
 8009282:	b500      	push	{lr}
 8009284:	b09c      	sub	sp, #112	; 0x70
 8009286:	ab1d      	add	r3, sp, #116	; 0x74
 8009288:	9002      	str	r0, [sp, #8]
 800928a:	9006      	str	r0, [sp, #24]
 800928c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009290:	4809      	ldr	r0, [pc, #36]	; (80092b8 <siprintf+0x38>)
 8009292:	9107      	str	r1, [sp, #28]
 8009294:	9104      	str	r1, [sp, #16]
 8009296:	4909      	ldr	r1, [pc, #36]	; (80092bc <siprintf+0x3c>)
 8009298:	f853 2b04 	ldr.w	r2, [r3], #4
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	a902      	add	r1, sp, #8
 80092a4:	f000 f868 	bl	8009378 <_svfiprintf_r>
 80092a8:	9b02      	ldr	r3, [sp, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	b01c      	add	sp, #112	; 0x70
 80092b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b4:	b003      	add	sp, #12
 80092b6:	4770      	bx	lr
 80092b8:	2000008c 	.word	0x2000008c
 80092bc:	ffff0208 	.word	0xffff0208

080092c0 <__malloc_lock>:
 80092c0:	4770      	bx	lr

080092c2 <__malloc_unlock>:
 80092c2:	4770      	bx	lr

080092c4 <__ssputs_r>:
 80092c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	688e      	ldr	r6, [r1, #8]
 80092ca:	429e      	cmp	r6, r3
 80092cc:	4682      	mov	sl, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	4690      	mov	r8, r2
 80092d2:	4699      	mov	r9, r3
 80092d4:	d837      	bhi.n	8009346 <__ssputs_r+0x82>
 80092d6:	898a      	ldrh	r2, [r1, #12]
 80092d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092dc:	d031      	beq.n	8009342 <__ssputs_r+0x7e>
 80092de:	6825      	ldr	r5, [r4, #0]
 80092e0:	6909      	ldr	r1, [r1, #16]
 80092e2:	1a6f      	subs	r7, r5, r1
 80092e4:	6965      	ldr	r5, [r4, #20]
 80092e6:	2302      	movs	r3, #2
 80092e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80092f0:	f109 0301 	add.w	r3, r9, #1
 80092f4:	443b      	add	r3, r7
 80092f6:	429d      	cmp	r5, r3
 80092f8:	bf38      	it	cc
 80092fa:	461d      	movcc	r5, r3
 80092fc:	0553      	lsls	r3, r2, #21
 80092fe:	d530      	bpl.n	8009362 <__ssputs_r+0x9e>
 8009300:	4629      	mov	r1, r5
 8009302:	f7ff ff53 	bl	80091ac <_malloc_r>
 8009306:	4606      	mov	r6, r0
 8009308:	b950      	cbnz	r0, 8009320 <__ssputs_r+0x5c>
 800930a:	230c      	movs	r3, #12
 800930c:	f8ca 3000 	str.w	r3, [sl]
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009320:	463a      	mov	r2, r7
 8009322:	6921      	ldr	r1, [r4, #16]
 8009324:	f7ff fee0 	bl	80090e8 <memcpy>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800932e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	6126      	str	r6, [r4, #16]
 8009336:	6165      	str	r5, [r4, #20]
 8009338:	443e      	add	r6, r7
 800933a:	1bed      	subs	r5, r5, r7
 800933c:	6026      	str	r6, [r4, #0]
 800933e:	60a5      	str	r5, [r4, #8]
 8009340:	464e      	mov	r6, r9
 8009342:	454e      	cmp	r6, r9
 8009344:	d900      	bls.n	8009348 <__ssputs_r+0x84>
 8009346:	464e      	mov	r6, r9
 8009348:	4632      	mov	r2, r6
 800934a:	4641      	mov	r1, r8
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	f000 fa93 	bl	8009878 <memmove>
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	1b9b      	subs	r3, r3, r6
 8009356:	60a3      	str	r3, [r4, #8]
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	441e      	add	r6, r3
 800935c:	6026      	str	r6, [r4, #0]
 800935e:	2000      	movs	r0, #0
 8009360:	e7dc      	b.n	800931c <__ssputs_r+0x58>
 8009362:	462a      	mov	r2, r5
 8009364:	f000 faa1 	bl	80098aa <_realloc_r>
 8009368:	4606      	mov	r6, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d1e2      	bne.n	8009334 <__ssputs_r+0x70>
 800936e:	6921      	ldr	r1, [r4, #16]
 8009370:	4650      	mov	r0, sl
 8009372:	f7ff fecd 	bl	8009110 <_free_r>
 8009376:	e7c8      	b.n	800930a <__ssputs_r+0x46>

08009378 <_svfiprintf_r>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	461d      	mov	r5, r3
 800937e:	898b      	ldrh	r3, [r1, #12]
 8009380:	061f      	lsls	r7, r3, #24
 8009382:	b09d      	sub	sp, #116	; 0x74
 8009384:	4680      	mov	r8, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4616      	mov	r6, r2
 800938a:	d50f      	bpl.n	80093ac <_svfiprintf_r+0x34>
 800938c:	690b      	ldr	r3, [r1, #16]
 800938e:	b96b      	cbnz	r3, 80093ac <_svfiprintf_r+0x34>
 8009390:	2140      	movs	r1, #64	; 0x40
 8009392:	f7ff ff0b 	bl	80091ac <_malloc_r>
 8009396:	6020      	str	r0, [r4, #0]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	b928      	cbnz	r0, 80093a8 <_svfiprintf_r+0x30>
 800939c:	230c      	movs	r3, #12
 800939e:	f8c8 3000 	str.w	r3, [r8]
 80093a2:	f04f 30ff 	mov.w	r0, #4294967295
 80093a6:	e0c8      	b.n	800953a <_svfiprintf_r+0x1c2>
 80093a8:	2340      	movs	r3, #64	; 0x40
 80093aa:	6163      	str	r3, [r4, #20]
 80093ac:	2300      	movs	r3, #0
 80093ae:	9309      	str	r3, [sp, #36]	; 0x24
 80093b0:	2320      	movs	r3, #32
 80093b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093b6:	2330      	movs	r3, #48	; 0x30
 80093b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093bc:	9503      	str	r5, [sp, #12]
 80093be:	f04f 0b01 	mov.w	fp, #1
 80093c2:	4637      	mov	r7, r6
 80093c4:	463d      	mov	r5, r7
 80093c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093ca:	b10b      	cbz	r3, 80093d0 <_svfiprintf_r+0x58>
 80093cc:	2b25      	cmp	r3, #37	; 0x25
 80093ce:	d13e      	bne.n	800944e <_svfiprintf_r+0xd6>
 80093d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80093d4:	d00b      	beq.n	80093ee <_svfiprintf_r+0x76>
 80093d6:	4653      	mov	r3, sl
 80093d8:	4632      	mov	r2, r6
 80093da:	4621      	mov	r1, r4
 80093dc:	4640      	mov	r0, r8
 80093de:	f7ff ff71 	bl	80092c4 <__ssputs_r>
 80093e2:	3001      	adds	r0, #1
 80093e4:	f000 80a4 	beq.w	8009530 <_svfiprintf_r+0x1b8>
 80093e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ea:	4453      	add	r3, sl
 80093ec:	9309      	str	r3, [sp, #36]	; 0x24
 80093ee:	783b      	ldrb	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 809d 	beq.w	8009530 <_svfiprintf_r+0x1b8>
 80093f6:	2300      	movs	r3, #0
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295
 80093fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9307      	str	r3, [sp, #28]
 8009404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009408:	931a      	str	r3, [sp, #104]	; 0x68
 800940a:	462f      	mov	r7, r5
 800940c:	2205      	movs	r2, #5
 800940e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009412:	4850      	ldr	r0, [pc, #320]	; (8009554 <_svfiprintf_r+0x1dc>)
 8009414:	f7f6 fedc 	bl	80001d0 <memchr>
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	b9d0      	cbnz	r0, 8009452 <_svfiprintf_r+0xda>
 800941c:	06d9      	lsls	r1, r3, #27
 800941e:	bf44      	itt	mi
 8009420:	2220      	movmi	r2, #32
 8009422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009426:	071a      	lsls	r2, r3, #28
 8009428:	bf44      	itt	mi
 800942a:	222b      	movmi	r2, #43	; 0x2b
 800942c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009430:	782a      	ldrb	r2, [r5, #0]
 8009432:	2a2a      	cmp	r2, #42	; 0x2a
 8009434:	d015      	beq.n	8009462 <_svfiprintf_r+0xea>
 8009436:	9a07      	ldr	r2, [sp, #28]
 8009438:	462f      	mov	r7, r5
 800943a:	2000      	movs	r0, #0
 800943c:	250a      	movs	r5, #10
 800943e:	4639      	mov	r1, r7
 8009440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009444:	3b30      	subs	r3, #48	; 0x30
 8009446:	2b09      	cmp	r3, #9
 8009448:	d94d      	bls.n	80094e6 <_svfiprintf_r+0x16e>
 800944a:	b1b8      	cbz	r0, 800947c <_svfiprintf_r+0x104>
 800944c:	e00f      	b.n	800946e <_svfiprintf_r+0xf6>
 800944e:	462f      	mov	r7, r5
 8009450:	e7b8      	b.n	80093c4 <_svfiprintf_r+0x4c>
 8009452:	4a40      	ldr	r2, [pc, #256]	; (8009554 <_svfiprintf_r+0x1dc>)
 8009454:	1a80      	subs	r0, r0, r2
 8009456:	fa0b f000 	lsl.w	r0, fp, r0
 800945a:	4318      	orrs	r0, r3
 800945c:	9004      	str	r0, [sp, #16]
 800945e:	463d      	mov	r5, r7
 8009460:	e7d3      	b.n	800940a <_svfiprintf_r+0x92>
 8009462:	9a03      	ldr	r2, [sp, #12]
 8009464:	1d11      	adds	r1, r2, #4
 8009466:	6812      	ldr	r2, [r2, #0]
 8009468:	9103      	str	r1, [sp, #12]
 800946a:	2a00      	cmp	r2, #0
 800946c:	db01      	blt.n	8009472 <_svfiprintf_r+0xfa>
 800946e:	9207      	str	r2, [sp, #28]
 8009470:	e004      	b.n	800947c <_svfiprintf_r+0x104>
 8009472:	4252      	negs	r2, r2
 8009474:	f043 0302 	orr.w	r3, r3, #2
 8009478:	9207      	str	r2, [sp, #28]
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	783b      	ldrb	r3, [r7, #0]
 800947e:	2b2e      	cmp	r3, #46	; 0x2e
 8009480:	d10c      	bne.n	800949c <_svfiprintf_r+0x124>
 8009482:	787b      	ldrb	r3, [r7, #1]
 8009484:	2b2a      	cmp	r3, #42	; 0x2a
 8009486:	d133      	bne.n	80094f0 <_svfiprintf_r+0x178>
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	1d1a      	adds	r2, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	9203      	str	r2, [sp, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfb8      	it	lt
 8009494:	f04f 33ff 	movlt.w	r3, #4294967295
 8009498:	3702      	adds	r7, #2
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	4d2e      	ldr	r5, [pc, #184]	; (8009558 <_svfiprintf_r+0x1e0>)
 800949e:	7839      	ldrb	r1, [r7, #0]
 80094a0:	2203      	movs	r2, #3
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7f6 fe94 	bl	80001d0 <memchr>
 80094a8:	b138      	cbz	r0, 80094ba <_svfiprintf_r+0x142>
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	1b40      	subs	r0, r0, r5
 80094ae:	fa03 f000 	lsl.w	r0, r3, r0
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	4303      	orrs	r3, r0
 80094b6:	3701      	adds	r7, #1
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	7839      	ldrb	r1, [r7, #0]
 80094bc:	4827      	ldr	r0, [pc, #156]	; (800955c <_svfiprintf_r+0x1e4>)
 80094be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c2:	2206      	movs	r2, #6
 80094c4:	1c7e      	adds	r6, r7, #1
 80094c6:	f7f6 fe83 	bl	80001d0 <memchr>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d038      	beq.n	8009540 <_svfiprintf_r+0x1c8>
 80094ce:	4b24      	ldr	r3, [pc, #144]	; (8009560 <_svfiprintf_r+0x1e8>)
 80094d0:	bb13      	cbnz	r3, 8009518 <_svfiprintf_r+0x1a0>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	3307      	adds	r3, #7
 80094d6:	f023 0307 	bic.w	r3, r3, #7
 80094da:	3308      	adds	r3, #8
 80094dc:	9303      	str	r3, [sp, #12]
 80094de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e0:	444b      	add	r3, r9
 80094e2:	9309      	str	r3, [sp, #36]	; 0x24
 80094e4:	e76d      	b.n	80093c2 <_svfiprintf_r+0x4a>
 80094e6:	fb05 3202 	mla	r2, r5, r2, r3
 80094ea:	2001      	movs	r0, #1
 80094ec:	460f      	mov	r7, r1
 80094ee:	e7a6      	b.n	800943e <_svfiprintf_r+0xc6>
 80094f0:	2300      	movs	r3, #0
 80094f2:	3701      	adds	r7, #1
 80094f4:	9305      	str	r3, [sp, #20]
 80094f6:	4619      	mov	r1, r3
 80094f8:	250a      	movs	r5, #10
 80094fa:	4638      	mov	r0, r7
 80094fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009500:	3a30      	subs	r2, #48	; 0x30
 8009502:	2a09      	cmp	r2, #9
 8009504:	d903      	bls.n	800950e <_svfiprintf_r+0x196>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c8      	beq.n	800949c <_svfiprintf_r+0x124>
 800950a:	9105      	str	r1, [sp, #20]
 800950c:	e7c6      	b.n	800949c <_svfiprintf_r+0x124>
 800950e:	fb05 2101 	mla	r1, r5, r1, r2
 8009512:	2301      	movs	r3, #1
 8009514:	4607      	mov	r7, r0
 8009516:	e7f0      	b.n	80094fa <_svfiprintf_r+0x182>
 8009518:	ab03      	add	r3, sp, #12
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	4622      	mov	r2, r4
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <_svfiprintf_r+0x1ec>)
 8009520:	a904      	add	r1, sp, #16
 8009522:	4640      	mov	r0, r8
 8009524:	f3af 8000 	nop.w
 8009528:	f1b0 3fff 	cmp.w	r0, #4294967295
 800952c:	4681      	mov	r9, r0
 800952e:	d1d6      	bne.n	80094de <_svfiprintf_r+0x166>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	065b      	lsls	r3, r3, #25
 8009534:	f53f af35 	bmi.w	80093a2 <_svfiprintf_r+0x2a>
 8009538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800953a:	b01d      	add	sp, #116	; 0x74
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4622      	mov	r2, r4
 8009546:	4b07      	ldr	r3, [pc, #28]	; (8009564 <_svfiprintf_r+0x1ec>)
 8009548:	a904      	add	r1, sp, #16
 800954a:	4640      	mov	r0, r8
 800954c:	f000 f882 	bl	8009654 <_printf_i>
 8009550:	e7ea      	b.n	8009528 <_svfiprintf_r+0x1b0>
 8009552:	bf00      	nop
 8009554:	08009f18 	.word	0x08009f18
 8009558:	08009f1e 	.word	0x08009f1e
 800955c:	08009f22 	.word	0x08009f22
 8009560:	00000000 	.word	0x00000000
 8009564:	080092c5 	.word	0x080092c5

08009568 <_printf_common>:
 8009568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	4691      	mov	r9, r2
 800956e:	461f      	mov	r7, r3
 8009570:	688a      	ldr	r2, [r1, #8]
 8009572:	690b      	ldr	r3, [r1, #16]
 8009574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009578:	4293      	cmp	r3, r2
 800957a:	bfb8      	it	lt
 800957c:	4613      	movlt	r3, r2
 800957e:	f8c9 3000 	str.w	r3, [r9]
 8009582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009586:	4606      	mov	r6, r0
 8009588:	460c      	mov	r4, r1
 800958a:	b112      	cbz	r2, 8009592 <_printf_common+0x2a>
 800958c:	3301      	adds	r3, #1
 800958e:	f8c9 3000 	str.w	r3, [r9]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	f8d9 3000 	ldrmi.w	r3, [r9]
 800959c:	3302      	addmi	r3, #2
 800959e:	f8c9 3000 	strmi.w	r3, [r9]
 80095a2:	6825      	ldr	r5, [r4, #0]
 80095a4:	f015 0506 	ands.w	r5, r5, #6
 80095a8:	d107      	bne.n	80095ba <_printf_common+0x52>
 80095aa:	f104 0a19 	add.w	sl, r4, #25
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	f8d9 2000 	ldr.w	r2, [r9]
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	42ab      	cmp	r3, r5
 80095b8:	dc28      	bgt.n	800960c <_printf_common+0xa4>
 80095ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	3300      	adds	r3, #0
 80095c2:	bf18      	it	ne
 80095c4:	2301      	movne	r3, #1
 80095c6:	0692      	lsls	r2, r2, #26
 80095c8:	d42d      	bmi.n	8009626 <_printf_common+0xbe>
 80095ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ce:	4639      	mov	r1, r7
 80095d0:	4630      	mov	r0, r6
 80095d2:	47c0      	blx	r8
 80095d4:	3001      	adds	r0, #1
 80095d6:	d020      	beq.n	800961a <_printf_common+0xb2>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	68e5      	ldr	r5, [r4, #12]
 80095dc:	f8d9 2000 	ldr.w	r2, [r9]
 80095e0:	f003 0306 	and.w	r3, r3, #6
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	bf08      	it	eq
 80095e8:	1aad      	subeq	r5, r5, r2
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	6922      	ldr	r2, [r4, #16]
 80095ee:	bf0c      	ite	eq
 80095f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f4:	2500      	movne	r5, #0
 80095f6:	4293      	cmp	r3, r2
 80095f8:	bfc4      	itt	gt
 80095fa:	1a9b      	subgt	r3, r3, r2
 80095fc:	18ed      	addgt	r5, r5, r3
 80095fe:	f04f 0900 	mov.w	r9, #0
 8009602:	341a      	adds	r4, #26
 8009604:	454d      	cmp	r5, r9
 8009606:	d11a      	bne.n	800963e <_printf_common+0xd6>
 8009608:	2000      	movs	r0, #0
 800960a:	e008      	b.n	800961e <_printf_common+0xb6>
 800960c:	2301      	movs	r3, #1
 800960e:	4652      	mov	r2, sl
 8009610:	4639      	mov	r1, r7
 8009612:	4630      	mov	r0, r6
 8009614:	47c0      	blx	r8
 8009616:	3001      	adds	r0, #1
 8009618:	d103      	bne.n	8009622 <_printf_common+0xba>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	3501      	adds	r5, #1
 8009624:	e7c3      	b.n	80095ae <_printf_common+0x46>
 8009626:	18e1      	adds	r1, r4, r3
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	2030      	movs	r0, #48	; 0x30
 800962c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009630:	4422      	add	r2, r4
 8009632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800963a:	3302      	adds	r3, #2
 800963c:	e7c5      	b.n	80095ca <_printf_common+0x62>
 800963e:	2301      	movs	r3, #1
 8009640:	4622      	mov	r2, r4
 8009642:	4639      	mov	r1, r7
 8009644:	4630      	mov	r0, r6
 8009646:	47c0      	blx	r8
 8009648:	3001      	adds	r0, #1
 800964a:	d0e6      	beq.n	800961a <_printf_common+0xb2>
 800964c:	f109 0901 	add.w	r9, r9, #1
 8009650:	e7d8      	b.n	8009604 <_printf_common+0x9c>
	...

08009654 <_printf_i>:
 8009654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009658:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800965c:	460c      	mov	r4, r1
 800965e:	7e09      	ldrb	r1, [r1, #24]
 8009660:	b085      	sub	sp, #20
 8009662:	296e      	cmp	r1, #110	; 0x6e
 8009664:	4617      	mov	r7, r2
 8009666:	4606      	mov	r6, r0
 8009668:	4698      	mov	r8, r3
 800966a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800966c:	f000 80b3 	beq.w	80097d6 <_printf_i+0x182>
 8009670:	d822      	bhi.n	80096b8 <_printf_i+0x64>
 8009672:	2963      	cmp	r1, #99	; 0x63
 8009674:	d036      	beq.n	80096e4 <_printf_i+0x90>
 8009676:	d80a      	bhi.n	800968e <_printf_i+0x3a>
 8009678:	2900      	cmp	r1, #0
 800967a:	f000 80b9 	beq.w	80097f0 <_printf_i+0x19c>
 800967e:	2958      	cmp	r1, #88	; 0x58
 8009680:	f000 8083 	beq.w	800978a <_printf_i+0x136>
 8009684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009688:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800968c:	e032      	b.n	80096f4 <_printf_i+0xa0>
 800968e:	2964      	cmp	r1, #100	; 0x64
 8009690:	d001      	beq.n	8009696 <_printf_i+0x42>
 8009692:	2969      	cmp	r1, #105	; 0x69
 8009694:	d1f6      	bne.n	8009684 <_printf_i+0x30>
 8009696:	6820      	ldr	r0, [r4, #0]
 8009698:	6813      	ldr	r3, [r2, #0]
 800969a:	0605      	lsls	r5, r0, #24
 800969c:	f103 0104 	add.w	r1, r3, #4
 80096a0:	d52a      	bpl.n	80096f8 <_printf_i+0xa4>
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da03      	bge.n	80096b2 <_printf_i+0x5e>
 80096aa:	222d      	movs	r2, #45	; 0x2d
 80096ac:	425b      	negs	r3, r3
 80096ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096b2:	486f      	ldr	r0, [pc, #444]	; (8009870 <_printf_i+0x21c>)
 80096b4:	220a      	movs	r2, #10
 80096b6:	e039      	b.n	800972c <_printf_i+0xd8>
 80096b8:	2973      	cmp	r1, #115	; 0x73
 80096ba:	f000 809d 	beq.w	80097f8 <_printf_i+0x1a4>
 80096be:	d808      	bhi.n	80096d2 <_printf_i+0x7e>
 80096c0:	296f      	cmp	r1, #111	; 0x6f
 80096c2:	d020      	beq.n	8009706 <_printf_i+0xb2>
 80096c4:	2970      	cmp	r1, #112	; 0x70
 80096c6:	d1dd      	bne.n	8009684 <_printf_i+0x30>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	f043 0320 	orr.w	r3, r3, #32
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	e003      	b.n	80096da <_printf_i+0x86>
 80096d2:	2975      	cmp	r1, #117	; 0x75
 80096d4:	d017      	beq.n	8009706 <_printf_i+0xb2>
 80096d6:	2978      	cmp	r1, #120	; 0x78
 80096d8:	d1d4      	bne.n	8009684 <_printf_i+0x30>
 80096da:	2378      	movs	r3, #120	; 0x78
 80096dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096e0:	4864      	ldr	r0, [pc, #400]	; (8009874 <_printf_i+0x220>)
 80096e2:	e055      	b.n	8009790 <_printf_i+0x13c>
 80096e4:	6813      	ldr	r3, [r2, #0]
 80096e6:	1d19      	adds	r1, r3, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6011      	str	r1, [r2, #0]
 80096ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f4:	2301      	movs	r3, #1
 80096f6:	e08c      	b.n	8009812 <_printf_i+0x1be>
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6011      	str	r1, [r2, #0]
 80096fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009700:	bf18      	it	ne
 8009702:	b21b      	sxthne	r3, r3
 8009704:	e7cf      	b.n	80096a6 <_printf_i+0x52>
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	6825      	ldr	r5, [r4, #0]
 800970a:	1d18      	adds	r0, r3, #4
 800970c:	6010      	str	r0, [r2, #0]
 800970e:	0628      	lsls	r0, r5, #24
 8009710:	d501      	bpl.n	8009716 <_printf_i+0xc2>
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	e002      	b.n	800971c <_printf_i+0xc8>
 8009716:	0668      	lsls	r0, r5, #25
 8009718:	d5fb      	bpl.n	8009712 <_printf_i+0xbe>
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	4854      	ldr	r0, [pc, #336]	; (8009870 <_printf_i+0x21c>)
 800971e:	296f      	cmp	r1, #111	; 0x6f
 8009720:	bf14      	ite	ne
 8009722:	220a      	movne	r2, #10
 8009724:	2208      	moveq	r2, #8
 8009726:	2100      	movs	r1, #0
 8009728:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800972c:	6865      	ldr	r5, [r4, #4]
 800972e:	60a5      	str	r5, [r4, #8]
 8009730:	2d00      	cmp	r5, #0
 8009732:	f2c0 8095 	blt.w	8009860 <_printf_i+0x20c>
 8009736:	6821      	ldr	r1, [r4, #0]
 8009738:	f021 0104 	bic.w	r1, r1, #4
 800973c:	6021      	str	r1, [r4, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d13d      	bne.n	80097be <_printf_i+0x16a>
 8009742:	2d00      	cmp	r5, #0
 8009744:	f040 808e 	bne.w	8009864 <_printf_i+0x210>
 8009748:	4665      	mov	r5, ip
 800974a:	2a08      	cmp	r2, #8
 800974c:	d10b      	bne.n	8009766 <_printf_i+0x112>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	07db      	lsls	r3, r3, #31
 8009752:	d508      	bpl.n	8009766 <_printf_i+0x112>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	429a      	cmp	r2, r3
 800975a:	bfde      	ittt	le
 800975c:	2330      	movle	r3, #48	; 0x30
 800975e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009762:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009766:	ebac 0305 	sub.w	r3, ip, r5
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	f8cd 8000 	str.w	r8, [sp]
 8009770:	463b      	mov	r3, r7
 8009772:	aa03      	add	r2, sp, #12
 8009774:	4621      	mov	r1, r4
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff fef6 	bl	8009568 <_printf_common>
 800977c:	3001      	adds	r0, #1
 800977e:	d14d      	bne.n	800981c <_printf_i+0x1c8>
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	b005      	add	sp, #20
 8009786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978a:	4839      	ldr	r0, [pc, #228]	; (8009870 <_printf_i+0x21c>)
 800978c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009790:	6813      	ldr	r3, [r2, #0]
 8009792:	6821      	ldr	r1, [r4, #0]
 8009794:	1d1d      	adds	r5, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6015      	str	r5, [r2, #0]
 800979a:	060a      	lsls	r2, r1, #24
 800979c:	d50b      	bpl.n	80097b6 <_printf_i+0x162>
 800979e:	07ca      	lsls	r2, r1, #31
 80097a0:	bf44      	itt	mi
 80097a2:	f041 0120 	orrmi.w	r1, r1, #32
 80097a6:	6021      	strmi	r1, [r4, #0]
 80097a8:	b91b      	cbnz	r3, 80097b2 <_printf_i+0x15e>
 80097aa:	6822      	ldr	r2, [r4, #0]
 80097ac:	f022 0220 	bic.w	r2, r2, #32
 80097b0:	6022      	str	r2, [r4, #0]
 80097b2:	2210      	movs	r2, #16
 80097b4:	e7b7      	b.n	8009726 <_printf_i+0xd2>
 80097b6:	064d      	lsls	r5, r1, #25
 80097b8:	bf48      	it	mi
 80097ba:	b29b      	uxthmi	r3, r3
 80097bc:	e7ef      	b.n	800979e <_printf_i+0x14a>
 80097be:	4665      	mov	r5, ip
 80097c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80097c4:	fb02 3311 	mls	r3, r2, r1, r3
 80097c8:	5cc3      	ldrb	r3, [r0, r3]
 80097ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80097ce:	460b      	mov	r3, r1
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d1f5      	bne.n	80097c0 <_printf_i+0x16c>
 80097d4:	e7b9      	b.n	800974a <_printf_i+0xf6>
 80097d6:	6813      	ldr	r3, [r2, #0]
 80097d8:	6825      	ldr	r5, [r4, #0]
 80097da:	6961      	ldr	r1, [r4, #20]
 80097dc:	1d18      	adds	r0, r3, #4
 80097de:	6010      	str	r0, [r2, #0]
 80097e0:	0628      	lsls	r0, r5, #24
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	d501      	bpl.n	80097ea <_printf_i+0x196>
 80097e6:	6019      	str	r1, [r3, #0]
 80097e8:	e002      	b.n	80097f0 <_printf_i+0x19c>
 80097ea:	066a      	lsls	r2, r5, #25
 80097ec:	d5fb      	bpl.n	80097e6 <_printf_i+0x192>
 80097ee:	8019      	strh	r1, [r3, #0]
 80097f0:	2300      	movs	r3, #0
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	4665      	mov	r5, ip
 80097f6:	e7b9      	b.n	800976c <_printf_i+0x118>
 80097f8:	6813      	ldr	r3, [r2, #0]
 80097fa:	1d19      	adds	r1, r3, #4
 80097fc:	6011      	str	r1, [r2, #0]
 80097fe:	681d      	ldr	r5, [r3, #0]
 8009800:	6862      	ldr	r2, [r4, #4]
 8009802:	2100      	movs	r1, #0
 8009804:	4628      	mov	r0, r5
 8009806:	f7f6 fce3 	bl	80001d0 <memchr>
 800980a:	b108      	cbz	r0, 8009810 <_printf_i+0x1bc>
 800980c:	1b40      	subs	r0, r0, r5
 800980e:	6060      	str	r0, [r4, #4]
 8009810:	6863      	ldr	r3, [r4, #4]
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	2300      	movs	r3, #0
 8009816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981a:	e7a7      	b.n	800976c <_printf_i+0x118>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	462a      	mov	r2, r5
 8009820:	4639      	mov	r1, r7
 8009822:	4630      	mov	r0, r6
 8009824:	47c0      	blx	r8
 8009826:	3001      	adds	r0, #1
 8009828:	d0aa      	beq.n	8009780 <_printf_i+0x12c>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	079b      	lsls	r3, r3, #30
 800982e:	d413      	bmi.n	8009858 <_printf_i+0x204>
 8009830:	68e0      	ldr	r0, [r4, #12]
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	4298      	cmp	r0, r3
 8009836:	bfb8      	it	lt
 8009838:	4618      	movlt	r0, r3
 800983a:	e7a3      	b.n	8009784 <_printf_i+0x130>
 800983c:	2301      	movs	r3, #1
 800983e:	464a      	mov	r2, r9
 8009840:	4639      	mov	r1, r7
 8009842:	4630      	mov	r0, r6
 8009844:	47c0      	blx	r8
 8009846:	3001      	adds	r0, #1
 8009848:	d09a      	beq.n	8009780 <_printf_i+0x12c>
 800984a:	3501      	adds	r5, #1
 800984c:	68e3      	ldr	r3, [r4, #12]
 800984e:	9a03      	ldr	r2, [sp, #12]
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	42ab      	cmp	r3, r5
 8009854:	dcf2      	bgt.n	800983c <_printf_i+0x1e8>
 8009856:	e7eb      	b.n	8009830 <_printf_i+0x1dc>
 8009858:	2500      	movs	r5, #0
 800985a:	f104 0919 	add.w	r9, r4, #25
 800985e:	e7f5      	b.n	800984c <_printf_i+0x1f8>
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ac      	bne.n	80097be <_printf_i+0x16a>
 8009864:	7803      	ldrb	r3, [r0, #0]
 8009866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800986a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800986e:	e76c      	b.n	800974a <_printf_i+0xf6>
 8009870:	08009f29 	.word	0x08009f29
 8009874:	08009f3a 	.word	0x08009f3a

08009878 <memmove>:
 8009878:	4288      	cmp	r0, r1
 800987a:	b510      	push	{r4, lr}
 800987c:	eb01 0302 	add.w	r3, r1, r2
 8009880:	d807      	bhi.n	8009892 <memmove+0x1a>
 8009882:	1e42      	subs	r2, r0, #1
 8009884:	4299      	cmp	r1, r3
 8009886:	d00a      	beq.n	800989e <memmove+0x26>
 8009888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009890:	e7f8      	b.n	8009884 <memmove+0xc>
 8009892:	4283      	cmp	r3, r0
 8009894:	d9f5      	bls.n	8009882 <memmove+0xa>
 8009896:	1881      	adds	r1, r0, r2
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	42d3      	cmn	r3, r2
 800989c:	d100      	bne.n	80098a0 <memmove+0x28>
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80098a8:	e7f7      	b.n	800989a <memmove+0x22>

080098aa <_realloc_r>:
 80098aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ac:	4607      	mov	r7, r0
 80098ae:	4614      	mov	r4, r2
 80098b0:	460e      	mov	r6, r1
 80098b2:	b921      	cbnz	r1, 80098be <_realloc_r+0x14>
 80098b4:	4611      	mov	r1, r2
 80098b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098ba:	f7ff bc77 	b.w	80091ac <_malloc_r>
 80098be:	b922      	cbnz	r2, 80098ca <_realloc_r+0x20>
 80098c0:	f7ff fc26 	bl	8009110 <_free_r>
 80098c4:	4625      	mov	r5, r4
 80098c6:	4628      	mov	r0, r5
 80098c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ca:	f000 f814 	bl	80098f6 <_malloc_usable_size_r>
 80098ce:	42a0      	cmp	r0, r4
 80098d0:	d20f      	bcs.n	80098f2 <_realloc_r+0x48>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff fc69 	bl	80091ac <_malloc_r>
 80098da:	4605      	mov	r5, r0
 80098dc:	2800      	cmp	r0, #0
 80098de:	d0f2      	beq.n	80098c6 <_realloc_r+0x1c>
 80098e0:	4631      	mov	r1, r6
 80098e2:	4622      	mov	r2, r4
 80098e4:	f7ff fc00 	bl	80090e8 <memcpy>
 80098e8:	4631      	mov	r1, r6
 80098ea:	4638      	mov	r0, r7
 80098ec:	f7ff fc10 	bl	8009110 <_free_r>
 80098f0:	e7e9      	b.n	80098c6 <_realloc_r+0x1c>
 80098f2:	4635      	mov	r5, r6
 80098f4:	e7e7      	b.n	80098c6 <_realloc_r+0x1c>

080098f6 <_malloc_usable_size_r>:
 80098f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fa:	1f18      	subs	r0, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfbc      	itt	lt
 8009900:	580b      	ldrlt	r3, [r1, r0]
 8009902:	18c0      	addlt	r0, r0, r3
 8009904:	4770      	bx	lr
	...

08009908 <_init>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr

08009914 <_fini>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	bf00      	nop
 8009918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991a:	bc08      	pop	{r3}
 800991c:	469e      	mov	lr, r3
 800991e:	4770      	bx	lr
